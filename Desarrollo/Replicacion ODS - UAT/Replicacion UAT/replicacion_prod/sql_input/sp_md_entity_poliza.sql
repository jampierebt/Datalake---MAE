CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.sp_md_entity_poliza()
BEGIN

-- ------------------------------------------------------
-- DATOS DE CONTACTO DEL CONTRATANTE
-- ------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_CONTRATANTE_DATOS_CONTACTOS_GEN`
AS
SELECT DISTINCT 
       CON.ID_PERSONA
      ,DIR.CORREO AS CORREO_CONTRATANTE
      ,DIR.CORREO_ULT AS CORREO_CONTRANTANTE_ULT
      ,DIR.CELULAR AS CELULAR_CONTRATANTE
      ,DIR.CELULAR_ULT AS CELULAR_CONTRATANTE_ULT
      ,DIR.DEPARTAMENTO AS DEPARTAMENTO_CONTRATANTE
      ,DIR.CODIGO_DEPARTAMENTO AS CODIGO_DEPARTAMENTO_CONTRATANTE
      ,DIR.PROVINCIA AS PROVINCIA_CONTRATANTE
      ,DIR.CODIGO_PROVINCIA AS CODIGO_PROVINCIA_CONTRATANTE
      ,DIR.DISTRITO AS DISTRITO_CONTRATANTE
      ,DIR.CODIGO_DISTRITO AS CODIGO_DISTRITO_CONTRATANTE
      ,DIR.DIRECCION AS DIRECCION_CONTRATANTE
  FROM  `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE` CON 
  LEFT JOIN (
              SELECT  
               D.HASH_ID 
              ,D.DEPARTAMENTO
              ,D.CODIGO_DEPARTAMENTO 
              ,D.PROVINCIA 
              ,D.CODIGO_PROVINCIA 
              ,D.DISTRITO
              ,D.CODIGO_DISTRITO 
              ,D.DIRECCION
              ,D.CORREO 
              ,D.CORREO AS CORREO_ULT
              ,D.CELULAR
              ,D.CELULAR AS CELULAR_ULT
              FROM `iter-data-storage-pv-uat.master_party.V_MD_PERSONA` D
              QUALIFY(ROW_NUMBER()OVER(PARTITION BY D.HASH_ID ORDER BY D.DEPARTAMENTO DESC))=1
) DIR
         ON DIR.HASH_ID = CON.HASH_ID
;


-- ------------------------------------------------------
-- DATOS DE CONTACTO DEL ASEGURADO - 03
-- ------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_ASEGURADO_DATOS_CONTACTOS_ASEGURADO`
AS
SELECT DISTINCT ASE.ID_PERSONA
      ,DIR.CORREO AS CORREO_ASEGURADO
      ,DIR.CORREO_ULT AS CORREO_ASEGURADO_ULT
      ,DIR.CELULAR AS CELULAR_ASEGURADO
      ,DIR.CELULAR_ULT AS CELULAR_ASEGURADO_ULT
      ,DIR.DEPARTAMENTO AS DEPARTAMENTO_ASEGURADO
      ,DIR.CODIGO_DEPARTAMENTO AS CODIGO_DEPARTAMENTO_ASEGURADO
      ,DIR.PROVINCIA AS PROVINCIA_ASEGURADO
      ,DIR.CODIGO_PROVINCIA AS CODIGO_PROVINCIA_ASEGURADO
      ,DIR.DISTRITO AS DISTRITO_ASEGURADO
      ,DIR.CODIGO_DISTRITO AS CODIGO_DISTRITO_ASEGURADO
      ,DIR.DIRECCION AS DIRECCION_ASEGURADO
  FROM  `iter-data-storage-pv-uat.goldenrecord_data.ASEGURADO` ASE 
  LEFT JOIN (
         SELECT  
               D.HASH_ID 
              ,D.DEPARTAMENTO
              ,D.CODIGO_DEPARTAMENTO 
              ,D.PROVINCIA
              ,D.CODIGO_PROVINCIA 
              ,D.DISTRITO
              ,D.CODIGO_DISTRITO 
              ,D.DIRECCION
              ,D.CORREO 
              ,D.CORREO AS CORREO_ULT
              ,D.CELULAR
              ,D.CELULAR AS CELULAR_ULT
              FROM `iter-data-storage-pv-uat.master_party.V_MD_PERSONA` D
              QUALIFY(ROW_NUMBER()OVER(PARTITION BY D.HASH_ID ORDER BY D.DEPARTAMENTO DESC))=1
            ) DIR
  ON DIR.HASH_ID = ASE.HASH_ID
  WHERE ASE.HASH_ID IS NOT NULL
;

-- ------------------------------------------------------
-- DATOS DE CONTACTO DEL BENEFICIARIOS - 02
-- ------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_BENEFICIARIO_DATOS_CONTACTOS_BENEFICIARIO`
AS

WITH V_MD_PERSONA AS (
    SELECT HASH_ID
    ,LOWER(CORREO) CORREO
    ,CELULAR
    ,DIRECCION
    ,DEPARTAMENTO
    ,PROVINCIA
    ,DISTRITO
    FROM `iter-data-storage-pv-uat.master_party.V_MD_PERSONA`
)

SELECT DISTINCT BEN.ID_PERSONA
      ,PER.CORREO AS CORREO_BENEFICIARIO
      ,PER.CORREO AS CORREO_BENEFICIARIO_ULT
      ,PER.CELULAR AS CELULAR_BENEFICIARIO
      ,PER.CELULAR AS CELULAR_BENEFICIARIO_ULT
      ,PER.DEPARTAMENTO AS DEPARTAMENTO_BENEFICIARIO
      ,PER.PROVINCIA AS PROVINCIA_BENEFICIARIO
      ,PER.DISTRITO AS DISTRITO_BENEFICIARIO
      ,PER.DIRECCION AS DIRECCION_BENEFICIARIO
  FROM  `iter-data-storage-pv-uat.goldenrecord_data.BENEFICIARIO` BEN 
  LEFT JOIN V_MD_PERSONA PER ON PER.HASH_ID = BEN.HASH_ID
;
-- ------------------------------------------------------
-- RESUMEN_ACOMPAÃ‘ANTE
-- ------------------------------------------------------
CREATE OR REPLACE TABLE   `iter-data-storage-pv-uat.temp.TMP_ACOMPANIANTE` AS 
    SELECT DISTINCT 
    *
FROM(
SELECT DISTINCT 
A.NUMERO_POLIZA
,B.tipo_documento     TIPO_DOCUMENTO
,B.numero_documento   NUMERO_DOCUMENTO,
A.fecha_partida       FECHA_PARTIDA
,A.fecha_retorno      FECHA_RETORNO
,UPPER(B.nombres)     NOMBRES
,UPPER(B.apellido_paterno)  APELLIDO_PATERNO,
UPPER(B.apellido_materno)   APELLIDO_MATERNO
,B.fecha_nacimiento          FECHA_NACIMIENTO, 
LOWER(B.correo)              CORREO
,B.telefono                  TELEFONO
,C.coberturas_0_seccion      COBERTURA_SECCION
,C.coberturas_0_descripcion  COBERTURA_DESCRIPCION, 
C.coberturas_0_valor         SUMA_ASEGURADA_VIAJE,
CASE WHEN FLAG_TITULAR='1' THEN CAST('US$ 10,000' AS STRING)
    ELSE CAST(NULL AS STRING) END SUMA_ASEGURADA_VIDA
FROM `iter-data-storage-pv-uat.traveldb_data.venta_raw` A
LEFT JOIN `iter-data-storage-pv-uat.traveldb_data.cliente_venta_raw` B ON B.id_venta=A._id 
LEFT JOIN `iter-data-storage-pv-uat.traveldb_data.plan_venta_raw` C ON C.id_venta=A._id
WHERE A.numero_poliza IS NOT NULL
and c.codigo_eleccion_plan='1' ) 
WHERE NUMERO_DOCUMENTO NOT IN (
    SELECT DISTINCT B.numero_documento FROM `iter-data-storage-pv-uat.traveldb_data.cliente_venta_raw` B
    WHERE B.flag_contratante='1' AND B.flag_titular='0')
;

-- ------------------------------------------------------
-- RENTA VITALICIA
-- ------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_RENTA_VITALICIA` 
AS
SELECT
A.NUMERO_POLIZA
,AP.ID_PRODUCTO
,AP.NOMBRE_PRODUCTO
,A.NUMERO_ITEM
,CASE WHEN A.INDICADOR_FALLECIMIENTO='S' THEN TRUE
      WHEN A.INDICADOR_FALLECIMIENTO='N' THEN FALSE
      END AS FLAG_INDICADOR_FALLECIMIENTO
,A.FECHA_INVALIDEZ
,CASE WHEN A.FLAG_INVALIDEZ='S' THEN TRUE
      WHEN A.FLAG_INVALIDEZ='N' THEN FALSE
      END AS FLAG_INVALIDEZ
,A.TIPO_INVALIDEZ
,A.COD_CIA_ORIGEN
,A.COD_TIPO_PENSION_INICIAL
,A.NUMERO_SOLICITUD
,A.VALOR_CAPITAL_PENSION
,POL.IND_DERECHO_CRECER 
,POL.IND_GRATIFICACION
,POL.num_meses_diferidos AS NUMERO_MESES_DIFERIDOS
,POL.fec_inicio_vigencia AS FECHA_INICIO_VIGENCIA			
,POL.fec_fin_vigencia AS FECHA_FIN_VIGENCIA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_RENTA_VITALICIA`  A
  LEFT JOIN iter-data-storage-pv-uat.rviadmin_data.poliza_raw POL ON A.NUMERO_POLIZA =CAST(POL.NUM_POLIZA AS STRING)
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
          ON POL.cod_cartera = AP.ID_PRODUCTO 
         AND AP.ID_FUENTE = '02'
WHERE  A.PARENTESCO='CAUSANTE' --AND   numero_poliza='1'
QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY NUMERO_POLIZA  DESC )) = 1

;

CREATE OR REPLACE TABLE  `iter-data-storage-pv-uat.temp.TMP_POLIZA_RV` 
AS
SELECT  
         CAST(POL.num_poliza AS STRING) AS NUMERO_POLIZA
        , POL.FEC_SOL_PENSION
        , VAL_PRIMA_UNICA
        , DATE_ADD(DATE_ADD(DATE_ADD(EXTRACT(DATE FROM POL.fec_inicio_vigencia), INTERVAL IFNULL(POL.num_meses_diferidos,0) MONTH), INTERVAL POL.num_meses_garantizados MONTH), INTERVAL -1 DAY) AS PERIODO_GARANTIZADO
        , POL.VAL_PENSION_ORIGINAL
        , POL.VAL_PENSION_BASE
        , CASE POL.ind_modalidad when 'D' then date_add(Date(POL.fec_inicio_vigencia), interval CAST(POL.num_meses_diferidos AS INT64) month) else Date(POL.fec_inicio_vigencia) END FECHA_INICIO_PAGO
        , IF(PER.ind_invalidez = 'S', 'SI', 'NO') IND_INVALIDEZ
        , CASE PER.cod_tipo_invalidez 
               WHEN 'P' THEN 'INVALIDEZ PARCIAL' 
               WHEN 'N' THEN 'NO INVALIDO' 
               WHEN 'T' THEN 'INVALIDEZ TOTAL' 
              ELSE 'TIPO INVALIDEZ DESCONOCIDO' END COD_TIPO_INVALIDEZ
       , BENPAG.PJE_PENSION
       , BENPAG.PJE_ADICIONAL
       , BENPAG.NUM_VIA_PAGO
       , TBAN.gls_larga_banco AS COD_BANCO    
from iter-data-storage-pv-uat.rviadmin_data.poliza_raw POL
INNER JOIN  `iter-data-storage-pv-uat.rviadmin_data.BEN_PAGOS_raw` BENPAG ON POL.num_poliza = BENPAG.num_poliza AND BENPAG.num_item = 1
INNER JOIN `iter-data-storage-pv-uat.rviadmin_data.personas_raw` PER ON BENPAG.num_identificacion = PER.num_identificacion
LEFT OUTER JOIN `iter-data-storage-pv-uat.rviadmin_data.t_bancos_raw` TBAN ON BENPAG.cod_banco = TBAN.cod_banco
;

CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_RENTA_PARTICULAR_VITALICIA` 
AS
SELECT 
NUMERO_POLIZA
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,FLAG_INDICADOR_MODALIDAD
,FLAG_INDICADOR_FALLECIMIENTO
,FLAG_INDICADOR_SEPELIO
,FECHA_SOLICITUD
,FECHA_DEVENGUE
,FECHA_INICIO_VIGENCIA
,FECHA_FIN_VIGENCIA
,FECHA_INICIO_PAGO
,FECHA_ENVIO_POLIZA
,FECHA_RECAUDACION
,FECHA_PRIMER_PAGO
,NUMERO_MESES_DIFERIDOS
,NUMERO_MESES_AJUSTE
,CODIGO_AGENTE
,NUMERO_MESES_TEMPORALIDAD
,NUMERO_MESES_GARANTIZADOS
,NUMERO_MESES_PRIMER_TRAMO
,VALOR_PRIMA_UNICA
,VALOR_PJE_RENTA_SEGUNDO_TRAMO
,VALOR_PJE_CONYUGE
,VALOR_PJE_AJUSTE_MONEDA
,VALOR_PJE_DEVOLUCION
,VALOR_PJE_DEVOLUCION_FALLECIMIENTO
,VALOR_RENTA_ORIGINAL
,VALOR_RENTA_BASE
,VALOR_RENTA_BASE_ANTERIOR
,VALOR_TASA_VENTA_IS
,VALOR_TASA_VENTA
,VALOR_TASA_TRA
,VALOR_DCOM
,VALOR_TOT_CIC
,VALOR_TASA_COSTO_EQUIV
,VALOR_FACTOR_ULTIMO
,VALOR_IVA
,VALOR_DEV
,VALOR_RES_PENSION
,VALOR_RES_SEPELIO
,VALOR_RES_DEVOLUCION
,VALOR_RENTA_SEG_TRAMO
,MODALIDAD
,TIPO_PAGO
,ESTADO_CAUSAL
,CAST(NULL AS INT64)   NUMERO_ITEM
,CAST(NULL AS DATE)      FECHA_INVALIDEZ
,CAST(NULL AS BOOL)   FLAG_INVALIDEZ
,CAST(NULL AS STRING)   TIPO_INVALIDEZ
,CAST(NULL AS STRING)   COD_CIA_ORIGEN
,CAST(NULL AS STRING)  COD_TIPO_PENSION_INICIAL
,CAST(NULL AS STRING)   NUMERO_SOLICITUD
,CAST(NULL AS FLOAT64)    VALOR_CAPITAL_PENSION
,CAST(NULL AS STRING)   IND_DERECHO_CRECER
,CAST(NULL AS STRING)   IND_GRATIFICACION
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_RENTA` 
UNION ALL
SELECT
A.NUMERO_POLIZA
,A.ID_PRODUCTO 
,A.NOMBRE_PRODUCTO
,CAST(NULL AS STRING)   NUMERO_COTIZACION
,CAST(NULL AS STRING)   NUMERO_SOLICITUD_COTIZACION
,CAST(NULL AS STRING)   FLAG_INDICADOR_MODALIDAD
,A.FLAG_INDICADOR_FALLECIMIENTO
,CAST(NULL AS BOOL)     FLAG_INDICADOR_SEPELIO
,CAST(NULL AS DATE)      FECHA_SOLICITUD
,CAST(NULL AS DATE)      FECHA_DEVENGUE
,CAST(FECHA_INICIO_VIGENCIA AS DATE)
,CAST(FECHA_FIN_VIGENCIA AS DATE)
,CAST(NULL AS DATE)       FECHA_INICIO_PAGO
,CAST(NULL AS DATE)      FECHA_ENVIO_POLIZA
,CAST(NULL AS DATE)       FECHA_RECAUDACION
,CAST(NULL AS DATE)    FECHA_PRIMER_PAGO
,A.NUMERO_MESES_DIFERIDOS
,CAST(NULL AS INT64)      NUMERO_MESES_AJUSTE
,CAST(NULL AS INT64)      CODIGO_AGENTE
,CAST(NULL AS INT64)     NUMERO_MESES_TEMPORALIDAD
,CAST(NULL AS INT64)     NUMERO_MESES_GARANTIZADOS
,CAST(NULL AS INT64)     NUMERO_MESES_PRIMER_TRAMO
,CAST(NULL AS FLOAT64)      VALOR_PRIMA_UNICA
,CAST(NULL AS FLOAT64)     VALOR_PJE_RENTA_SEGUNDO_TRAMO
,CAST(NULL AS FLOAT64)     VALOR_PJE_CONYUGE
,CAST(NULL AS FLOAT64)     VALOR_PJE_AJUSTE_MONEDA
,CAST(NULL AS FLOAT64)     VALOR_PJE_DEVOLUCION
,CAST(NULL AS FLOAT64)     VALOR_PJE_DEVOLUCION_FALLECIMIENTO
,CAST(NULL AS FLOAT64)     VALOR_RENTA_ORIGINAL
,CAST(NULL AS FLOAT64)     VALOR_RENTA_BASE
,CAST(NULL AS FLOAT64)     VALOR_RENTA_BASE_ANTERIOR
,CAST(NULL AS FLOAT64)    VALOR_TASA_VENTA_IS
,CAST(NULL AS FLOAT64)     VALOR_TASA_VENTA
,CAST(NULL AS FLOAT64)     VALOR_TASA_TRA
,CAST(NULL AS FLOAT64)     VALOR_DCOM
,CAST(NULL AS FLOAT64)     VALOR_TOT_CIC
,CAST(NULL AS FLOAT64)    VALOR_TASA_COSTO_EQUIV
,CAST(NULL AS FLOAT64)     VALOR_FACTOR_ULTIMO
,CAST(NULL AS FLOAT64)     VALOR_IVA
,CAST(NULL AS FLOAT64)     VALOR_DEV
,CAST(NULL AS FLOAT64)     VALOR_RES_PENSION
,CAST(NULL AS FLOAT64)     VALOR_RES_SEPELIO
,CAST(NULL AS FLOAT64)     VALOR_RES_DEVOLUCION
,CAST(NULL AS FLOAT64)     VALOR_RENTA_SEG_TRAMO
,CAST(NULL AS STRING)     MODALIDAD
,CAST(NULL AS STRING)     TIPO_PAGO
,CAST(NULL AS STRING)     ESTADO_CAUSAL
,A.NUMERO_ITEM
,A.FECHA_INVALIDEZ
,A.FLAG_INVALIDEZ
,A.TIPO_INVALIDEZ
,A.COD_CIA_ORIGEN
,A.COD_TIPO_PENSION_INICIAL
,A.NUMERO_SOLICITUD
,A.VALOR_CAPITAL_PENSION
,A.IND_DERECHO_CRECER
,A.IND_GRATIFICACION
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_RENTA_VITALICIA`  A
;

CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_RPP`
AS

SELECT  PR.GLS_POLIZA  AS NUMERO_POLIZA
        , PR.COD_PLAN 
        , IF(PR.IND_SEPELIO, 'SI', 'NO') IND_SEPELIO
        , IF(PR.NUM_MESES_PRIMER_TRAMO > 0, 'SI', 'NO') PAGO_DOBLE
        , IF(BEN.IND_INVALIDEZ,'SI','NO') IND_INVALIDEZ
        , BEN.COD_TIPO_INVALIDEZ
        , BEN.FEC_INVALIDEZ
        , BEN.VAL_PJE_RENTA
        , BEN.VAL_PJE_ADICIONAL
        , IF(BEN.IND_PEP,'SI','NO') IND_PEP
        , IF(BEN.IND_SUJETO_OBLIGADO,'SI','NO') IND_SUJETO_OBLIGADO
FROM `iter-data-storage-pv-uat.admwr_data.poliza_raw` PR
INNER JOIN `iter-data-storage-pv-uat.admwr_data.beneficiario_raw` BEN 
ON PR.cod_poliza = BEN.cod_poliza AND BEN.cod_parentesco = '80' --TITULAR
;
-- ------------------------------------------------------
-- RESUMEN_COBRANZA
-- ------------------------------------------------------
/*
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_RESUMEN_COBRANZA`
AS
WITH TMP_COBRO AS 
(
SELECT 
 P.NUMERO_POLIZA
,IF(MAX(CASE WHEN UPPER(ABO.ESTADO_CARGO)='DIFERIDO' THEN 1 ELSE 0 END )=1,TRUE,FALSE) AS FLAG_ENDOSO
,COUNT(DISTINCT (CASE WHEN UPPER(ABO.ESTADO_CARGO)='DIFERIDO' THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_DIFERIDOS
,MAX(ABO.FECHA_REGISTRO_CAJA_P)    AS FECHA_ULTIMO_PAGO
,SUM(IFNULL(ABO.MONTO_CANTIDAD,0)) AS TOTAL_RECAUDADO
,MAX(PAG.FECHA_PAGADO_HASTA) AS FECHA_PAGADO_HASTA
-- Fecha de Inicio Cuota del Ultimo cargo pagado
,MAX( CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL THEN ABO.CARGO_FECHA_COBERTURA_INICIO ELSE NULL END ) AS FECHA_INICIO_CUOTA_ULTIMO_PAGO
-- Fecha de Vencimiento de la cuota del ultimo cargo pagado.
,MAX(CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL THEN ABO.CARGO_FECHA_COBERTURA_FIN ELSE NULL END )    AS FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO
-- Cantidad de cuotas pendientes por pagar
,COUNT(DISTINCT (CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NULL AND P.FECHA_INICIO <= ABO.CARGO_FECHA_COBERTURA_INICIO AND ABO.ESTADO_CARGO ='ACTIVO'  THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_CUOTAS_IMPAGO
-- Cantidad de cuotas pagadas
,COUNT(DISTINCT (CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL AND ABO.ID_ABONO <> '0' THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_CUOTAS_PAGADAS
-- Sumar todas las cuotas pagadas
,SUM(ABO.MONTO_CANTIDAD) AS PRIMA_TOTAL_PAGADO
-- sumar todas las cuotas por pagar
,SUM(CASE WHEN ABO.FECHA_REGISTRO_CAJA_P IS NULL AND ABO.ESTADO_CARGO ='ACTIVO' AND P.FECHA_INICIO <= ABO.CARGO_FECHA_COBERTURA_INICIO THEN ABO.MONTO_CARGO_CANTIDAD ELSE 0 END ) AS PRIMA_TOTAL_POR_PAGAR
 FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` P
 LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO` ABO 
        ON ABO.NUMERO_POLIZA = P.NUMERO_POLIZA
       AND ABO.ID_DEVOLUCION = 0
 LEFT JOIN `iter-data-storage-pv-uat.acsele_data.PAGADO_HASTA_raw` PAG
        ON P.NUMERO_POLIZA = PAG.NUMERO_POLIZA
 WHERE (ABO.NUMERO_POLIZA IS NOT NULL OR PAG.NUMERO_POLIZA IS NOT NULL)
GROUP BY NUMERO_POLIZA
), 
TMP_ULTIMA_CUOTA AS
( SELECT NUMERO_POLIZA
        ,MONTO_CARGO_CANTIDAD AS MONTO_ULTIMA_CUOTA_PAGADO
  FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO`
  WHERE FECHA_APLICADO_CARGO_ABONO IS NOT NULL
  QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY CARGO_FECHA_COBERTURA_INICIO DESC))=1
),
TMP_COBRO_EXP_SERV AS 
(
  SELECT TRIM(CAST(num_poliza AS STRING)) AS NUMERO_POLIZA,
  MAX(DATE(fec_pagado_hasta,'America/Lima')) AS FECHA_PAGADO_HASTA
  FROM  `iter-data-storage-pv-uat.raw_vesta_exp_serv.POLIZA_raw`
  GROUP BY NUMERO_POLIZA
),
TMP_MORA AS 
(
SELECT MAX(MORA) AS MORA,
       NUMERO_POLIZA,
       SUM(MONTO_POR_COBRAR_USD) AS MONTO_POR_COBRAR_USD ,
       SUM(MONTO_POR_COBRAR_PEN) AS MONTO_POR_COBRAR_PEN ,
       SUM(MONTO_CANTIDAD_ABONO_USD) AS MONTO_CANTIDAD_ABONO_USD,
        SUM(MONTO_CANTIDAD_ABONO_PEN) AS MONTO_CANTIDAD_ABONO_PEN
  FROM `iter-data-storage-pv-uat.goldenrecord_data.HM_POLIZA_CARGO_VIDA` 
  WHERE TIPO_PERIODO='RECAUDACION'
  AND PERIODO=(
       SELECT MAX(PERIODO) AS PERIODO FROM `iter-data-storage-pv-uat.goldenrecord_data.HM_POLIZA_CARGO_VIDA` 
  ) GROUP BY NUMERO_POLIZA
)
SELECT
 POL.NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
   COB.FLAG_ENDOSO
  ,COB.CANTIDAD_DIFERIDOS
  ,COB.FECHA_ULTIMO_PAGO
  ,COB.TOTAL_RECAUDADO
  ,COALESCE(COB.FECHA_PAGADO_HASTA,EXPSERV.FECHA_PAGADO_HASTA) AS FECHA_PAGADO_HASTA
  ,CUO.MONTO_ULTIMA_CUOTA_PAGADO
  ,COALESCE(MOR.MORA,0) AS MORA
  ,COALESCE(MOR.MONTO_POR_COBRAR_USD,0) AS MONTO_POR_COBRAR_USD
  ,COALESCE(MOR.MONTO_POR_COBRAR_PEN,0) AS MONTO_POR_COBRAR_PEN
  ,COALESCE(MOR.MONTO_CANTIDAD_ABONO_USD,0) AS MONTO_CANTIDAD_ABONO_USD
  ,COALESCE(MOR.MONTO_CANTIDAD_ABONO_PEN,0) AS MONTO_CANTIDAD_ABONO_PEN
  ,COB.FECHA_INICIO_CUOTA_ULTIMO_PAGO
  ,COB.FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO
  ,COB.CANTIDAD_CUOTAS_IMPAGO
  ,COB.CANTIDAD_CUOTAS_PAGADAS
  ,COB.PRIMA_TOTAL_PAGADO
  ,COB.PRIMA_TOTAL_POR_PAGAR
)) AS RESUMEN_RECAUDACION
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
LEFT JOIN TMP_COBRO COB
      ON POL.NUMERO_POLIZA = COB.NUMERO_POLIZA
LEFT JOIN TMP_ULTIMA_CUOTA CUO
       ON POL.NUMERO_POLIZA = CUO.NUMERO_POLIZA
LEFT JOIN TMP_COBRO_EXP_SERV EXPSERV
       ON POL.NUMERO_POLIZA=EXPSERV.NUMERO_POLIZA
LEFT JOIN TMP_MORA MOR 
       ON POL.NUMERO_POLIZA=MOR.NUMERO_POLIZA
WHERE POL.NOMBRE_GRUPO_PRODUCTO IN ('VIDA','VEHICULAR')
AND POL.ID_FUENTE IN ('01','80')
GROUP BY POL.NUMERO_POLIZA
;
*/
-- ------------------------------------------------------
-- RESUMEN_COBRANZA
-- ------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_RESUMEN_COBRANZA`
AS
WITH
TMP_CRONOGRAMA AS  
(
SELECT 
NUMERO_POLIZA 
,FECHA_VIGENCIA_INICIO
,FECHA_VIGENCIA_FIN
,FECHA_OPERACION
,DESCRIPCION_EVENTO 
,FECHA_OPERACION_REG_SISTEMA
,ROW_NUMBER() OVER(PARTITION BY NUMERO_POLIZA ORDER BY FECHA_OPERACION_REG_SISTEMA DESC) AS PERIODO_VIGENCIA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_OPERACION` 
WHERE NOMBRE_GRUPO_PRODUCTO = 'VEHICULAR'
      AND ESTADO_OPERACION = 'Applied operation'
      AND DESCRIPCION_EVENTO IN ('EMITIR','RENOVAR')
--    AND NUMERO_POLIZA = '690009603'
QUALIFY (ROW_NUMBER() OVER(PARTITION BY NUMERO_POLIZA ORDER BY FECHA_OPERACION_REG_SISTEMA DESC))=1
),
TMP_COBRO_OPTEM AS                                                                               
(
 SELECT 
 P.NUMERO_POLIZA
 ,MAX(IF(STATUS IN ('applied') AND PERIODO_VIGENCIA IS NOT NULL, DOCDATE, NULL)) AS FECHA_INICIO_CUOTA_ULTIMO_PAGO
 ,MAX(IF(STATUS IN ('applied') AND PERIODO_VIGENCIA IS NOT NULL, DATEUSERECIPENT, NULL)) AS FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO
 ,SUM(IF(STATUS IN('active','cancelled') AND PERIODO_VIGENCIA IS NOT NULL, 1, 0)) AS CANTIDAD_CUOTAS_IMPAGO
 ,SUM(IF(OPTEM.PERIODO_VIGENCIA IS NOT NULL AND STATUS IN ('applied') , OPTEM.AMOUNT, 0)) AS PRIMA_TOTAL_PAGADO
 ,SUM(IF(STATUS IN('active','cancelled') AND PERIODO_VIGENCIA IS NOT NULL, OPTEM.AMOUNT, 0)) AS PRIMA_TOTAL_POR_PAGAR
 ,SUM(IF(OPTEM.PERIODO_VIGENCIA IS NOT NULL, OPTEM.AMOUNT, 0)) AS PRIMA_TOTAL_SUMARIZADO
 FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` P  
 LEFT JOIN(SELECT OPTEM.*, CRON.PERIODO_VIGENCIA                                                                                      
           FROM `iter-data-storage-pv-uat.acsele_data.TD_OPENITEM`OPTEM
           LEFT JOIN TMP_CRONOGRAMA CRON
           ON CAST(OPTEM.DOCDATE AS DATE) BETWEEN CRON.FECHA_VIGENCIA_INICIO AND CRON.FECHA_VIGENCIA_FIN 
              AND OPTEM.OPR_POLICYNUMBER = CRON.NUMERO_POLIZA
           WHERE DTY_DESCRIPTION = 'PrimaEmitida' AND STATUS IN ('applied','active','cancelled')
           ) OPTEM                                 
        ON OPTEM.OPR_POLICYNUMBER = P.NUMERO_POLIZA
GROUP BY P.NUMERO_POLIZA
), 
TMP_COBRO AS 
(
SELECT 
 P.NUMERO_POLIZA
 --,PERIODO_VIGENCIA
,IF(MAX(CASE WHEN UPPER(ABO.ESTADO_CARGO)='DIFERIDO' THEN 1 ELSE 0 END )=1,TRUE,FALSE) AS FLAG_ENDOSO
,COUNT(DISTINCT (CASE WHEN UPPER(ABO.ESTADO_CARGO)='DIFERIDO' THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_DIFERIDOS
,MAX(ABO.FECHA_REGISTRO_CAJA_P)    AS FECHA_ULTIMO_PAGO
,SUM(IFNULL(ABO.MONTO_CANTIDAD,0)) AS TOTAL_RECAUDADO
,MAX(PAG.FECHA_PAGADO_HASTA) AS FECHA_PAGADO_HASTA
-- Fecha de Inicio Cuota del Ultimo cargo pagado
,MIN(DATE_SUB(IF(EXTRACT(YEAR FROM ABO.CARGO_FECHA_COBERTURA_INICIO) <= 1900, NULL,ABO.CARGO_FECHA_COBERTURA_INICIO), INTERVAL 1 MONTH)) AS FECHA_INICIO_CUOTA_ULTIMO_PAGO 
/*MAX( CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL THEN ABO.CARGO_FECHA_COBERTURA_INICIO ELSE NULL END )*/
-- Fecha de Vencimiento de la cuota del ultimo cargo pagado.
,MIN(DATE_SUB(IF(EXTRACT(YEAR FROM ABO.CARGO_FECHA_COBERTURA_FIN) <= 1900, NULL,ABO.CARGO_FECHA_COBERTURA_FIN), INTERVAL 1 MONTH)) AS FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO 
/*MAX(CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL THEN ABO.CARGO_FECHA_COBERTURA_FIN ELSE NULL END )*/
-- Cantidad de cuotas pendientes por pagar
,COUNT(DISTINCT (CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NULL AND P.FECHA_INICIO <= ABO.CARGO_FECHA_COBERTURA_INICIO AND ABO.ESTADO_CARGO ='ACTIVO'  THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_CUOTAS_IMPAGO
-- Cantidad de cuotas pagadas
,COUNT(DISTINCT (CASE WHEN ABO.FECHA_APLICADO_CARGO_ABONO IS NOT NULL AND ABO.ID_ABONO <> '0' THEN ABO.NUMERO_CARGO ELSE NULL END) ) AS CANTIDAD_CUOTAS_PAGADAS
-- Sumar todas las cuotas pagadas
,SUM(CASE WHEN ABO.NOMBRE_GRUPO_PRODUCTO = 'VEHICULAR'AND ABO.PERIODO_VIGENCIA IS NOT NULL THEN ABO.MONTO_CARGO_CANTIDAD_USD ELSE ABO.MONTO_CARGO_CANTIDAD END) AS PRIMA_TOTAL_PAGADO
-- sumar todas las cuotas por pagar
,SUM(CASE WHEN ABO.NOMBRE_GRUPO_PRODUCTO = 'VEHICULAR' AND ABO.FECHA_REGISTRO_CAJA_P IS NULL AND ABO.ESTADO_CARGO ='ACTIVO' AND ABO.PERIODO_VIGENCIA IS NOT NULL AND P.FECHA_INICIO <= ABO.CARGO_FECHA_COBERTURA_INICIO  
          THEN ABO.MONTO_CARGO_CANTIDAD_USD
          WHEN ABO.FECHA_REGISTRO_CAJA_P IS NULL AND ABO.ESTADO_CARGO ='ACTIVO' AND P.FECHA_INICIO <= ABO.CARGO_FECHA_COBERTURA_INICIO THEN ABO.MONTO_CARGO_CANTIDAD 
     ELSE 0 END ) AS PRIMA_TOTAL_POR_PAGAR 
--Suma de Open items emitidos, pagados y cancelados del Ãºltimo periodo de vigencia sin importar estado
--,SUM(IF(ABO.PERIODO_VIGENCIA IS NOT NULL, ABO.MONTO_CARGO_CANTIDAD_USD, 0)) AS PRIMA_TOTAL_SUMARIZADO
 FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` P  
 LEFT JOIN(SELECT ABO.*,CRON.PERIODO_VIGENCIA 
           FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO` ABO
           LEFT JOIN TMP_CRONOGRAMA CRON
           ON ABO.CARGO_PERIODO_COBRANZA BETWEEN CRON.FECHA_VIGENCIA_INICIO AND CRON.FECHA_VIGENCIA_FIN
           AND ABO.NUMERO_POLIZA = CRON.NUMERO_POLIZA
           ) ABO
            ON ABO.NUMERO_POLIZA = P.NUMERO_POLIZA
           AND ABO.ID_DEVOLUCION = 0
 LEFT JOIN `iter-data-storage-pv-uat.acsele_data.PAGADO_HASTA_raw` PAG
        ON P.NUMERO_POLIZA = PAG.NUMERO_POLIZA
 --LEFT JOIN `iter-data-storage-pv-uat.salvadb_data.policy_raw`  SALV 
 --       ON P.NUMERO_POLIZA = CAST(SALV.policy_number AS STRING) 
  WHERE (ABO.NUMERO_POLIZA IS NOT NULL OR PAG.NUMERO_POLIZA IS NOT NULL)
 --      AND P.NUMERO_POLIZA = '690010628'
GROUP BY NUMERO_POLIZA
), 
TMP_RECAUDO_FALABELLA AS (
SELECT 
NUMERO_POLIZA
,MAX(FECHA_CARGO) AS FECHA_PAGADO_HASTA
FROM `iter-data-storage-pv-uat.bi_finanzas.RECAUDO_FALABELLA` 
GROUP BY NUMERO_POLIZA
),
TMP_ULTIMA_CUOTA AS
( SELECT NUMERO_POLIZA
        ,MONTO_CARGO_CANTIDAD AS MONTO_ULTIMA_CUOTA_PAGADO
  FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO`
  WHERE FECHA_APLICADO_CARGO_ABONO IS NOT NULL
  QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY CARGO_FECHA_COBERTURA_INICIO DESC))=1
),
TMP_COBRO_EXP_SERV AS 
(
  SELECT TRIM(CAST(num_poliza AS STRING)) AS NUMERO_POLIZA,
  MAX(DATE(fec_pagado_hasta,'America/Lima')) AS FECHA_PAGADO_HASTA
  FROM  `iter-data-storage-pv-uat.raw_vesta_exp_serv.POLIZA_raw`
  GROUP BY NUMERO_POLIZA
),
TMP_MORA AS 
(
SELECT MAX(MORA) AS MORA,
       NUMERO_POLIZA,
       SUM(MONTO_POR_COBRAR_USD) AS MONTO_POR_COBRAR_USD ,
       SUM(MONTO_POR_COBRAR_PEN) AS MONTO_POR_COBRAR_PEN ,
       SUM(MONTO_CANTIDAD_ABONO_USD) AS MONTO_CANTIDAD_ABONO_USD,
        SUM(MONTO_CANTIDAD_ABONO_PEN) AS MONTO_CANTIDAD_ABONO_PEN
  FROM `iter-data-storage-pv-uat.goldenrecord_data.HM_POLIZA_CARGO_VIDA` 
  WHERE TIPO_PERIODO='RECAUDACION'
  AND PERIODO=(
       SELECT MAX(PERIODO) AS PERIODO FROM `iter-data-storage-pv-uat.goldenrecord_data.HM_POLIZA_CARGO_VIDA` 
  ) GROUP BY NUMERO_POLIZA
)
SELECT
 POL.NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
   COB.FLAG_ENDOSO
  ,COB.CANTIDAD_DIFERIDOS
  ,COB.FECHA_ULTIMO_PAGO
  ,COB.TOTAL_RECAUDADO
  ,COALESCE(COB.FECHA_PAGADO_HASTA,EXPSERV.FECHA_PAGADO_HASTA,RFA.FECHA_PAGADO_HASTA) AS FECHA_PAGADO_HASTA
  ,CUO.MONTO_ULTIMA_CUOTA_PAGADO
  ,COALESCE(MOR.MORA,0) AS MORA
  ,COALESCE(MOR.MONTO_POR_COBRAR_USD,0) AS MONTO_POR_COBRAR_USD
  ,COALESCE(MOR.MONTO_POR_COBRAR_PEN,0) AS MONTO_POR_COBRAR_PEN
  ,COALESCE(MOR.MONTO_CANTIDAD_ABONO_USD,0) AS MONTO_CANTIDAD_ABONO_USD
  ,COALESCE(MOR.MONTO_CANTIDAD_ABONO_PEN,0) AS MONTO_CANTIDAD_ABONO_PEN
  ,COALESCE(COB.FECHA_INICIO_CUOTA_ULTIMO_PAGO,CAST(OPTEM.FECHA_INICIO_CUOTA_ULTIMO_PAGO AS DATE)) AS FECHA_INICIO_CUOTA_ULTIMO_PAGO
  ,COALESCE(COB.FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO,CAST(OPTEM.FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO AS DATE)) AS FECHA_VENCIMIENTO_CUOTA_ULTIMO_PAGO
  ,IF(COB.CANTIDAD_CUOTAS_IMPAGO = 0,OPTEM.CANTIDAD_CUOTAS_IMPAGO, COB.CANTIDAD_CUOTAS_IMPAGO) AS CANTIDAD_CUOTAS_IMPAGO
  ,COB.CANTIDAD_CUOTAS_PAGADAS
  ,COALESCE(COB.PRIMA_TOTAL_PAGADO,OPTEM.PRIMA_TOTAL_PAGADO) AS PRIMA_TOTAL_PAGADO
  ,OPTEM.PRIMA_TOTAL_SUMARIZADO
  ,IF(COB.PRIMA_TOTAL_POR_PAGAR = 0, OPTEM.PRIMA_TOTAL_POR_PAGAR, COB.PRIMA_TOTAL_POR_PAGAR) AS PRIMA_TOTAL_POR_PAGAR
)) AS RESUMEN_RECAUDACION
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
LEFT JOIN TMP_COBRO COB
      ON POL.NUMERO_POLIZA = COB.NUMERO_POLIZA
LEFT JOIN TMP_ULTIMA_CUOTA CUO
       ON POL.NUMERO_POLIZA = CUO.NUMERO_POLIZA
LEFT JOIN TMP_COBRO_EXP_SERV EXPSERV
       ON POL.NUMERO_POLIZA=EXPSERV.NUMERO_POLIZA
LEFT JOIN TMP_MORA MOR 
       ON POL.NUMERO_POLIZA=MOR.NUMERO_POLIZA
LEFT JOIN TMP_RECAUDO_FALABELLA RFA
       ON POL.NUMERO_POLIZA=RFA.NUMERO_POLIZA
LEFT JOIN TMP_COBRO_OPTEM OPTEM
       ON POL.NUMERO_POLIZA = OPTEM.NUMERO_POLIZA
WHERE POL.NOMBRE_GRUPO_PRODUCTO IN ('VIDA','VEHICULAR')
AND POL.ID_FUENTE IN ('01','80','10')
GROUP BY POL.NUMERO_POLIZA
;
-- =========================================================================================
--                                 TABLA FINAL : MD_ENTITY_POLIZA                         --
-- =========================================================================================
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.dm_analysis.MD_ENTITY_POLIZA`
CLUSTER BY  NOMBRE_GRUPO_PRODUCTO , ID_PRODUCTO  
AS
-- ------------------------------------------------------
-- BENEFICIARIOS
-- ------------------------------------------------------
WITH TMP_BENEFICIARIO AS (
       SELECT POL.NUMERO_POLIZA
       ,ARRAY_AGG(STRUCT(
                      NUMERO_DOCUMENTO
                     ,UPPER(NOMBRE) AS NOMBRE
                     ,UPPER(APELLIDO_MATERNO) AS APELLIDO_MATERNO
                     ,UPPER(APELLIDO_PATERNO) AS APELLIDO_PATERNO
                     ,CASE WHEN RAZON_SOCIAL IS NOT NULL  THEN RAZON_SOCIAL
                      ELSE CONCAT(NOMBRE,' ',APELLIDO_PATERNO,' ',APELLIDO_MATERNO) 
                      END AS NOMBRE_COMPLETO_BENEFICIARIO -- ACA SERIA BENEFICIARIO
                     ,PARENTESCO AS PARENTESCO_BENEFICIARIO
                     ,TIPO_BENEFICIARIO
                     ,ID_TIPO_DOCUMENTO AS TIPO_DOCUMENTO_BENEFICIARIO
                     ,ID_ROL AS ID_ROL_BENEFICIARIO
                     ,TIPO_DOCUMENTO
                     ,FECHA_NACIMIENTO
                     ,FECHA_FALLECIMIENTO
                     ,ID_ESTADO_CIVIL AS ID_ESTADO_CIVIL_BENEFICIARIO
                     ,ESTADO_CIVIL AS ESTADO_CIVIL_BENEFICIARIO
                     ,NACIONALIDAD AS NACIONALIDAD_BENEFICIARIO
                     ,DAT.CORREO_BENEFICIARIO
                     ,UPPER(DAT.CORREO_BENEFICIARIO_ULT) AS CORREO_BENEFICIARIO_ULT
                     ,DAT.CELULAR_BENEFICIARIO
                     ,DAT.CELULAR_BENEFICIARIO_ULT
                     ,DAT.DEPARTAMENTO_BENEFICIARIO
                     ,DAT.PROVINCIA_BENEFICIARIO
                     ,DAT.DISTRITO_BENEFICIARIO
                     ,DAT.DIRECCION_BENEFICIARIO
                     ,RAZON_SOCIAL
                     ,AFP AS AFP_BENEFICIARIO
                     ,PROFESION AS PROFESION_BENEFICIARIO
                     ,ID_GENERO AS ID_GENERO_BENEFICIARIO
                     ,GENERO AS GENERO_BENEFICIARIO
                     ,ID_CONDICION_FUMADOR AS ID_CONDICION_FUMADOR_BENEFICIARIO
                     ,CONDICION_FUMADOR AS CONDICION_FUMADOR_BENEFICIARIO
                     ,PORCENTAJE_DISTRIBUCION
                     ,CUSPP
                     ,CENTRO_TRABAJO AS CENTRO_TRABAJO_BENEFICIARIO
                       )) AS DATOS_BENEFICIARIOS
       FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
       INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.BENEFICIARIO` CON
       ON CON.NUMERO_POLIZA = POL.NUMERO_POLIZA
       LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BENEFICIARIO_DATOS_CONTACTOS_BENEFICIARIO` DAT 
       ON DAT.ID_PERSONA  = CON.ID_PERSONA
       WHERE POL.ID_FUENTE IN ("01","07",'03','02','05','80','10')
       GROUP BY POL.NUMERO_POLIZA
)
-- ------------------------------------------------------
-- AFILIACION COBRO
-- ------------------------------------------------------
,TMP_AFILIACION AS 
(
SELECT
 NUMERO_POLIZA,
 ARRAY_AGG(STRUCT(  VIA_COBRO_ID
,VIA_COBRO_GLOSA
,TIPO_VIA_COBRO_GLOSA
,INSTITUCION_FINANCIERA_NOMBRE
,INSTITUCION_FINANCIERA_CODIGO
,TAR_FECHA_VENCIMIENTO
,TARJETA_PASARELA
,TARJETA_VIA_COBRO_GLOSA
,TIPO_CUENTA_CODIGO
,TIPO_CUENTA_GLOSA
 )) AS AFILIACION_COBRO
 FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_AFILIACION_COBRO`
 WHERE ESTADO_AFILIACION_GLOSA='APROBADO'
 GROUP BY NUMERO_POLIZA
)
-- ------------------------------------------------------
-- ASEGURADO
-- ------------------------------------------------------
,TMP_ASEGURADO AS (
SELECT
 POL.NUMERO_POLIZA
,POL.ID_PRODUCTO
,ARRAY_AGG(STRUCT(
 UPPER(NOMBRE) AS NOMBRE
,RAZON_SOCIAL
,UPPER(APELLIDO_MATERNO) AS APELLIDO_MATERNO
,UPPER(APELLIDO_PATERNO) AS APELLIDO_PATERNO
,CASE WHEN RAZON_SOCIAL IS NOT NULL  THEN RAZON_SOCIAL
      ELSE CONCAT(NOMBRE,' ',APELLIDO_PATERNO,' ',APELLIDO_MATERNO) 
      END AS NOMBRE_COMPLETO_ASEGURADO  -- ACA SERIA ASEGURADO
,FECHA_NACIMIENTO
,FECHA_FALLECIMIENTO
,ID_TIPO_DOCUMENTO
,ID_ROL AS ID_ROL_ASEGURADO
,TIPO_DOCUMENTO
,NUMERO_DOCUMENTO 
,AFP AS AFP_ASEGURADO
,PROFESION AS PROFESION_ASEGURADO
,NACIONALIDAD AS NACIONALIDAD_ASEGURADO
,DAT.CORREO_ASEGURADO
,UPPER(DAT.CORREO_ASEGURADO_ULT) AS CORREO_ASEGURADO_ULT
,DAT.CELULAR_ASEGURADO
,DAT.CELULAR_ASEGURADO_ULT
,DAT.DEPARTAMENTO_ASEGURADO
,DAT.CODIGO_DEPARTAMENTO_ASEGURADO
,DAT.PROVINCIA_ASEGURADO
,DAT.CODIGO_PROVINCIA_ASEGURADO
,DAT.DISTRITO_ASEGURADO
,DAT.CODIGO_DISTRITO_ASEGURADO
,DAT.DIRECCION_ASEGURADO
,ID_ESTADO_CIVIL AS ID_ESTADO_CIVIL_ASEGURADO
,ESTADO_CIVIL AS ESTADO_CIVIL_ASEGURADO
,CENTRO_TRABAJO AS CENTRO_TRABAJO_ASEGURADO
,ID_CONDICION_FUMADOR AS ID_CONDICION_FUMADOR_ASEGURADO
,CONDICION_FUMADOR AS CONDICION_FUMADOR_ASEGURADO
,PARENTESCO AS PARENTESCO_ASEGURADO
,ID_GENERO AS ID_GENERO_ASEGURADO
,GENERO AS GENERO_ASEGURADO
,CUSPP
)) AS DATOS_ASEGURADO
--FROM 
--`iter-data-storage-pv-uat.goldenrecord_data.ASEGURADO`   
--GROUP BY  NUMERO_POLIZA,ID_PRODUCTO
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
 INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.ASEGURADO` CON
         ON CON.NUMERO_POLIZA = POL.NUMERO_POLIZA
  LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_ASEGURADO_DATOS_CONTACTOS_ASEGURADO` DAT 
         ON DAT.ID_PERSONA  = CON.ID_PERSONA
WHERE POL.ID_FUENTE IN ("01","07",'03','02','05','80','10')
GROUP BY 
 POL.NUMERO_POLIZA
,POL.ID_PRODUCTO
,POL.NOMBRE_PRODUCTO
,POL.NOMBRE_GRUPO_PRODUCTO
)
-- ------------------------------------------------------
-- OBJETOS ASEGURADO - [ VEHICULO ]
-- ------------------------------------------------------
, TMP_POLIZA_VEHICULO AS (
SELECT
 NUMERO_POLIZA
,ARRAY_AGG(STRUCT( 
 FECHA_EMISION_SOAT
,UBIGEO_VENTA
,NUMERO_PLACA
,COLOR_VEHICULO
,MARCA_VEHICULO
,TIPO_USO
,CLASE_VEHICULO
,MODELO_VEHICULO
,RIESGO_POR_MARCA
,ANIO_FABRICACION
,VERSION
,REQUIERE_GPS
,VALOR_COMERCIAL
,TIPO_PAGO
,ANIOS_ANTIGUEDAD
,INDICADOR_RENOVACION
,USUARIO_VENTA
,CODIGO_AGENCIA AS CODIGO_AGENCIA_SOAT
,NUMERO_MOTOR
,NUMERO_ASIENTO
,CANAL_VENTA
)) AS DATOS_VEHICULO
FROM  `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_VEHICULO` 
GROUP BY NUMERO_POLIZA
)
-- ------------------------------------------------------
-- DATOS DE RENTAS - VITALICIA,PARTICULAR
-- ------------------------------------------------------
,TMP_RENTA AS 
(
SELECT 
 NUMERO_POLIZA
,ID_PRODUCTO
,ARRAY_AGG(STRUCT(
 NOMBRE_PRODUCTO
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,FLAG_INDICADOR_MODALIDAD
,FLAG_INDICADOR_FALLECIMIENTO
,FLAG_INDICADOR_SEPELIO
,FECHA_SOLICITUD
,FECHA_DEVENGUE
,FECHA_INICIO_VIGENCIA
,FECHA_FIN_VIGENCIA
,FECHA_INICIO_PAGO
,FECHA_ENVIO_POLIZA
,FECHA_RECAUDACION
,FECHA_PRIMER_PAGO
,NUMERO_MESES_DIFERIDOS
,NUMERO_MESES_AJUSTE
,CODIGO_AGENTE
,NUMERO_MESES_TEMPORALIDAD
,NUMERO_MESES_GARANTIZADOS
,NUMERO_MESES_PRIMER_TRAMO
,VALOR_PRIMA_UNICA
,VALOR_PJE_RENTA_SEGUNDO_TRAMO
,VALOR_PJE_CONYUGE
,VALOR_PJE_AJUSTE_MONEDA
,VALOR_PJE_DEVOLUCION
,VALOR_PJE_DEVOLUCION_FALLECIMIENTO
,VALOR_RENTA_ORIGINAL
,VALOR_RENTA_BASE
,VALOR_RENTA_BASE_ANTERIOR
,VALOR_TASA_VENTA_IS
,VALOR_TASA_VENTA
,VALOR_TASA_TRA
,VALOR_DCOM
,VALOR_TOT_CIC
,VALOR_TASA_COSTO_EQUIV
,VALOR_FACTOR_ULTIMO
,VALOR_IVA
,VALOR_DEV
,VALOR_RES_PENSION
,VALOR_RES_SEPELIO
,VALOR_RES_DEVOLUCION
,VALOR_RENTA_SEG_TRAMO
,MODALIDAD
,TIPO_PAGO
,ESTADO_CAUSAL
,NUMERO_ITEM
,FECHA_INVALIDEZ
,FLAG_INVALIDEZ
,TIPO_INVALIDEZ
,COD_CIA_ORIGEN
,COD_TIPO_PENSION_INICIAL
,NUMERO_SOLICITUD
,VALOR_CAPITAL_PENSION
,IND_DERECHO_CRECER
,IND_GRATIFICACION
)) AS DATOS_RENTA
FROM `iter-data-storage-pv-uat.temp.TMP_RENTA_PARTICULAR_VITALICIA` 
GROUP BY ID_PRODUCTO,NUMERO_POLIZA
)
-- ------------------------------------------------------
-- AGENTES
-- ------------------------------------------------------
,TMP_POLIZA_AGENTE AS (
SELECT
 NUMERO_POLIZA
,ID_PRODUCTO
,ARRAY_AGG(STRUCT(     
COD_AGENTE_INICIAL
,NOMBRE_AGENTE_INICIAL
,COD_AGENTE_FINAL
,NOMBRE_AGENTE_FINAL
,CORREO_AGENTE_FINAL
,COD_AGENCIA_INICIAL
,COD_AGENCIA_FINAL
,NOMBRE_AGENCIA_FINAL
,COD_SUPERVISOR_AGENTE_FINAL
,SUPERVISOR_AGENTE_FINAL
,COD_JEFE_AGENTE_FINAL
,JEFE_AGENTE_FINAL
-----> GJ_HERE POR CONFIRMAR
,CASE WHEN TRIM(COD_AGENCIA_FINAL) IN ('1044','1048','906') 
THEN 'MDC' ELSE 'VIDA' END AS TIPO_AGENCIA_ACTUAL
)) AS DATOS_AGENTE
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_AGENTE`  
GROUP BY NUMERO_POLIZA,ID_PRODUCTO
),
-- ------------------------------------------------------
-- POLIZAS - CONTRATANTE
-- ------------------------------------------------------
TMP_POLIZA_CONTRATANTE AS (
SELECT
 POL.NUMERO_POLIZA
,POL.ID_PRODUCTO
,POL.NOMBRE_PRODUCTO
,POL.NOMBRE_GRUPO_PRODUCTO
,ARRAY_AGG(STRUCT (
 COALESCE(POL.ESTADO_IC, POL.ESTADO) AS ESTADO
,ID_ESTADO_POLIZA
,POL.ESTADO_CAUSAL
,POL.ID_ESTADO_CAUSAL
,POL.FECHA_EMISION
,POL.FECHA_VENTA
,POL.CANAL
,POL.NOMBRE_PRODUCTO
,POL.OPCION_VIDA
,POL.FECHA_INICIO --AS FECHA_VIGENCIA_INICIO
,POL.FECHA_FIN    --AS FECHA_VIGENCIA_FIN
,POL.PRIMA_NETA 
,POL.PRIMA_TOTAL
,POL.PLAN
,POL.NUMERO_PLAN
,POL.INDRENOVACIONINPUT AS INDICADOR_RENOVACION
,POL.PORCENTAJE_DEVOLUCION
,POL.ID_MONEDA
,POL.MONEDA
,POL.FECHA_HORA_VENTA
,POL.ORIGEN_VIAJE
,POL.CANTIDAD_DIAS
,POL.ID_DESTINO
,POL.DESTINO
,POL.VIAJE_PASARELA
,POL.VIAJE_MARCA_TARJETA
,POL.VIAJE_CODIGO_PROMOCIONAL
,POL.RAMO
,POL.SUBRAMO
,POL.COMODIN_DISPONIBLE
,POL.COMODIN_UTILIZADO
,POL.NOMBRE_PRODUCTO_COD_SBS
,POL.FECHA_ULTIMA_OPERACION
,POL.NOMBRE_ARCHIVO_TRAMA
,POL.ID_RAMO
,POL.ID_SUBRAMO
,POL.FECHA_BAJA_POLIZA
,POL.FECHA_CANCELACION
,POL.FECHA_TERMINADO
,POL.FECHA_PRORROGADO
,POL.FECHA_ANULADA
,POL.FECHA_RESCATADO
,POL.FECHA_SUSPENDIDA
,POL.FECHA_SALDADA
,POL.FECHA_CADUCADA
,POL.NUMERO_COTIZACION
,POL.NUMERO_SOLICITUD_COTIZACION
,POL.FECHA_ULTIMO_TRASPASO_CP
,POL.FECHA_ULTIMO_TRASPASO_CAV
,POL.TIPO_CAMBIO_HM AS TIPO_CAMBIO_MES_EMISION
,POL.PRIMA_ACCIDENTAL_PEN
,POL.VIGENCIA
,POL.MONTO_COBERTURA_PRINCIPAL
,POL.NUMERO_POLIZA_RENOVADA
,POL.BANCO_CESIONADA
,POL.CANTIDAD_PASAJERO_ADULTO
,POL.CANTIDAD_PASAJERO_NINO
,POL.FLAG_CESIONADA
,POL.FLAG_EMITIDO_ACSELE
,POL.FRECUENCIA_EMISION
,POL.ID_FUENTE
,POL.ID_GRUPO_PRODUCTO
,POL.MONTO_BASE
,POL.IGV
,POL.IGV_ANUAL 
,POL.MONTO_CESIONADA
,POL.MONTO_CUMULO
,POL.MONTO_DEVOLUCION
,POL.MONTO_ORIGINAL
,POL.NOMBRE_COBERTURA
,POL.PORCENTAJE_CESIONADA
,POL.PRIMA_BRUTA_ANUAL
,POL.PRIMA_NETA_ANUAL_PEN
,POL.PRIMA_TOTAL_ANUAL
,POL.TIPO_PENSION
,POL.TIPO_RENTA
,POL.PLACA
,POL.FLAG_INDICADOR_PRESTAMO
,POL.DIFERIDO_TOTAL_MESES
,POL.DIFERIDO_PERIODO_PAGO
,IFNULL(IFNULL(POL.DIFERIDO_CUOTAS_GANADAS,0)-IFNULL(POL.DIFERIDO_TOTAL_MESES,0),0) AS DIFERIDO_DISPONIBLES
,POL.DIFERIDO_FECHA_FIN
,POL.DIFERIDO_FECHA_INICIO
,CASE 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='ANUAL' THEN 1 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='PAGOPERIODICO' THEN 1 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='TRIMESTRAL' THEN 3 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='PRIMAPAGOUNICO' THEN 1 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='SEMESTRAL' THEN 2
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='DIECIOCHOMESES' THEN 18
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='TREINTAYSEISMESES' THEN 36 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='MENSUAL' THEN 12
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='PAGOUNICO' THEN 1 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='VEINTICUATROMESES' THEN 24 
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='CUARENTAYOCHOMESES' THEN 48
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='SESENTAMESES' THEN 60
WHEN UPPER(TRIM(POL.FRECUENCIA_PAGO))='NUEVEMESES' THEN 60
ELSE 1
 END AS FRECUENCIA_PAGO_NUMERO
 ,POL.FRECUENCIA_PAGO
 ,POL.ID_PERIODO_PAGO
 ,POL.PERIODO_PAGO
 ,POL.COMPANIA_IC
 ,POL.BASE
 ,POL.COMPANIA 
 ,POL.FLAG_COBERTURA_EG
 ,POL.FLAG_COBERTURA_FAT
 ,POL.FLAG_COBERTURA_ITP
 ,POL.FLAG_COBERTURA_IA
 ,POL.FLAG_COBERTURA_EGAC
 ,POL.FLAG_COBERTURA_FA
)) AS DATOS_POLIZA
-- DATOS DEL CONTRATANTE
,ARRAY_AGG(STRUCT(
 CON.NUMERO_DOCUMENTO
,CON.ID_TIPO_DOCUMENTO 
,CON.TIPO_DOCUMENTO 
,ID_ROL AS ID_ROL_CONTRATANTE
,UPPER(CON.NOMBRE) AS NOMBRE
,UPPER(TRIM(SPLIT(TRIM(CON.NOMBRE),' ')[SAFE_ORDINAL(1)]) ) AS PRIMER_NOMBRE
,CON.RAZON_SOCIAL
,CON.FECHA_NACIMIENTO
,CAST(DATE_DIFF(CURRENT_DATE,FECHA_NACIMIENTO,DAY)/365 AS INT64) AS EDAD_CONTRATANTE
,UPPER(CON.APELLIDO_PATERNO) AS APELLIDO_PATERNO
,UPPER(CON.APELLIDO_MATERNO) AS APELLIDO_MATERNO
,UPPER(
       CASE WHEN CON.RAZON_SOCIAL IS NOT NULL AND CON.RAZON_SOCIAL <>  ''   THEN CON.RAZON_SOCIAL
      ELSE CONCAT(COALESCE(CON.NOMBRE,''),' ',COALESCE(CON.APELLIDO_PATERNO,''),' ',COALESCE(CON.APELLIDO_MATERNO,'')) 
      END) AS NOMBRE_COMPLETO_CONTRATANTE   -- ACA SERIA CONTRATANTE
,CON.FECHA_FALLECIMIENTO
,CON.PARENTESCO
,CON.CUSPP
,DAT.CORREO_CONTRATANTE
,UPPER(DAT.CORREO_CONTRANTANTE_ULT) AS CORREO_CONTRANTANTE_ULT
,DAT.CELULAR_CONTRATANTE
,DAT.CELULAR_CONTRATANTE_ULT
,DAT.CODIGO_DEPARTAMENTO_CONTRATANTE
,DAT.DEPARTAMENTO_CONTRATANTE
,DAT.CODIGO_PROVINCIA_CONTRATANTE
,DAT.PROVINCIA_CONTRATANTE
,DAT.CODIGO_DISTRITO_CONTRATANTE
,DAT.DISTRITO_CONTRATANTE
,DAT.DIRECCION_CONTRATANTE
,CON.ID_ESTADO_CIVIL AS ID_ESTADO_CIVIL_CONTRATANTE
,CON.ESTADO_CIVIL AS ESTADO_CIVIL_CONTRATANTE
,CON.ID_GENERO AS ID_GENERO_CONTRATANTE
,CON.GENERO AS GENERO_CONTRATANTE
,CON.CENTRO_TRABAJO AS CENTRO_TRABAJO_CONTRATANTE
,CON.NACIONALIDAD AS NACIONALIDAD_CONTRATANTE
,CON.PROFESION AS PROFESION_CONTRATANTE
,CON.ID_CONDICION_FUMADOR AS ID_CONDICION_FUMADOR_CONTRATANTE
,CON.CONDICION_FUMADOR AS CONDICION_FUMADOR_CONTRATANTE
,CON.AFP AS AFP_CONTRATANTE
,CON.HASH_ID
,CON.FLAG_USUARIO_ZONAPRIVADA
)) AS DATOS_CONTRATANTE,
---
ARRAY_AGG(STRUCT(
 RFM.RECENCY
,RFM.FREQUENCY
,RFM.MONETARY_VALUE
,RFM.R
,RFM.F
,RFM.M
,RFM.SCORE_RFM
,RFM.SEGMENTO_RFM
)) AS SEGMENTACION_RFM
       FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
 INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE`  CON
         ON CON.ID_PERSONA = POL.ID_PERSONA
  LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_CONTRATANTE_DATOS_CONTACTOS_GEN` DAT 
         ON DAT.ID_PERSONA  = CON.ID_PERSONA
--- SEGMENTACION RFM
  LEFT JOIN (
         SELECT
              ID_PERSONA
              ,RECENCY
              ,FREQUENCY
              ,MONETARY_VALUE
              ,R
              ,F
              ,M
              ,SCORE_RFM
              ,SEGMENTO_RFM
              FROM `iter-data-storage-pv-uat.goldenrecord_data.PERSONA_SEGMENTACION_RFM`  A
              QUALIFY(ROW_NUMBER()OVER(PARTITION BY ID_PERSONA ORDER BY RECENCY DESC))=1
   ) RFM
   ON RFM.ID_PERSONA = CON.ID_PERSONA
WHERE POL.ID_FUENTE IN ("01","07",'03','02','05','80','10')
GROUP BY 
 POL.NUMERO_POLIZA
,POL.ID_PRODUCTO
,POL.NOMBRE_PRODUCTO
,POL.NOMBRE_GRUPO_PRODUCTO
)
,TMP_POLIZA_CUOTA_COMODIN AS (
SELECT 
NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
NUMERO_CUOTA
,TIPO_PROGRAMACION
,FECHA_APLICADA
,FECHA_PROGRAMADA
,FECHA_PROCESO
)) AS DATOS_CUOTA_COMODIN
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CUOTA_COMODIN`
GROUP BY NUMERO_POLIZA
)
,TMP_POLIZA_CONTACTO AS (
SELECT 
NUMERO_POLIZA
,ID_PRODUCTO
,ARRAY_AGG(STRUCT(
CORREO
,NOMBRE_COMPLETO_EMERGENCIA
,CELULAR
,FECHA_ACTUALIZACION
)) AS DATOS_POLIZA_CONTACTO
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CONTACTO` 
GROUP BY NUMERO_POLIZA,ID_PRODUCTO
)
,TMP_POLIZA_ACOMPANIANTE AS (       
SELECT 
NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
TIPO_DOCUMENTO
,NUMERO_DOCUMENTO
,FECHA_PARTIDA
,FECHA_RETORNO
,NOMBRES
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,FECHA_NACIMIENTO
,CORREO
,TELEFONO
,COBERTURA_SECCION
,COBERTURA_DESCRIPCION
,SUMA_ASEGURADA_VIAJE
,SUMA_ASEGURADA_VIDA
)) AS DATOS_ACOMPANIANTE 
FROM `iter-data-storage-pv-uat.temp.TMP_ACOMPANIANTE`
GROUP BY NUMERO_POLIZA
)
,TMP_CUENTA_AHORRO AS (
SELECT 
NUMERO_POLIZA	
,ARRAY_AGG(STRUCT(
CP		
,CAV		
)) AS DATOS_CUENTA_AHORRO
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CUENTA_AHORRO`  
GROUP BY NUMERO_POLIZA 
)
,TMP_POLIZA_RV AS (
SELECT 
NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
FEC_SOL_PENSION		
,VAL_PRIMA_UNICA		
,PERIODO_GARANTIZADO		
,VAL_PENSION_ORIGINAL			
,VAL_PENSION_BASE		
,FECHA_INICIO_PAGO		
,IND_INVALIDEZ		
,COD_TIPO_INVALIDEZ			
,PJE_PENSION			
,PJE_ADICIONAL			
,NUM_VIA_PAGO			
,COD_BANCO	
))     AS DATOS_POLIZA_RV
FROM  `iter-data-storage-pv-uat.temp.TMP_POLIZA_RV` 
GROUP BY NUMERO_POLIZA 
)
,TMP_POLIZA_RPP AS (
SELECT 
NUMERO_POLIZA			
,ARRAY_AGG(STRUCT(
COD_PLAN			
,IND_SEPELIO		
,PAGO_DOBLE		
,IND_INVALIDEZ		
,COD_TIPO_INVALIDEZ			
,FEC_INVALIDEZ			
,VAL_PJE_RENTA		
,VAL_PJE_ADICIONAL	
,IND_PEP		
,IND_SUJETO_OBLIGADO
)) AS 	DATOS_POLIZA_RPP	
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_RPP`
GROUP BY NUMERO_POLIZA
)
,TMP_SINIESTRO AS (
SELECT 
NUMERO_POLIZA
,ARRAY_AGG(STRUCT(
NUMERO_SINIESTRO
,LUGAR_SINIESTRO
)) AS DATOS_SINIESTRO
FROM `iter-data-storage-pv-uat.acsele_data.LUGAR_SINIESTRO_raw`
GROUP BY NUMERO_POLIZA
)
SELECT 
-- Datos del Contratante - Poliza
COP.*
-- Datos del Vehiculo
,POV.DATOS_VEHICULO
-- Datos del Agente
,POA.DATOS_AGENTE
-- Datos del ASEGURADO
,ASE.DATOS_ASEGURADO
-- DATOS DEL BENEFICIARIO
,BEN.DATOS_BENEFICIARIOS
-- AFILIACION DE COBRO
,AFI.AFILIACION_COBRO
-- Campos calculados de recaudacion.
,REC.RESUMEN_RECAUDACION
-- Datos de Rentas
,REN.DATOS_RENTA
-- DATOS CUOTA COMODIN
,CC.DATOS_CUOTA_COMODIN
-- DATOS CONTACTO 
,PLC.DATOS_POLIZA_CONTACTO
-- DATOS ACOMPAÃ‘ANTE
,ACOM.DATOS_ACOMPANIANTE
-- DATOS CUENTA AHORRO
,CH.DATOS_CUENTA_AHORRO
--DATOS POLIZA_RV
,PRV.DATOS_POLIZA_RV
--DATOS POLIZA RPP
,RPP.DATOS_POLIZA_RPP
--DATOS SINIESTRO
,PSI.DATOS_SINIESTRO

    FROM TMP_POLIZA_CONTRATANTE COP
  LEFT JOIN TMP_POLIZA_VEHICULO POV
         ON POV.NUMERO_POLIZA = COP.NUMERO_POLIZA
  LEFT JOIN TMP_POLIZA_AGENTE POA
         ON POA.NUMERO_POLIZA = COP.NUMERO_POLIZA
        AND POA.ID_PRODUCTO   = COP.ID_PRODUCTO
  LEFT JOIN TMP_ASEGURADO ASE
         ON ASE.NUMERO_POLIZA = COP.NUMERO_POLIZA
        AND ASE.ID_PRODUCTO   = COP.ID_PRODUCTO
  LEFT JOIN TMP_BENEFICIARIO BEN
         ON BEN.NUMERO_POLIZA = COP.NUMERO_POLIZA 
  LEFT JOIN TMP_AFILIACION AFI
         ON SAFE_CAST(AFI.NUMERO_POLIZA AS INT64)  = SAFE_CAST(COP.NUMERO_POLIZA AS INT64)
  LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_RESUMEN_COBRANZA` REC 
       ON REC.NUMERO_POLIZA = COP.NUMERO_POLIZA
  LEFT JOIN TMP_RENTA REN
         ON COP.NUMERO_POLIZA = REN.NUMERO_POLIZA 
        AND COP.ID_PRODUCTO   = REN.ID_PRODUCTO
  LEFT JOIN TMP_POLIZA_CUOTA_COMODIN CC
         ON CC.NUMERO_POLIZA = COP.NUMERO_POLIZA
  LEFT JOIN TMP_POLIZA_CONTACTO PLC
         ON PLC.NUMERO_POLIZA = COP.NUMERO_POLIZA 
        AND PLC.ID_PRODUCTO   = COP.ID_PRODUCTO 
  LEFT JOIN TMP_POLIZA_ACOMPANIANTE ACOM
         ON ACOM.NUMERO_POLIZA = COP.NUMERO_POLIZA 
  LEFT JOIN TMP_CUENTA_AHORRO CH
         ON CH.NUMERO_POLIZA = COP.NUMERO_POLIZA 
  LEFT JOIN TMP_POLIZA_RV PRV
         ON PRV.NUMERO_POLIZA = COP.NUMERO_POLIZA 
  LEFT JOIN TMP_POLIZA_RPP RPP
         ON RPP.NUMERO_POLIZA=COP.NUMERO_POLIZA
  LEFT JOIN TMP_SINIESTRO PSI
         ON PSI.NUMERO_POLIZA = COP.NUMERO_POLIZA
;

-- ------------------------------------------------------
-- Eliminar temporales
-- ------------------------------------------------------
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_RESUMEN_COBRANZA` ;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_CONTRATANTE_DATOS_CONTACTOS_GEN`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_ACOMPANIANTE`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_CONTRATANTE_DATOS_CONTACTOS_ASEGURADO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_CONTRATANTE_DATOS_CONTACTOS_BENEFICIARIO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_RENTA_VITALICIA` ;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_RENTA_PARTICULAR_VITALICIA` ;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_RV` ;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_RPP`;

SELECT 'OK' AS ESTADO_EJECUCION;

END;