CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.sp_goldenrecord_poliza()
OPTIONS(
  strict_mode=true)
BEGIN
/********************************************************************
* Proyecto		    : GOLDEN RECORD
* Fecha			    : 21 / 02 / 2022
* Autor			    : Tito Ramirez
*                           : Geraldidne Jayo                               
* Descripción   : Cargar las polizas de Vida, Desgravamen, Banca Seguros, SOAT, Masivos y Vehicular segun la fecha de auditoria                    
*********************************************************************
*                       MODIFICACIONES POSTERIORES                  *
*===================================================================*
*=  Fecha   | Persona |           Modificación Realizada           =*
*===================================================================*
* 15/05/2020|T.Ramirez| Agrega Polidad del Producto VIDACASH
* 19/11/2020|T.Ramirez| Se agrega los campos de los comodines para ACSELE 
*********************************************************************/

-- ----------------------------------------------------------------------
-- VARIABLES
-- ----------------------------------------------------------------------

-- ----------------------------------------------------------------------
-- Paso A00: Universo de Polizas de la ejecución anterior
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN`
AS
(
        SELECT  *
          FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
          WHERE ID_FUENTE NOT IN ('10')
);

-- ----------------------------------------------------------------------
-- FLAG DE LA TABLA POLIZA COBERTURA
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA`
AS
SELECT  
NUMERO_POLIZA
,MAX(IF(B.NOMBRE_COBERTURA='ENFERMEDADES GRAVES'                               ,TRUE,FALSE)) AS FLAG_COBERTURA_EG
,MAX(IF(B.NOMBRE_COBERTURA='FALLECIMIENTO ACCIDENTAL EN TRANSPORTE PÚBLICO'    ,TRUE,FALSE)) AS FLAG_COBERTURA_FAT
,MAX(IF(B.NOMBRE_COBERTURA='INVALIDEZ PERMANENTE TOTAL O PARCIAL POR ACCIDENTE',TRUE,FALSE)) AS FLAG_COBERTURA_ITP
,MAX(IF(B.NOMBRE_COBERTURA='INVALIDEZ ACCIDENTAL'                              ,TRUE,FALSE)) AS FLAG_COBERTURA_IA
,MAX(IF(B.NOMBRE_COBERTURA='ENFERMEDADES GRAVES E INTERVENCIONES'              ,TRUE,FALSE)) AS FLAG_COBERTURA_EGAC
,MAX(IF(B.NOMBRE_COBERTURA='FALLECIMIENTO ACCIDENTAL'                          ,TRUE,FALSE)) AS FLAG_COBERTURA_FA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_COBERTURA` B
GROUP BY  NUMERO_POLIZA;

-- ==============================================================================================================
--                                                 ACSELE
-- ==============================================================================================================

--.......................
-- ----------------------------------------------------------------------
-- DATOS DE CONTRATANTE POR ACSELE
-- ----------------------------------------------------------------------
-- ----------------------------------------------------------------------
-- Paso A10: PERSONA - NUMERO DOCUMENTOS - Una persona en acsele, puede tener varios documentos.
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POL_PERSONA_DOCUMENTOS`
AS
WITH TMP_DOCUMENT AS 
(
SELECT 
	STATIC
	,[STRUCT(PNAT.DOCUMENTOIDENTIDADINPUT  AS NUMERO_DOCUMENTO   , '01' AS TIPO_DOCUMENTO , PNAT.TIPO_PERSONA,1 AS PRIORIDAD_DOCUMENTO)
  ,STRUCT(PNAT.CARNETEXTRANJERIAINPUT     ,'02', PNAT.TIPO_PERSONA,2 AS PRIORIDAD_DOCUMENTO)
  ,STRUCT(PNAT.RUCNATURALINPUT     , '03', PNAT.TIPO_PERSONA,3 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.PASAPORTEINPUT     , '04', PNAT.TIPO_PERSONA,4 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETDIPLOMATICOINPUT     , '05', PNAT.TIPO_PERSONA,5 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETFUERZASARMADASINPUT      ,'06', PNAT.TIPO_PERSONA,6 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETIDENPOLICIAINPUT     ,'07', PNAT.TIPO_PERSONA,7 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETMINISTRABINPUT     ,'08', PNAT.TIPO_PERSONA,8 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.PARTIDANACIMIENTOINPUT     ,'09', PNAT.TIPO_PERSONA,9 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.LIBRETAMILITARINPUT     ,'10', PNAT.TIPO_PERSONA,10 AS PRIORIDAD_DOCUMENTO)] AS DOCUMENTO_PERSONA
FROM (
	SELECT DISTINCT
	STATIC
	,DOCUMENTOIDENTIDADINPUT
	,RUCNATURALINPUT
	,PASAPORTEINPUT
	,CARNETDIPLOMATICOINPUT
	,CARNETEXTRANJERIAINPUT
	,CARNETFUERZASARMADASINPUT
	,CARNETIDENPOLICIAINPUT
	,CARNETMINISTRABINPUT
	,PARTIDANACIMIENTOINPUT
	,LIBRETAMILITARINPUT
	,'NATURAL' AS TIPO_PERSONA
FROM `iter-data-storage-pv-uat.acsele_data.PERSONANATURAL_raw`
) PNAT
UNION ALL
SELECT 
 	STATIC
	,[STRUCT(PJUR.RUCINPUT  AS NUMERO_DOCUMENTO   , '03' AS TIPO_DOCUMENTO,PJUR.TIPO_PERSONA,1 AS PRIORIDAD_DOCUMENTO)] AS DOCUMENTO_PERSONA
FROM (
	SELECT DISTINCT STATIC, 
	RUCINPUT, 
	'JURIDICA' AS TIPO_PERSONA,
FROM `iter-data-storage-pv-uat.acsele_data.PERSONAJURIDICA_raw`
) PJUR
)
SELECT 
 DOC.STATIC
,ARRAY_AGG(STRUCT<NUMERO_DOCUMENTO STRING,TIPO_DOCUMENTO STRING ,TIPO_PERSONA STRING, PRIORIDAD_DOCUMENTO INT64 ,HASH_ID STRING,TIPO_DOCUMENTO_GLOSA STRING>
    (PER.NUMERO_DOCUMENTO,
    PER.TIPO_DOCUMENTO,
    PER.TIPO_PERSONA, 
    PER.PRIORIDAD_DOCUMENTO,
    upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(PER.NUMERO_DOCUMENTO,15,'0'))))),
	EG1.NOMBRE_GLOBAL
    )) AS DOCUMENTOS
FROM TMP_DOCUMENT DOC
,UNNEST(DOCUMENTO_PERSONA) PER
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
       ON EG1.VALOR_ORIGEN = PER.TIPO_DOCUMENTO 
      AND EG1.ID_FUENTE    ='01' 
	  AND EG1.CODIGO_TIPO ='TIPODOC'
WHERE PER.NUMERO_DOCUMENTO IS NOT NULL
GROUP BY DOC.STATIC
;

-- ----------------------------------------------------------------------
-- Paso A15: DATOS PERSONALES Y DOCUMENTO
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POL_PERSONA_ACSELE`
AS
SELECT
    DOC.STATIC
  , DOC.DOCUMENTOS[ORDINAL(1)].NUMERO_DOCUMENTO
  , DOC.DOCUMENTOS[ORDINAL(1)].TIPO_DOCUMENTO AS ID_TIPO_DOCUMENTO
--, DOC.DOCUMENTOS[ORDINAL(1)].HASH_ID
FROM `iter-data-storage-pv-uat.temp.TMP_POL_PERSONA_DOCUMENTOS` DOC
;

-- ----------------------------------------------------------------------
-- Paso A15: DATOS PERSONALES Y DOCUMENTO
-- ----------------------------------------------------------------------

CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_CONTRATANTE_PRODUCTIVA`
AS
SELECT DISTINCT
'01' AS ID_FUENTE
, POL.NUMERO_POLIZA
, POL.ID_PRODUCTO
, CONCAT(POL.ID_ROL, '-', ASE.ID_TIPO_DOCUMENTO, '-', ASE.NUMERO_DOCUMENTO)  AS ID_PERSONA
--,ASE.HASH_ID
--PARTYID
FROM (
    SELECT  
		NUMERO_POLIZA
		,CAST (ID_PRODUCTO AS STRING) AS ID_PRODUCTO
		,THIRDPARTYID
		,'01' AS ID_ROL
	  FROM `iter-data-storage-pv-uat.acsele_data.TD_POLIZA_CONTRATANTE_raw`
	  WHERE STATUS_OPERATION='Applied operation'
	  QUALIFY (RANK()OVER(PARTITION BY NUMERO_POLIZA ORDER BY OPERATION_DATETIME DESC , NUMERO_OPERACION DESC))=1
)POL 
INNER JOIN  `iter-data-storage-pv-uat.temp.TMP_POL_PERSONA_ACSELE` ASE
	ON CAST( POL.THIRDPARTYID AS INT64)= CAST(ASE.STATIC AS INT64)
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
	ON CAST(AP.ID_PRODUCTO AS INT64) = CAST(POL.ID_PRODUCTO AS INT64) 
	AND AP.ID_FUENTE = '01'

UNION ALL 

-------------------------------------------------------------------------------------------
-- GARANTIA EXTENDIDA 
-------------------------------------------------------------------------------------------
SELECT 
'01' AS ID_FUENTE
, POL.NUMERO_POLIZA
, POL.ID_PRODUCTO
, CONCAT(POL.ID_ROL, '-', ASE.ID_TIPO_DOCUMENTO, '-', ASE.NUMERO_DOCUMENTO)  AS ID_PERSONA
--,ASE.HASH_ID
--PARTYID
FROM (
		SELECT  
			P.NUMERO_POLIZA
			,CAST (P.ID_PRODUCTO AS STRING) AS ID_PRODUCTO
			,IFNULL(TRIM(P.NUMERODOCUMENTOGEINPUT),' ') AS NUMERO_DOCUMENTO
			,REPLACE(REPLACE(UPPER(P.TIPODOCUMENTOGEINPUT),'DOCUMENTOIDENTIDAD','01'),'CARNETDIPLOMATICO','05') AS TIPO_DOCUMENTO
			,'01' AS ID_ROL
		FROM `iter-data-storage-pv-uat.acsele_data.TD_POLIZA_CONTRATANTE_GE_raw`  P
		WHERE P.STATUS_OPERATION='Applied operation'
	  	QUALIFY (RANK()OVER(PARTITION BY P.NUMERO_POLIZA ORDER BY P.OPERATION_DATETIME DESC , P.NUMERO_OPERACION DESC))=1 
	)POL 
INNER JOIN  `iter-data-storage-pv-uat.temp.TMP_POL_PERSONA_ACSELE` ASE
--POLGARANTIA EXTENDIDA PRESENTA UN TIPO_DOCUMENTO DIFERENTE QUE EL DE PERSONA_NATURAL
        ON  POL.NUMERO_DOCUMENTO= ASE.NUMERO_DOCUMENTO
		AND POL.TIPO_DOCUMENTO = ASE.ID_TIPO_DOCUMENTO
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
        ON CAST(AP.ID_PRODUCTO AS INT64) = CAST(POL.ID_PRODUCTO AS INT64) 
AND AP.ID_FUENTE  = '01' 
AND AP.ID_PRODUCTO='39480'; 


--.......................

-- ----------------------------------------------------------------------
-- Paso 13 : 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_VEHICULAR_PLAN`
AS
(
SELECT 
     NUMERO_POLIZA
    ,PLAN_VEHICULAR
    ,PLAN_VEHICULAR_DESC
FROM (
SELECT CAST(po.policy_number AS STRING) AS NUMERO_POLIZA,
       pl.name AS PLAN_VEHICULAR,
    (CASE WHEN PL.NAME  = 'PLAN 3' THEN 'BLACK'				
	        WHEN PL.NAME  = 'PLAN 4' THEN 'PLATA'			
	        WHEN PL.NAME  = 'PLAN 6'  THEN 'ORO'			
	        WHEN PL.NAME  = 'PLAN 10' THEN 'BLACK CON ENDOSO'						
         ELSE 'OTROS' 
     END) AS PLAN_VEHICULAR_DESC
,ROW_NUMBER()OVER(PARTITION BY po.policy_number ORDER BY po.last_modified_date DESC ) AS CORRELATIVO
      FROM `iter-data-storage-pv-uat.salvadb_data.policy_raw` po 
INNER JOIN `iter-data-storage-pv-uat.salvadb_data.PLAN_raw` pl 
        ON po.plan_id=pl.id
     WHERE po.policy_number IS NOT NULL
)TAB
WHERE CORRELATIVO = 1
);

-- ----------------------------------------------------------------------
-- Paso A11 : Flag emitido Acsele-e y PLAN 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_FLAG_EMITIDO`
AS
(    SELECT  LPAD(AD.CODIGOPOLIZA,10,'0') AS NUMERO_POLIZA 
			      ,MAX(CASE WHEN AD.EMITIDO = 1 THEN True ELSE False END) AS FLAG_EMITIDO_ACSELE
			      ,CASE WHEN IDPRIMA = 1.0 OR IDPRIMA IS NULL THEN 'BASICO' 
                  WHEN IDPRIMA = 2.0 THEN 'VIAL' 
                  WHEN IDPRIMA= 3.0 THEN 'PLUS'-- Nuevo Ajuste
                  ELSE ''
            END AS PLAN_SOAT,
      FROM `iter-data-storage-pv-uat.soat_data.ma_poliza_raw` AD
INNER JOIN `iter-data-storage-pv-uat.soat_data.ma_venta_raw` G 
        ON AD.id_poliza=g.id_poliza
     WHERE AD.CODIGOPOLIZA <> '' 
       AND G.ESTADO = 2 
       AND G.IDCANAL IN (3,4,6,9)
     GROUP BY AD.CODIGOPOLIZA,IDPRIMA
);

-- ----------------------------------------------------------------------
-- Paso A11 : Obtener las Primas Netas y Total de las Polizas
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ACSELE`
AS 
SELECT
 TAB.NUMERO_POLIZA 
,COALESCE(CAR.PRIMA_NETA,TAB.PRIMA_NETA)  AS PRIMA_NETA
,COALESCE(CAR.PRIMA_NETA,TAB.PRIMA_TOTAL) AS PRIMA_TOTAL
,TAB.PRIMA_TOTAL_ANUAL
,TAB.PRIMA_BRUTA_ANUAL
,TAB.IGV_ANUAL
,TAB.IGV
FROM ( 
SELECT
 NUMERO_POLIZA
 ,PRIMA_NETA
 ,PRIMA_TOTAL
 ,PRIMA_TOTAL_ANUAL
 ,PRIMA_BRUTA_ANUAL
 ,IGV_ANUAL
 ,IGV
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_OPERACION`
   QUALIFY (MAX(CASE WHEN PRIMA_NETA>0 AND PRIMA_TOTAL>0  AND ESTADO_OPERACION ="Applied operation" THEN FECHA_HORA_OPERACION  ELSE NULL END)OVER(PARTITION BY NUMERO_POLIZA)) = FECHA_HORA_OPERACION
)TAB
LEFT JOIN (
     SELECT 
      CAR.NUMERO_POLIZA,
      CAR.MONTO_CARGO_CANTIDAD AS PRIMA_NETA
      FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO` CAR
      WHERE CAR.ESTADO_CARGO='ACTIVO'
      AND CAR.CONCEPTO_CARGO IN (100 , 101 )
      QUALIFY(ROW_NUMBER()OVER( PARTITION BY  CAR.NUMERO_POLIZA  ORDER BY COALESCE(CAR.CARGO_PERIODO_COBRANZA) DESC )) = 1
)CAR 
ON CAR.NUMERO_POLIZA = TAB.NUMERO_POLIZA
;

-- ----------------------------------------------------------------------
-- Paso -1 : POLIZA CESIONADA
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_CESIONADA`
AS
  SELECT
  NUMERO_POLIZA,
  ID_PRODUCTO,
  CAST(PORCENTAJECESIONINPUT AS STRING) 	AS PORCENTAJE_CESIONADA,
  MONTOCESIONINPUT			                AS MONTO_CESIONADA,
  POLIZACESIONADAVEINPUT 	                AS FLAG_CESIONADA,
  NOMBREBENEFICIARIOINPUT                   AS BANCO_CESIONADA,
  RUCBENEFICIARIOINPUT AS CESION_RUC
  FROM `iter-data-storage-pv-uat.acsele_data.TD_OPERACION_BENEFICIARIO_raw`
  WHERE STATUS_OPERATION IN ("Applied operation")
  QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY TIMESTAMP(OPERATION_DATETIME) DESC ))=1
;
-- ----------------------------------------------------------------------
-- Paso 0 : USO COMODIN DE LAS POLIZAS
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMODIN`
AS
(
WITH TMP_POLIZA_COMODIN_UNV
AS(
  SELECT 
   CAST(APO_ID AS STRING) AS ID_POLIZA
  ,SUM(CASE WHEN ESTADO_COMODIN ='DISP' THEN CANTIDAD ELSE 0 END)  AS COMODIN_DISPONIBLE
  ,SUM(CASE WHEN ESTADO_COMODIN ='UTL'  THEN CANTIDAD ELSE 0 END)  AS COMODIN_UTILIZADO
  FROM 
  (
    SELECT
     COUNT(WQUO_ID) AS CANTIDAD
    ,ESTADO_COMODIN
    ,APO_ID
    FROM
    (
    SELECT
     APO_ID
    ,WQUO_ID
    ,(CASE WHEN wquo_status=0  THEN 'DISP'
           WHEN wquo_status=1  THEN 'DISP'
           WHEN wquo_status=2  THEN 'UTL'
      END) AS ESTADO_COMODIN
    FROM `iter-data-storage-pv-uat.acsele_data.STPO_WILDCARDQUOTA_raw`
    )
    GROUP BY ESTADO_COMODIN,APO_ID
  )
  GROUP BY APO_ID
 )
SELECT DISTINCT 
   POL.NUMEROPOLIZAINPUT           AS NUMERO_POLIZA
  ,COALESCE(COM.COMODIN_DISPONIBLE,0) AS COMODIN_DISPONIBLE
  ,COALESCE(COM.COMODIN_UTILIZADO,0)  AS COMODIN_UTILIZADO
        FROM `iter-data-storage-pv-uat.acsele_data.PREPOLICY_raw` POL
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.POLICYDCO_raw` PD 
          ON CAST(PD.DCOID AS STRING) = POL.PK
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.CONTEXTOPERATION_raw` CTX 
          ON CTX.ID                   = PD.OPERATIONPK
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.AGREGATEDPOLICY_raw` AGP 
          ON AGP.AGREGATEDPOLICYID    = PD.AGREGATEDOBJECTID 
         AND AGP.OPERATIONPK          = PD.OPERATIONPK
  INNER JOIN TMP_POLIZA_COMODIN_UNV COM
          ON COM.ID_POLIZA            = POL.STATIC
       WHERE POL.NUMEROPOLIZAINPUT IS NOT NULL
);

-- ----------------------------------------------------------------------
-- Paso A11 : Fecha de estados de la Poliza
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO`
AS
WITH TMP_POLIZA_PLAN AS 
(
 SELECT
 CAST(VID.NUMERO_POLIZA AS STRING) AS NUMERO_POLIZA
--,UPPER(VID.PLANVIDAINPUT) AS PLAN_POLIZA
,COALESCE(UPPER(VID.PLANVIDAINPUT),UPPER(PLANMASIVOSINPUT)) AS PLAN_POLIZA
,VID.PLANVIDAVALUE AS NUMERO_PLAN
,COALESCE(UPPER(VID.OPCIONVIDAINPUT),UPPER(PLANCOMERCIALVIDAINPUT)) AS OPCION_VIDA
,TRIM(UPPER(VID.INDPRESTAMOINPUT)) AS FLAG_INDICADOR_PRESTAMO
--AGREGADO DATOS DE LA POLIZA
-------------------------------------
,VID.COMUNICACIONPOLIZAINPUT AS  MEDIO_COMUNICACION
,NUMPROPORIGINALINPUT AS NUMERO_PROPUESTA_ANTERIOR
,SAFE_CAST(FECHAPROPINPUT AS DATE) AS FECHA_TRANSMISION
,SAFE_CAST(FECHARECEPCIONGDCINPUT AS DATE) AS FECHA_RECEPCION_GDC
-------------------------------------
-- DIFERIDOS
,SAFE_CAST(REPLACE(VID.MESESDIFERIDOSTOTALINPUT,'.0',"") AS INT64) AS DIFERIDO_TOTAL_MESES
,COALESCE(CANTIDAD_DIFERIDOS_SAMP,SAFE_CAST(REPLACE(VID.PERIODOPAGODIFERIDOSINPUT,'.0',"") AS INT64)) AS DIFERIDO_PERIODO_PAGO
,SAFE.PARSE_DATE("%Y-%m-%d",VID.FECHAFINDIFERIMIENTOINPUT) AS DIFERIDO_FECHA_FIN
,SAFE.PARSE_DATE("%Y-%m-%d",VID.FECHAINIDIFERIMIENTOINPUT) AS DIFERIDO_FECHA_INICIO
--- TOTAL DE DIFERIDOS GANADOS
,PAG.FECHA_PAGADO_HASTA
 FROM `iter-data-storage-pv-uat.acsele_data.TD_OPERACION_VIDA_AGENTE_raw` VID
 LEFT JOIN (
        SELECT COUNT(DISTINCT NUMERO_CARGO) AS CANTIDAD_DIFERIDOS_SAMP 
        ,NUMERO_POLIZA
        FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_CARGO_ABONO`
        WHERE ESTADO_CARGO='DIFERIDO'
        AND NUMERO_POLIZA IS NOT NULL
        GROUP BY NUMERO_POLIZA
 )DII 
 ON DII.NUMERO_POLIZA = VID.NUMERO_POLIZA 
 LEFT JOIN (
        SELECT NUMERO_POLIZA 
        ,FECHA_PAGADO_HASTA
        FROM `iter-data-storage-pv-uat.acsele_data.PAGADO_HASTA_raw` 
        QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY FECHA_PAGADO_HASTA DESC )) =1
 )PAG
 ON PAG.NUMERO_POLIZA = VID.NUMERO_POLIZA 
 WHERE VID.STATUS_OPERATION IN ("Applied operation")
 QUALIFY(ROW_NUMBER()OVER(PARTITION BY VID.NUMERO_POLIZA ORDER BY TIMESTAMP(VID.OPERATION_DATETIME) DESC ))=1

)
,TMP_POLIZA_TRASPASO AS
(
SELECT NUMERO_POLIZA 
, MAX(CASE WHEN ID_TIPO_TRASPASO =45053 THEN  FECHA_INICIO_OPENITEM END) AS FECHA_ULTIMO_TRASPASO_CP
, MAX(CASE WHEN ID_TIPO_TRASPASO =45052 THEN  FECHA_INICIO_OPENITEM END) AS FECHA_ULTIMO_TRASPASO_CAV
  FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_TRASPASO`
 --WHERE FORMAT_DATE("%Y%m",FECHA_INICIO_OPENITEM)='202205' 
 GROUP BY NUMERO_POLIZA
)
,TMP_POLIZA_PLAN_VEHICULAR AS 
(
 SELECT
 CAST(NUMERO_POLIZA AS STRING) AS NUMERO_POLIZA
,UPPER(PLAN_VEHICULAR ) AS PLAN_VEHICULAR
,TRIM(UPPER(NOMBRE_ENDOSATARIO)) AS NOMBRE_ENDOSATARIO
,TRIM(POLIZA_CESIONADA) AS POLIZA_CESIONADA
,NUMERO_POLIZA_RENOVACION AS NUMERO_POLIZA_RENOVADA
 FROM `iter-data-storage-pv-uat.acsele_data.TD_OPERACION_VEHICULAR_raw` 
 WHERE STATUS_OPERATION IN ("Applied operation")
 QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY AUDITDATE_SYSTEM_DATE DESC ))=1
)
,TMP_VIDACASH_FECHA_VENTA AS (
SELECT 
NUMERO_POLIZA
,CAST(SAFE.DATE(SAFE.DATETIME(FECHA_VENTA,'America/Lima')) AS STRING) AS FECHA_VENTA
,SAFE.DATETIME(FECHA_VENTA,'America/Lima') AS FECHA_HORA_VENTA
 FROM (SELECT * FROM `iter-data-storage-pv-uat.vidacash_data.POLIZA_raw` WHERE TRIM(CHANNEL) <> 'RUMBO') POL
INNER JOIN `iter-data-storage-pv-uat.vidacash_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
     WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>''
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TRIM(COALESCE(POL.NUMERO_POLIZA,'')) ORDER BY POL.FECHA_CREA  DESC))=1
)
,TMP_PORCENTAJE_DEVOLUCION AS (
SELECT 
        NUMERO_POLIZA
        ,PORCENTAJE_DEVOLUCION
        ,PERIODO_PAGO
        ,MONTO_DEVOLUCION
        ,CANAL
        ,OPCION_VIDA
FROM (
-------------------
-- VIDACASH
-------------------
SELECT 
   CAST(POL.NUMERO_POLIZA    AS STRING)           AS NUMERO_POLIZA
  ,CAST(DET.PORCENTAJE_DEVOLUCION as FLOAT64)/100 AS PORCENTAJE_DEVOLUCION
   ,PERIODO_PAGO AS PERIODO_PAGO
  ,POL.MONTO_DEVOLUCION_TOTAL AS MONTO_DEVOLUCION
  --,IF(channel_sell_is='FFVV','INTERNET',channel_sell_is) AS CANAL
  ,CASE WHEN pol.channel='FALABELLA'         THEN 'FALABELLA'
     WHEN pol.channel='FINANCIERAOH'         THEN 'FINANCIERAOH'
     WHEN pol.channel='IBK'                  THEN 'IBK'
     WHEN pol.channel='IBK_SELECT'           THEN 'IBK'
     WHEN pol.channel='ENDOSOS_IBK'          THEN 'IBK'
     WHEN pol.channel='PROMOCION_IBK'        THEN 'IBK'
     WHEN pol.channel='RUMBO'                THEN 'RUMBO'
     WHEN pol.channel='TELEMARKETING'        THEN 'TELEMARKETING'
     WHEN pol.channel='IS'                   THEN 'WEB'
     WHEN pol.channel='WEB'                  THEN 'WEB'
     WHEN pol.channel='ENDOSO'               THEN 'WEB'
     WHEN pol.channel='ENDOSOS'              THEN 'WEB'
     WHEN pol.channel='AHORRO_SEGURO'        THEN 'WEB'
     WHEN pol.channel='PROMOCION_WEB'        THEN 'WEB'
     WHEN pol.channel='PROTECCION_TOTAL'     THEN 'WEB'
     WHEN pol.channel='AHORRO_JUBILACION'    THEN 'WEB'
     WHEN pol.channel='PROTECCION_SEGURA'    THEN 'WEB'
     WHEN pol.channel='SEGURO_UNIVERSITARIO' THEN 'WEB'
     WHEN pol.channel IS NULL THEN 'WEB'
     ELSE 'WEB' END AS CANAL     
  ,POL.channel AS OPCION_VIDA

      FROM (SELECT * FROM `iter-data-storage-pv-uat.vidacash_data.POLIZA_raw` WHERE TRIM(CHANNEL) <> 'RUMBO') POL
INNER JOIN `iter-data-storage-pv-uat.vidacash_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
     WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>''
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TRIM(COALESCE(POL.NUMERO_POLIZA,'')) ORDER BY POL.FECHA_CREA  DESC))=1
-------------------
-- RUMBO
-------------------
UNION ALL
  SELECT 
   CAST(POL.NUMERO_POLIZA    AS STRING)            AS NUMERO_POLIZA
  ,CAST(DET.PORCENTAJE_DEVOLUCION as FLOAT64)/100 AS PORCENTAJE_DEVOLUCION
   ,PERIODO_PAGO AS PERIODO_PAGO
  ,POL.MONTO_DEVOLUCION_TOTAL AS MONTO_DEVOLUCION
  --,IF(channel_sell_is='FFVV','INTERNET',channel_sell_is) AS CANAL
  ,CHANNEL AS CANAL     
  ,POL.channel AS OPCION_VIDA
      FROM (SELECT * FROM `iter-data-storage-pv-uat.rumbo_data.POLIZA_raw` WHERE TRIM(CHANNEL)='RUMBO')POL
INNER JOIN `iter-data-storage-pv-uat.rumbo_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
     WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>''
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TRIM(COALESCE(POL.NUMERO_POLIZA,'')) ORDER BY POL.FECHA_CREA  DESC))=1
-------------------
-- ACSEL-E
-------------------
UNION ALL
 SELECT
  NUMERO_POLIZA
 ,CASE
    WHEN CAST(PORCENTAJE_DEVOLUCION_PRIMA AS FLOAT64) >= 20 THEN CAST(PORCENTAJE_DEVOLUCION_PRIMA AS FLOAT64) / 100
    ELSE CAST(PORCENTAJE_DEVOLUCION_PRIMA AS FLOAT64)
  END AS PORCENTAJE_DEVOLUCION
  ,CAST(PERIODOPAGOPRIMAINPUT AS INT64) AS PERIODO_PAGO
 , 0 AS MONTO_DEVOLUCION
 , CAST(NULL AS STRING ) AS CANAL 
 , CAST(NULL AS STRING ) AS OPCION_VIDA
FROM `iter-data-storage-pv-uat.acsele_data.TD_OPERACION_UNIDAD_RIESGO_raw` 
WHERE STATUS_OPERATION='Applied operation'
QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY AUDITDATE_SYSTEM_DATE DESC ))= 1
)
QUALIFY(ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY NUMERO_POLIZA DESC ))= 1
)
SELECT 
TMP.ID_FUENTE
,TAB.NUMERO_POLIZA
,TAB.FECHA_EMISION
,TAB.ID_PRODUCTO
,TAB.NOMBRE_PRODUCTO
,TAB.ID_GRUPO_PRODUCTO
,TAB.NOMBRE_GRUPO_PRODUCTO
,EG1.CODIGO_GLOBAL AS ID_MONEDA
,TAB.MONEDA
,PRI.PRIMA_NETA
,PRI.PRIMA_TOTAL
,PRI.IGV 
,PRI.IGV_ANUAL
,PRI.PRIMA_TOTAL_ANUAL
,PRI.PRIMA_BRUTA_ANUAL
,TAB.VIGENCIA
,COALESCE(DEV.CANAL,TAB.CANAL) AS CANAL
,TAB.FECHA_INICIO 
,TAB.FECHA_FIN
,TAB.FRECUENCIA_PAGO
,CASE WHEN TAB.ESTADO IN ('VENDIDO', 'VIGENTE') AND TAB.FECHA_FIN < CURRENT_DATE('America/Lima') AND TAB.ID_GRUPO_PRODUCTO IN ('04', '09') THEN 'TERMINADO'
	  ELSE TAB.ESTADO
	  END AS ESTADO
,TMP.ID_PERSONA
,VEHI.NUMERO_PLACA AS PLACA
,COALESCE(VHP.PLAN_VEHICULAR_DESC,PLL.PLAN_VEHICULAR,PLA.PLAN_POLIZA,EMI.PLAN_SOAT) AS PLAN
,PLA.NUMERO_PLAN
,COALESCE(PLA.OPCION_VIDA,DEV.OPCION_VIDA) AS OPCION_VIDA
,PLA.FLAG_INDICADOR_PRESTAMO
,PLA.DIFERIDO_TOTAL_MESES
,PLA.DIFERIDO_PERIODO_PAGO
,PLA.DIFERIDO_FECHA_FIN
,PLA.DIFERIDO_FECHA_INICIO
,PLA.FECHA_PAGADO_HASTA
,CAST(COALESCE(VEHI.FECHA_VENTA,TVFV.FECHA_VENTA) AS DATE) AS FECHA_VENTA
,TVFV.FECHA_HORA_VENTA
,VEHI.INDICADOR_RENOVACION
,TAB.FECHA_CADUCADA
,TAB.FECHA_PRORROGADO
,TAB.FECHA_ANULADA
,TAB.FECHA_RESCATADO
,TAB.FECHA_SUSPENDIDA
,TAB.FECHA_SALDADA
--,TAB.FECHA_TERMINADO
,CASE WHEN TAB.ESTADO IN ('VENDIDO', 'VIGENTE') AND TAB.FECHA_FIN < CURRENT_DATE('America/Lima') AND TAB.ID_GRUPO_PRODUCTO IN ('04') 
      THEN DATE_ADD(TAB.FECHA_EMISION, INTERVAL 1  YEAR)
  END AS FECHA_TERMINADO
,TAB.FECHA_CANCELACION
-- ---------------------------------
,COM.COMODIN_DISPONIBLE
,COM.COMODIN_UTILIZADO
-- ---------------------------------
,CES.PORCENTAJE_CESIONADA
,CES.MONTO_CESIONADA
,CES.CESION_RUC
,COALESCE(CES.FLAG_CESIONADA,PLL.POLIZA_CESIONADA,'No') AS FLAG_CESIONADA 
,COALESCE(CES.BANCO_CESIONADA,PLL.NOMBRE_ENDOSATARIO) AS BANCO_CESIONADA
---
,EMI.FLAG_EMITIDO_ACSELE
,TAB.FRECUENCIA_EMISION
,TAB.RAMO
,TAB.SUB_RAMO
,TAB.NOMBRE_PRODUCTO_COD_SBS
,DATE(TAB.FECHA_HORA_OPERACION) AS FECHA_ULTIMA_OPERACION
,TAB.ID_RAMO
,TAB.ID_SUBRAMO
,TAB.NOMBRE_ARCHIVO_TRAMA
,COALESCE(TAB.FECHA_CANCELACION
      ,TAB.FECHA_TERMINADO
      ,TAB.FECHA_PRORROGADO
      ,TAB.FECHA_ANULADA
      ,TAB.FECHA_RESCATADO
      ,TAB.FECHA_SUSPENDIDA
      ,TAB.FECHA_SALDADA
      ,TAB.FECHA_CADUCADA) AS FECHA_BAJA_POLIZA
,DEV.PORCENTAJE_DEVOLUCION
,DEV.PERIODO_PAGO
,DEV.MONTO_DEVOLUCION
,TRR.FECHA_ULTIMO_TRASPASO_CP
,TRR.FECHA_ULTIMO_TRASPASO_CAV
,CAM.MONTO_TIPO_CAMBIO AS TIPO_CAMBIO_HM
,PLL.NUMERO_POLIZA_RENOVADA
,TAB.NUMERO_OPERACION
,TAB.NUMERO_PROPUESTA
--AGREGADO MIR
-------------------------------
,PLA.MEDIO_COMUNICACION
,PLA.NUMERO_PROPUESTA_ANTERIOR
,PLA.FECHA_TRANSMISION
,PLA.FECHA_RECEPCION_GDC
-------------------------------
FROM 
(
SELECT 
OPE.NUMERO_POLIZA,
CNF.ID_PRODUCTO,
UPPER(CNF.NOMBRE_PRODUCTO) AS NOMBRE_PRODUCTO,
CNF.ID_FUENTE,
CNF.ID_GRUPO_PRODUCTO,
UPPER(CNF.NOMBRE_GRUPO_PRODUCTO) AS NOMBRE_GRUPO_PRODUCTO,
OPE.FECHA_EMISION,
OPE.MONEDA,
OPE.VIGENCIA,
--OPE.CANAL_VENTA AS CANAL, --> HOMOLOGAR --> VIDACASH Y VIDACASHSTOCK

CASE WHEN OPE.CANAL_VENTA='FFVV' AND CNF.NOMBRE_PRODUCTO='VIDACASH' THEN 'WEB'
     WHEN OPE.CANAL_VENTA='FFVV' AND CNF.NOMBRE_PRODUCTO='VIDACASHSTOCK' THEN 'WEB'
     ELSE OPE.CANAL_VENTA END AS CANAL,

OPE.FECHA_VIGENCIA_INICIO AS FECHA_INICIO,
OPE.FECHA_VIGENCIA_FIN AS FECHA_FIN,
OPE.FRECUENCIA_POLIZA AS FRECUENCIA_PAGO,
REPLACE(REPLACE(OPE.ESTADO_POLIZA,'CANCELADO','CANCELADA'),'TERMINADO','TERMINADA') AS ESTADO,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('TERMINADO','TERMINAR','TERMINADA')  THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA) END )OVER(PARTITION BY OPE.NUMERO_POLIZA) FECHA_TERMINADO,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('SALDADA','SALDAR')     THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA) END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_SALDADA,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('SUSPENDIDA','SUSPENDER')  THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA)  END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_SUSPENDIDA,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('CANCELADO','CANCELADA','CANCELAR')   THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA) END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_CANCELACION,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('RESCATADA','RESCATAR')   THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA)  END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_RESCATADO,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('ANULADA','ANULAR')     THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA)  END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_ANULADA,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA)  IN ('PRORROGADO','PRORROGAR')  THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA)  END)OVER(PARTITION BY OPE.NUMERO_POLIZA) AS  FECHA_PRORROGADO,
MIN(CASE WHEN UPPER(OPE.ESTADO_POLIZA) IN ('CADUCADA','CADUCAR','CADUCADO')  THEN DATE(OPE.FECHA_OPERACION_REG_SISTEMA)    END)OVER(PARTITION BY OPE.NUMERO_POLIZA)  AS  FECHA_CADUCADA,
OPE.FECHA_HORA_OPERACION,
OPE.FECHA_OPERACION_REG_SISTEMA,
OPE.ESTADO_POLIZA,
MAX(CASE WHEN DESCRIPCION_EVENTO IN ('EMITIRRAPIDA','EMITIR','EMITIRAUTOMATICO') THEN OPE.FRECUENCIA_POLIZA ELSE NULL END)OVER(PARTITION BY OPE.NUMERO_POLIZA ) AS FRECUENCIA_EMISION,
CNF.RAMO,
CNF.SUB_RAMO,
CNF.NOMBRE_PRODUCTO_COD_SBS,
CNF.ID_RAMO,
CNF.ID_SUBRAMO,
OPE.NOMBRE_ARCHIVO_TRAMA,
OPE.NUMERO_OPERACION,
OPE.NUMERO_PROPUESTA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_OPERACION` OPE
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO_RAMO` CNF
          ON OPE.ID_PRODUCTO = CNF.ID_PRODUCTO
         AND CNF.ID_FUENTE    = '01'
---INNER JOIN `iter-data-storage-pv-uat.acsele_data.AGREGATEDPOLICY_raw` A ON OPE.NUMERO_OPERACION=A.OPERATIONPK

WHERE OPE.ESTADO_OPERACION='Applied operation'
AND  OPE.NUMERO_POLIZA NOT IN (SELECT NUMERO_POLIZA  FROM `iter-data-storage-pv-uat.inputfiles.POLIZA_VIDACASH_ERROR`) --> QUITAR POLIZAS CON ERROR DE VIDACASH
)TAB
INNER JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_CONTRATANTE_PRODUCTIVA` TMP 
--INNER JOIN `iter-data-storage-pv-uat.temp.con_acsele_temp` TMP 
          ON TAB.NUMERO_POLIZA   = TMP.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
          ON EG1.NOMBRE_GLOBAL        = TAB.MONEDA 
         AND EG1.ID_FUENTE           = '01' 
         AND EG1.CODIGO_TIPO         = 'MONEDA'
LEFT JOIN TMP_POLIZA_PLAN PLA  
         ON TAB.NUMERO_POLIZA = PLA.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ACSELE` PRI 
         ON PRI.NUMERO_POLIZA = TAB.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_VEHICULO` VEHI 
          ON VEHI.NUMERO_POLIZA  = TAB.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMODIN` COM 
        ON COM.NUMERO_POLIZA = TAB.NUMERO_POLIZA
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_CESIONADA` CES 
        ON CES.NUMERO_POLIZA = TAB.NUMERO_POLIZA
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_FLAG_EMITIDO` EMI 
        ON EMI.NUMERO_POLIZA = TAB.NUMERO_POLIZA
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_VEHICULAR_PLAN` VHP 
        ON VHP.NUMERO_POLIZA = TAB.NUMERO_POLIZA
 LEFT JOIN TMP_POLIZA_PLAN_VEHICULAR PLL
        ON PLL.NUMERO_POLIZA = TAB.NUMERO_POLIZA  
 LEFT JOIN TMP_PORCENTAJE_DEVOLUCION DEV 
        ON DEV.NUMERO_POLIZA = TAB.NUMERO_POLIZA  
 LEFT JOIN TMP_POLIZA_TRASPASO TRR
        ON TRR.NUMERO_POLIZA = TAB.NUMERO_POLIZA
 LEFT JOIN TMP_VIDACASH_FECHA_VENTA TVFV
        ON TVFV.NUMERO_POLIZA= TAB.NUMERO_POLIZA
 LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM
        ON CAST(FORMAT_DATE("%Y%m", TAB.FECHA_EMISION) AS INT64) = CAM.PERIODO
       AND CAM.FRECUENCIA='MENSUAL'
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TAB.NUMERO_POLIZA ORDER BY  TAB.FECHA_HORA_OPERACION DESC,  TAB.FECHA_OPERACION_REG_SISTEMA DESC )) = 1;

-- ----------------------------------------------------------------------
-- Paso 4 : 
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` 
WHERE NUMERO_POLIZA IN (
    SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO` 
);

-- ----------------------------------------------------------------------
-- Paso 4 : 
-- ----------------------------------------------------------------------
 INSERT INTO `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
 (
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,ESTADO
,ID_PERSONA
,PLACA
,PLAN
,NUMERO_PLAN
,OPCION_VIDA
,FECHA_VENTA
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,FECHA_CANCELACION
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FLAG_EMITIDO_ACSELE
,IGV 
,IGV_ANUAL
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,FRECUENCIA_EMISION
,RAMO
,SUBRAMO
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,FECHA_BAJA_POLIZA
,PORCENTAJE_DEVOLUCION
,MONTO_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,TIPO_CAMBIO_HM
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC
,FECHA_HORA_VENTA
) 
SELECT 
 A2.ID_FUENTE
,A2.NUMERO_POLIZA
,A2.FECHA_EMISION
,A2.ID_PRODUCTO
,A2.NOMBRE_PRODUCTO
,A2.ID_GRUPO_PRODUCTO
,A2.NOMBRE_GRUPO_PRODUCTO
,A2.ID_MONEDA
,A2.MONEDA
,A2.PRIMA_NETA
,A2.PRIMA_TOTAL
,A2.VIGENCIA
,A2.CANAL
,A2.FECHA_INICIO
,A2.FECHA_FIN
,A2.FRECUENCIA_PAGO
,A2.ESTADO
,A2.ID_PERSONA
,A2.PLACA
,A2.PLAN
,A2.NUMERO_PLAN
,A2.OPCION_VIDA
,CAST(A2.FECHA_VENTA AS STRING) AS FECHA_VENTA
,TRIM(INITCAP(A2.INDICADOR_RENOVACION)) AS INDICADOR_RENOVACION
,A2.FECHA_CADUCADA
,A2.FECHA_PRORROGADO
,A2.FECHA_ANULADA
,A2.FECHA_RESCATADO
,A2.FECHA_SUSPENDIDA
,A2.FECHA_SALDADA
,A2.FECHA_TERMINADO
,A2.FECHA_CANCELACION
,A2.COMODIN_DISPONIBLE
,A2.COMODIN_UTILIZADO
,A2.PORCENTAJE_CESIONADA
,A2.MONTO_CESIONADA
,A2.FLAG_CESIONADA
,A2.BANCO_CESIONADA
,A2.FLAG_EMITIDO_ACSELE
,A2.IGV 
,A2.IGV_ANUAL
,A2.PRIMA_TOTAL_ANUAL
,A2.PRIMA_BRUTA_ANUAL
,A2.FRECUENCIA_EMISION
,A2.RAMO
,A2.SUB_RAMO
,A2.NOMBRE_PRODUCTO_COD_SBS
,A2.FECHA_ULTIMA_OPERACION
,A2.ID_RAMO
,A2.ID_SUBRAMO
,A2.NOMBRE_ARCHIVO_TRAMA
,A2.FECHA_BAJA_POLIZA
,A2.PORCENTAJE_DEVOLUCION
,A2.MONTO_DEVOLUCION
,A2.PERIODO_PAGO
,A2.FECHA_ULTIMO_TRASPASO_CP
,A2.FECHA_ULTIMO_TRASPASO_CAV
,A2.TIPO_CAMBIO_HM
,A2.NUMERO_POLIZA_RENOVADA
,A2.FLAG_INDICADOR_PRESTAMO
,A2.DIFERIDO_TOTAL_MESES
,A2.DIFERIDO_PERIODO_PAGO
,A2.DIFERIDO_FECHA_FIN
,A2.DIFERIDO_FECHA_INICIO
,(CASE WHEN NOMBRE_PRODUCTO IN ("VIDAENTERASURA","VIDAENTERA","VIDAENTERABENEFANT") 
       THEN EXTRACT(YEAR FROM FECHA_PAGADO_HASTA )-EXTRACT(YEAR FROM FECHA_INICIO)
       WHEN ID_PRODUCTO IN ('58757' ,'69348' ,'69346' ,'69344' ,'69347' ,'52824' ,'69349' ,'52823' ,'58758' ,'64899' ,'69355' ,'69354' ,'58761' ,'77969' ,'77909' ,'77949' ,'69352' ,'69351' ,'58759' ,'69353' ,'69350') 
       THEN EXTRACT(YEAR FROM CURRENT_DATE("America/Lima"))-EXTRACT(YEAR FROM FECHA_INICIO)
 END) AS DIFERIDO_CUOTAS_GANADAS
 ,A2.NUMERO_OPERACION
 ,A2.NUMERO_PROPUESTA
 ,A2.CESION_RUC
 ,A2.MEDIO_COMUNICACION
 ,A2.NUMERO_PROPUESTA_ANTERIOR
 ,A2.FECHA_TRANSMISION
 ,A2.FECHA_RECEPCION_GDC
 ,A2.FECHA_HORA_VENTA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO`  A2
;

-- ----------------------------------------------------------------------
-- Paso 6 : Obtiene el monto de cobertura principal para las polizas de VIDA
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_UNI`
  AS
  SELECT DISTINCT
  POL.ID_FUENTE,
  POL.NUMERO_POLIZA,
  POL.ID_PRODUCTO,
  COVDCO.DESCRIPTION NOMBRE_COBERTURA,
  SAFE_CAST(CB.COVSUMAASEGURADAVALUE AS NUMERIC) MONTO_COBERTURA_PRINCIPAL,
  AP.AUDITDATE
  FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO` POL
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.PREPOLICY_raw` PRE ON PRE.NUMEROPOLIZAINPUT = POL.NUMERO_POLIZA
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.POLICYDCO_raw` AP ON CAST(AP.DCOID AS STRING) = PRE.PK  
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.CONFIGURATEDCOVERAGE_raw` C ON POL.ID_PRODUCTO = CAST(C.PRO_ID AS STRING)
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.CONFIGURABLEOBJECTTYPE_raw` OT ON C.TEMPLATEID = OT.CONFIGURABLEOBJECTTYPEID
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.COTPROPERTY_raw` PR ON PR.COTPROPERTYID = OT.CONFIGURABLEOBJECTTYPEID
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.PROPERTY_raw` TY ON TY.PROPERTYID = PR.PROPERTYID AND UPPER(TY.SIMBOLO) = 'COVTIPOCOBERTURA' AND TY.FORMULA  = '1'
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.AGREGATEDINSURANCEOBJECT_raw` AIO ON  AIO.OPERATIONPK = AP.OPERATIONPK
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.COVERAGEDCO_raw` COVDCO ON COVDCO.OPERATIONPK = AP.OPERATIONPK AND COVDCO.AGREGATEDPARENTID = AIO.AGREGATEDINSURANCEOBJECTID
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.COBERTURA_raw` CB ON CAST(COVDCO.DCOID AS STRING) = CB.PK AND SAFE_CAST(CB.COVCODIGOCOBERTURAINPUT AS NUMERIC) = C.COVERAGETYTLEID
  INNER JOIN `iter-data-storage-pv-uat.acsele_data.COVERAGETITLE_raw` CTIT ON CTIT.COVERAGETITLEID = SAFE_CAST(CB.COVCODIGOCOBERTURAINPUT AS NUMERIC)
  WHERE POL.ID_GRUPO_PRODUCTO = '01' AND POL.ID_FUENTE = '01';

-- ----------------------------------------------------------------------
-- Paso 7 : Obtiene el monto de cobertura VIDA ADICIONAL POR LA VIGENCIA DEL SEGURO para las polizas de VIDA
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_ACSELE`
AS
SELECT DISTINCT
POL.ID_FUENTE,
POL.NUMERO_POLIZA,
POL.ID_PRODUCTO,
COVDCO.DESCRIPTION NOMBRE_COBERTURA,
SAFE_CAST(CB.COVSUMAASEGURADAVALUE AS NUMERIC) MONTO_CUMULO,
AP.AUDITDATE
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO` POL
INNER JOIN `iter-data-storage-pv-uat.acsele_data.PREPOLICY_raw` PRE ON PRE.NUMEROPOLIZAINPUT = POL.NUMERO_POLIZA
INNER JOIN `iter-data-storage-pv-uat.acsele_data.POLICYDCO_raw` AP ON CAST(AP.DCOID AS STRING) = PRE.PK
INNER JOIN `iter-data-storage-pv-uat.acsele_data.CONFIGURATEDCOVERAGE_raw` C ON POL.ID_PRODUCTO = CAST(C.PRO_ID AS STRING)
INNER JOIN `iter-data-storage-pv-uat.acsele_data.CONFIGURABLEOBJECTTYPE_raw` OT ON C.TEMPLATEID = OT.CONFIGURABLEOBJECTTYPEID
INNER JOIN `iter-data-storage-pv-uat.acsele_data.COTPROPERTY_raw` PR ON PR.COTPROPERTYID = OT.CONFIGURABLEOBJECTTYPEID
INNER JOIN `iter-data-storage-pv-uat.acsele_data.PROPERTY_raw` TY ON TY.PROPERTYID = PR.PROPERTYID AND UPPER(TY.SIMBOLO) = 'COVTIPOCOBERTURA'
INNER JOIN `iter-data-storage-pv-uat.acsele_data.AGREGATEDINSURANCEOBJECT_raw` AIO ON  AIO.OPERATIONPK = AP.OPERATIONPK
INNER JOIN `iter-data-storage-pv-uat.acsele_data.COVERAGEDCO_raw` COVDCO ON COVDCO.OPERATIONPK = AP.OPERATIONPK AND COVDCO.AGREGATEDPARENTID = AIO.AGREGATEDINSURANCEOBJECTID
INNER JOIN `iter-data-storage-pv-uat.acsele_data.COBERTURA_raw` CB ON CAST(COVDCO.DCOID AS STRING) = CB.PK AND SAFE_CAST(CB.COVCODIGOCOBERTURAINPUT AS NUMERIC) = C.COVERAGETYTLEID
INNER JOIN `iter-data-storage-pv-uat.acsele_data.COVERAGETITLE_raw` CTIT ON CTIT.COVERAGETITLEID = SAFE_CAST(CB.COVCODIGOCOBERTURAINPUT AS NUMERIC)
WHERE POL.ID_PRODUCTO = '64899' AND POL.ID_FUENTE = '01' AND UPPER(LTRIM(RTRIM(COVDCO.DESCRIPTION))) = 'VIDA ADICIONAL POR LA VIGENCIA DEL SEGURO';

-- ----------------------------------------------------------------------
-- Paso 8 : 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA2_ACSELE`
AS
SELECT
A1.ID_FUENTE,
A1.NUMERO_POLIZA,
CASE WHEN A1.ID_PRODUCTO = '64899' AND A2.NOMBRE_COBERTURA IS NOT NULL THEN CONCAT(A1.NOMBRE_COBERTURA, ' - ', A2.NOMBRE_COBERTURA) ELSE A1.NOMBRE_COBERTURA END NOMBRE_COBERTURA,
A1.MONTO_COBERTURA_PRINCIPAL,
IFNULL(A2.MONTO_CUMULO, A1.MONTO_COBERTURA_PRINCIPAL) MONTO_CUMULO,
ROW_NUMBER() OVER(PARTITION BY A1.ID_FUENTE, A1.NUMERO_POLIZA ORDER BY A1.AUDITDATE DESC) AS NUM_FILA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_UNI` A1
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_ACSELE` A2 ON A1.ID_FUENTE = A2.ID_FUENTE AND A1.NUMERO_POLIZA = A2.NUMERO_POLIZA;

-- ----------------------------------------------------------------------
-- Paso 9 : 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA3_ACSELE`
AS
SELECT *
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA2_ACSELE` 
WHERE NUM_FILA = 1;

MERGE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` A1
USING `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA3_ACSELE` A2
 ON A1.NUMERO_POLIZA = A2.NUMERO_POLIZA AND A1.ID_FUENTE = A2.ID_FUENTE
WHEN MATCHED THEN UPDATE SET
NOMBRE_COBERTURA = A2.NOMBRE_COBERTURA,
MONTO_COBERTURA_PRINCIPAL = A2.MONTO_COBERTURA_PRINCIPAL,
MONTO_CUMULO = A2.MONTO_CUMULO;
  
-- -----------------------------------------------------------------------------------------
---------------------                    PRIMAS                          -------------------
-- -----------------------------------------------------------------------------------------
-- ----------------------------------------------------------------------
-- agregamos prima neta anualizada  soles  y dolares  
-- ----------------------------------------------------------------------  
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ANUALIZADAS` 
AS
WITH TMP_COBERTURA AS (
    SELECT   COB.NUMERO_POLIZA
    ,COB.OPERATIONPK
    , COB.CODIGO_COBERTURA
    , COB.NOMBRE_COBERTURA
    , COB.ID_PRODUCTO
    , COB.COBERTURA_PRIMA_NETA
    , COB.COBERTURA_PRIMA
    , COB.PAGO
    ,CASE WHEN MAX(COB.OPERATIONPK) 
        OVER(
            PARTITION BY  COB.NUMERO_POLIZA
            )=COB.OPERATIONPK 
        THEN 1
        ELSE 0 
    END AS NUM_FIL
    FROM `iter-data-storage-pv-uat.acsele_data.PRIMA_OPERACION_COBERTURA_raw` COB
    
)

SELECT NUMERO_POLIZA, 
PRIMA_NETA_ANUAL_SOLES, 
ROUND(PRIMA_ACCIDENTAL_SOLES,3) AS PRIMA_ACCIDENTAL_SOLES, 
ROUND((PRIMA_NETA_ANUAL_SOLES + PRIMA_ACCIDENTAL_SOLES),3) AS PRIMA_TOTAL_SOLES,
MONTO_TIPO_CAMBIO AS TIPO_CAMBIO_HM
FROM (
SELECT 
     POL.NUMERO_POLIZA
    ,POL.FRECUENCIA_PAGO
    ,POL.MONEDA
    ,POL.FECHA_EMISION
    ,CAM.MONTO_TIPO_CAMBIO
    ,POL.NOMBRE_PRODUCTO
    ,(CASE WHEN POL.FRECUENCIA_PAGO IN ('ANUAL','MENSUAL','TRIMESTRAL','SEMESTRAL') 
                THEN SUM(
                    CASE WHEN CAST(CAST (RTRIM(COB.CODIGO_COBERTURA) AS FLOAT64) AS STRING) NOT IN ('15432','24558','42136','24554') 
                                                AND COB.ID_PRODUCTO IN (52819,52820,52821,52822,52823,52824,58758,64899)
                         THEN IF (
                                        POL.MONEDA='US DOLAR', 
                                        SAFE_MULTIPLY(SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA_NETA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64)),CAM.MONTO_TIPO_CAMBIO),  
                                        SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA_NETA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64))
                                        )
                          WHEN CAST(CAST (RTRIM(COB.CODIGO_COBERTURA) AS FLOAT64) AS STRING) NOT IN ('15432','24558','42136','24554') 
                                    AND COB.ID_PRODUCTO IN (24917,58757,58759,58760,58761,69343,69344,69345,69346,69347,69348,69349,69350,69351,69352,69353,69354,69355,77909,
                                    77890,77889,77829,77830,77831,77949,77969)
                          THEN IF (
                                        POL.MONEDA='US DOLAR',
                                        SAFE_MULTIPLY(SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64)),CAM.MONTO_TIPO_CAMBIO), 
                                        SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64))
                                                )
                           ELSE 0  
                                    END
                            )
          
        END) AS PRIMA_NETA_ANUAL_SOLES
    ,(CASE WHEN POL.FRECUENCIA_PAGO IN ('ANUAL','MENSUAL','TRIMESTRAL','SEMESTRAL') 
                THEN SUM(
                    CASE WHEN CAST(CAST (RTRIM(COB.CODIGO_COBERTURA) AS FLOAT64) AS STRING) IN ('15432','24558','42136','24554') 
                                                AND COB.ID_PRODUCTO IN (52819,52820,52821,52822,52823,52824,58758,64899)
                         THEN IF (
                                        POL.MONEDA='US DOLAR', 
                                        SAFE_MULTIPLY(SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA_NETA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64)),CAM.MONTO_TIPO_CAMBIO),  
                                        SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA_NETA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64))
                                        )
                          WHEN CAST(CAST (RTRIM(COB.CODIGO_COBERTURA) AS FLOAT64) AS STRING) IN ('15432','24558','42136','24554') 
                                    AND COB.ID_PRODUCTO IN (24917,58757,58759,58760,58761,69343,69344,69345,69346,69347,69348,69349,69350,69351,69352,69353,69354,69355,77909,
                                    77890,77889,77829,77830,77831,77949,77969)
                          THEN IF (
                                        POL.MONEDA='US DOLAR',
                                        SAFE_MULTIPLY(SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64)),CAM.MONTO_TIPO_CAMBIO), 
                                        SAFE_DIVIDE(CAST(REPLACE(COB.COBERTURA_PRIMA,',','') AS FLOAT64),CAST(COB.PAGO AS FLOAT64))
                                                )
                           ELSE 0  
                                    END
                            )
          
        END) AS PRIMA_ACCIDENTAL_SOLES
    FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
    INNER JOIN TMP_COBERTURA COB
        ON COB.NUMERO_POLIZA=POL.NUMERO_POLIZA
        AND NUM_FIL=1
    LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM 
        ON CAST(FORMAT_DATE("%Y%m", POL.FECHA_EMISION) AS INT64) = CAM.PERIODO
        AND CAM.FRECUENCIA='MENSUAL'
    WHERE NOMBRE_GRUPO_PRODUCTO='VIDA'
    GROUP BY 
    POL.NUMERO_POLIZA
    ,POL.FRECUENCIA_PAGO
    ,POL.MONEDA
    ,POL.FECHA_EMISION
    ,CAM.MONTO_TIPO_CAMBIO 
    ,POL.NOMBRE_PRODUCTO
    ) ;
-- ----------------------------------------------------------------------
-- ACTUALIZAMOS PRIMAS
-- ----------------------------------------------------------------------	
UPDATE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
SET POL.PRIMA_NETA_ANUAL_PEN = FNT.PRIMA_NETA_ANUAL_SOLES
, POL.PRIMA_ACCIDENTAL_PEN = FNT.PRIMA_ACCIDENTAL_SOLES
, POL.PRIMA_TOTAL_PEN = FNT.PRIMA_TOTAL_SOLES
, POL.TIPO_CAMBIO_HM = FNT.TIPO_CAMBIO_HM
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ANUALIZADAS`  FNT
WHERE POL.NUMERO_POLIZA = FNT.NUMERO_POLIZA;

-- ----------------------------------------------------------------------
-- ACTUALIZAMOS LAS PRIMAS NETAS ANUALES 
-- ----------------------------------------------------------------------	
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_REEMPLAZO_CEROS`
AS
SELECT DISTINCT POL.NUMERO_POLIZA,
POL.PRIMA_TOTAL_ANUAL,
IF(POL.MONEDA='US DOLAR',POL.PRIMA_TOTAL_ANUAL*CAM.MONTO_TIPO_CAMBIO,POL.PRIMA_TOTAL_ANUAL) PRIMA_TOTAL_SOLES,
FRECUENCIA_POLIZA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_OPERACION` POL
LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM 
        ON CAST(FORMAT_DATE("%Y%m", POL.FECHA_EMISION) AS INT64) = CAM.PERIODO
        AND CAM.FRECUENCIA='MENSUAL'
WHERE POL.DESCRIPCION_EVENTO IN ('EMITIRRAPIDA','EMITIR')
AND POL.PRIMA_TOTAL_ANUAL>0
AND POL.ESTADO_OPERACION='Applied operation'
AND POL.NOMBRE_GRUPO_PRODUCTO='VIDA';

UPDATE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
    SET POL.PRIMA_NETA_ANUAL_PEN = FRE.PRIMA_TOTAL_SOLES
  FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_REEMPLAZO_CEROS` FRE
WHERE POL.NUMERO_POLIZA = FRE.NUMERO_POLIZA 
  AND POL.NOMBRE_GRUPO_PRODUCTO='VIDA' 
  AND COALESCE(POL.PRIMA_NETA_ANUAL_PEN,0)=0 ;

-- ==============================================================================================================
--                 RENTA VITALICIA (RVIADM) | VIAJES (TRAVEL-DB)
-- ==============================================================================================================


-- ----------------------------------------------------------------------
-- Paso 1 : Carga de POLIZAS   vida y masivos, SOAT y Vehicular
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_SOATVEHICULARRENTA_UNI`
AS
SELECT TAB.* 
FROM 
(
-- ----------------------------------------------------------------------
-- Paso A10 : RVIADM
-- ----------------------------------------------------------------------
   SELECT DISTINCT  --> 81930
  EG2.ID_FUENTE , --> '02'
  CAST(POL.num_poliza AS STRING) ID_POLIZA,
  CAST(POL.num_poliza AS STRING) NUMERO_POLIZA,
  SAFE_CAST(DATETIME(POL.fec_emision_poliza, "America/Lima") AS DATE) FECHA_EMISION,
  AP.ID_PRODUCTO,
  AP.NOMBRE_PRODUCTO,
  AP.ID_GRUPO_PRODUCTO,
  AP.NOMBRE_GRUPO_PRODUCTO,
  EG1.CODIGO_GLOBAL ID_MONEDA,
  EG1.NOMBRE_GLOBAL MONEDA,  
  SAFE_CAST(POL.val_prima_unica AS NUMERIC) PRIMA_NETA,
  SAFE_CAST(POL.val_prima_unica AS NUMERIC) PRIMA_TOTAL,
  CAST(NULL AS STRING) VIGENCIA,
  UPPER(OV.gls_larga) CANAL, 
  SAFE_CAST(DATETIME(POL.fec_inicio_vigencia, "America/Lima") AS DATE) FECHA_INICIO,
  SAFE_CAST(DATETIME(POL.fec_fin_vigencia, "America/Lima") AS DATE) FECHA_FIN,
  CAST(NULL AS STRING) FRECUENCIA_PAGO,
  CAST(NULL AS DATE) FECHA_CANCELACION,
  UPPER(TP.gls_larga) TIPO_PENSION,
  SAFE_CAST(POL.val_pension_base AS NUMERIC) MONTO_BASE,
  SAFE_CAST(POL.val_pension_original AS NUMERIC) MONTO_ORIGINAL,
  UPPER(TR.gls_larga) TIPO_RENTA,
  UPPER(ES.gls_larga) ESTADO,
  CONCAT('01-', EG2.CODIGO_GLOBAL, '-', PER.num_identificacion_pdt) ID_PERSONA,
  CAST(NULL AS STRING) PLACA,
  CAST(NULL AS NUMERIC) CANTIDAD_DIAS,
  CAST(NULL AS NUMERIC) CANTIDAD_PASAJERO_ADULTO,
  CAST(NULL AS NUMERIC) CANTIDAD_PASAJERO_NINO,
  CAST(NULL AS STRING) PLAN,
  CAST(NULL AS STRING) ID_DESTINO,
  CAST(NULL AS STRING) DESTINO, 
  DATETIME(PER.aud_fec_ingreso , "America/Lima") FECHA_CREACION,
  DATETIME(PER.aud_fec_modificacion , "America/Lima") FECHA_MODIFICACION,
  CAST(NULL AS DATETIME ) AS FECHA_HORA_VENTA,
  CAST(NULL AS DATE )     AS FECHA_VENTA,
  CAST(NULL AS STRING)    AS ORIGEN_VIAJE,
  CAST(NULL AS STRING) AS VIAJE_MARCA_TARJETA,
  CAST(NULL AS STRING) AS VIAJE_PASARELA,
  CAST(NULL AS STRING) AS VIAJE_CODIGO_PROMOCIONAL
  --,BE.cod_parentezco
        FROM `iter-data-storage-pv-uat.rviadmin_data.personas_raw` PER  
        INNER JOIN `iter-data-storage-pv-uat.rviadmin_data.poliza_raw` POL
        ON POL.cod_tipo_id_causante = PER.cod_tipo_identificacion 
            AND POL.num_id_causante = PER.num_identificacion
  INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
          ON POL.cod_cartera = AP.ID_PRODUCTO 
         AND AP.ID_FUENTE = '02'
   LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
          ON EG1.VALOR_ORIGEN = POL.cod_moneda_pago 
         AND EG1.ID_FUENTE = '02' 
         AND EG1.CODIGO_TIPO = 'MONEDA'
  INNER JOIN `iter-data-storage-pv-uat.rviadmin_data.tab_codigo_raw` ES 
          ON ES.cod_codigo = POL.cod_estado_poliza 
         AND ES.nom_tabla = 'ESTPOL'
   LEFT JOIN `iter-data-storage-pv-uat.rviadmin_data.tab_codigo_raw` OV 
          ON OV.cod_codigo = POL.cod_origen_venta 
         AND OV.nom_tabla = 'ORIVEN'
   LEFT JOIN `iter-data-storage-pv-uat.rviadmin_data.tab_codigo_raw` TP 
          ON TP.cod_codigo = POL.cod_tipo_pension 
         AND TP.nom_tabla = 'TIPENS'
   LEFT JOIN `iter-data-storage-pv-uat.rviadmin_data.tab_codigo_raw` TR 
          ON TR.cod_codigo = POL.cod_tipo_renta 
         AND TR.nom_tabla = 'TIPREN'
   INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG2 
          ON PER.cod_tipo_identificacion = EG2.VALOR_ORIGEN 
         AND EG2.ID_FUENTE = '02' 
         AND EG2.CODIGO_TIPO = 'TIPODOC'
          -- LEFT JOIN `iter-data-storage-pv-uat.rviadmin_data.ben_poliza_raw` BE ON BE.cod_cartera = POL.cod_cartera AND BE.num_poliza = POL.num_poliza
                                             -- AND POL.cod_tipo_id_causante = BE.cod_tipo_identificacion
                                              --AND POL.num_id_causante = BE.num_identificacion 
WHERE  POL.cod_cartera in ('RVI','PRV', 'SCTR') --AND (BE.cod_parentezco='80' OR BE.cod_parentezco IS NULL)

UNION ALL

-- ----------------------------------------------------------------------
-- Paso A10 : TRAVEL-DB  - VIAJES
-- ----------------------------------------------------------------------
SELECT DISTINCT
  AP.ID_FUENTE,
  B._id                                                                      AS ID_POLIZA,
  B.numero_poliza                                                            AS NUMERO_POLIZA,
  SAFE_CAST(DATETIME(B.estado_venta_fecha_cotizado, "America/Lima") AS DATE) AS FECHA_EMISION,
  AP.ID_PRODUCTO,
  AP.NOMBRE_PRODUCTO,
  AP.ID_GRUPO_PRODUCTO,
  AP.NOMBRE_GRUPO_PRODUCTO, 
  '02'                                                                          AS ID_MONEDA,
  'US DOLAR'                                                                    AS MONEDA,  
  COALESCE(SAFE_CAST(PL.costo_interseguro AS NUMERIC),SAFE_CAST(B.plan_costo_intercorp AS NUMERIC),SAFE_CAST(PL.costo AS NUMERIC))                                                                       AS PRIMA_NETA,
  SAFE_CAST(PL.costo AS NUMERIC)                                                AS PRIMA_TOTAL,
  CAST(NULL AS STRING)                                                          AS VIGENCIA,
  EG2.NOMBRE_GLOBAL                                                             AS CANAL,
  SAFE_CAST(DATETIME(B.fecha_partida, "America/Lima") AS DATE)                AS FECHA_INICIO,
  SAFE_CAST(DATETIME(B.fecha_retorno, "America/Lima") AS DATE)                AS FECHA_FIN,
  CAST(NULL AS STRING)                                                          AS FRECUENCIA_PAGO,
  CAST(NULL AS DATE)                                                            AS FECHA_CANCELACION,
  CAST(NULL AS STRING)                                                          AS TIPO_PENSION,
  CAST(NULL AS NUMERIC)                                                         AS MONTO_BASE,
  CAST(NULL AS NUMERIC)                                                         AS MONTO_ORIGINAL,
  CAST(NULL AS STRING)                                                          AS TIPO_RENTA,
  EG3.NOMBRE_GLOBAL                                                             AS ESTADO,
  CONCAT('01-', GL1.CODIGO_GLOBAL, '-', A.numero_documento)                     AS ID_PERSONA,
  CAST(NULL AS STRING)                                                          AS PLACA, 
  SAFE_CAST(B.cantidad_dias AS NUMERIC)                                       AS CANTIDAD_DIAS,
  SAFE_CAST(B.cantidad_adulto AS NUMERIC)                                     AS CANTIDAD_PASAJERO_ADULTO,
  SAFE_CAST(B.cantidad_nino AS NUMERIC)                                       AS CANTIDAD_PASAJERO_NINO,
  UPPER(PL.descripcion)                                                         AS PLAN,
  EG1.CODIGO_GLOBAL                                                             AS ID_DESTINO,
  EG1.NOMBRE_GLOBAL                                                             AS DESTINO,  
  DATETIME(NULL, "America/Lima")                                                  AS FECHA_CREACION, --- VERIFICAR ESTO 
  SAFE_CAST(NULL AS DATETIME)                                                  AS  FECHA_MODIFICACION,   -->FECHA_MODIFICACION 
  --DATETIME(TIMESTAMP(REGEXP_EXTRACT(datos_aai_historico, r'"fecha_crea": { "\$date": "(.*?)" }')),'America/Lima')                       AS FECHA_HORA_VENTA,
DATETIME(TIMESTAMP(B.auditoria_fecha_crea),'America/Lima')                       AS FECHA_HORA_VENTA,
  --DATE(B.datos_aai_historico_0_auditoria_fecha_crea,'America/Lima')                           AS FECHA_VENTA,
  --DATE(TIMESTAMP(REGEXP_EXTRACT(datos_aai_historico, r'"fecha_crea": { "\$date": "(.*?)" }')),'America/Lima')                           AS FECHA_VENTA,
DATE(B.auditoria_fecha_crea,'America/Lima') AS FECHA_VENTA ,
  PL.pais_origen   AS ORIGEN_VIAJE,
  TRIM(UPPER(B.datos_culqi_marca_tarjeta))            AS VIAJE_MARCA_TARJETA,
  TRIM(UPPER(B.datos_culqi_pasarela))                 AS VIAJE_PASARELA,
  NULLIF(TRIM(UPPER(B.codigo_promocional)),'')        AS VIAJE_CODIGO_PROMOCIONAL
  FROM `iter-data-storage-pv-uat.traveldb_data.venta_raw` B
  INNER JOIN `iter-data-storage-pv-uat.traveldb_data.cliente_venta_raw` A 
          ON A.id_venta = B._id 
  INNER JOIN `iter-data-storage-pv-uat.traveldb_data.plan_venta_raw` PL 
          ON PL.id_venta             = B._id 
         AND PL.codigo_eleccion_plan = '1'
   LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
          ON EG1.VALOR_ORIGEN = B.codigo_destino 
         AND EG1.CODIGO_TIPO = 'DESTINO' 
         AND EG1.ID_FUENTE = '07'
   LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG2 
          ON EG2.VALOR_ORIGEN = B.canal_venta 
         AND EG2.CODIGO_TIPO = 'CANALVENTA' 
         AND EG2.ID_FUENTE = '07'
   LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG3 
          ON EG3.VALOR_ORIGEN = B.estado_venta_estado 
         AND EG3.CODIGO_TIPO = 'ESTADOVENTA' 
         AND EG3.ID_FUENTE = '07'
  INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
          ON AP.ID_FUENTE        ='07'
         AND AP.ID_PRODUCTO = 'VIAJE'
  LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` GL1 
          ON CAST(A.tipo_documento AS STRING) = GL1.VALOR_ORIGEN 
         AND GL1.ID_FUENTE        ='07'
         AND GL1.CODIGO_TIPO = 'TIPODOC'
  WHERE  
     A.flag_titular = '1'  -- FLAG DE CONTRATANTE
    AND NUMERO_POLIZA IS NOT NULL -- SE AGREGO PARA QUE NO SUCEDA QUE SE REPITAN LAS POLIZAS CON DOS CONTRATANTES
    AND  B.estado_venta_estado = '2'
)TAB 
    QUALIFY(ROW_NUMBER() OVER(PARTITION BY NUMERO_POLIZA
          ORDER BY CONCAT(IFNULL(FORMAT_DATE('%Y%m%d', CAST(FECHA_CREACION AS DATE)), '0'), IFNULL(FORMAT_DATE('%Y%m%d', CAST(FECHA_MODIFICACION AS DATE)), '0')) DESC))=1
;

-- ----------------------------------------------------------------------
-- Paso 4 : 
-- ----------------------------------------------------------------------
  MERGE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` A1
  USING `iter-data-storage-pv-uat.temp.TMP_POLIZA_SOATVEHICULARRENTA_UNI` A2
     ON A1.NUMERO_POLIZA = A2.NUMERO_POLIZA 
    AND A1.ID_FUENTE     = A2.ID_FUENTE
   WHEN MATCHED 
   THEN UPDATE SET
  FECHA_EMISION          = A2.FECHA_EMISION, 
  ID_PRODUCTO            = A2.ID_PRODUCTO, 
  NOMBRE_PRODUCTO        = A2.NOMBRE_PRODUCTO, 
  ID_GRUPO_PRODUCTO      = A2.ID_GRUPO_PRODUCTO, 
  NOMBRE_GRUPO_PRODUCTO  = A2.NOMBRE_GRUPO_PRODUCTO, 
  ID_MONEDA              = A2.ID_MONEDA, 
  MONEDA                 = A2.MONEDA, 
  PRIMA_NETA             = A2.PRIMA_NETA, 
  PRIMA_TOTAL            = A2.PRIMA_TOTAL, 
  VIGENCIA               = A2.VIGENCIA, 
  CANAL                  = A2.CANAL, 
  FECHA_INICIO           = A2.FECHA_INICIO, 
  FECHA_FIN              = A2.FECHA_FIN, 
  FRECUENCIA_PAGO        = A2.FRECUENCIA_PAGO, 
  FECHA_CANCELACION      = A2.FECHA_CANCELACION, 
  TIPO_PENSION           = A2.TIPO_PENSION, 
  MONTO_BASE             = A2.MONTO_BASE, 
  MONTO_ORIGINAL         = A2.MONTO_ORIGINAL, 
  TIPO_RENTA             = A2.TIPO_RENTA, 
  ESTADO                 = A2.ESTADO, 
  ID_PERSONA             = A2.ID_PERSONA, 
  PLACA                  = A2.PLACA,
  CANTIDAD_DIAS          = A2.CANTIDAD_DIAS, 
  CANTIDAD_PASAJERO_ADULTO = A2.CANTIDAD_PASAJERO_ADULTO, 
  CANTIDAD_PASAJERO_NINO = A2.CANTIDAD_PASAJERO_NINO, 
  PLAN                   = A2.PLAN, 
  ID_DESTINO             = A2.ID_DESTINO, 
  DESTINO                = A2.DESTINO, 
  FECHA_MODIFICACION     = A2.FECHA_MODIFICACION,
  FLAG_CESIONADA         ='No',
  ORIGEN_VIAJE            = A2.ORIGEN_VIAJE,
  FECHA_VENTA            = CAST(A2.FECHA_VENTA AS STRING),
  FECHA_HORA_VENTA       = A2.FECHA_HORA_VENTA,
  VIAJE_MARCA_TARJETA    = A2.VIAJE_MARCA_TARJETA,
  VIAJE_PASARELA         = A2.VIAJE_PASARELA,
  VIAJE_CODIGO_PROMOCIONAL = A2.VIAJE_CODIGO_PROMOCIONAL
 -- FECHA_MODIFICACION_REGISTRO = CAST(CURRENT_DATETIME() AS TIMESTAMP)
  WHEN NOT MATCHED 
  THEN INSERT (
          ID_FUENTE
        , NUMERO_POLIZA
        , FECHA_EMISION
        , ID_PRODUCTO
        , NOMBRE_PRODUCTO
        , ID_GRUPO_PRODUCTO
        , NOMBRE_GRUPO_PRODUCTO
        , ID_MONEDA
        , MONEDA
        , PRIMA_NETA
        , PRIMA_TOTAL
        , VIGENCIA
        , CANAL
        , FECHA_INICIO
        , FECHA_FIN
        , FRECUENCIA_PAGO
        , FECHA_CANCELACION
        , TIPO_PENSION
        , MONTO_BASE
        , MONTO_ORIGINAL
        , TIPO_RENTA
        , ESTADO
        , ID_PERSONA
        , PLACA
        , CANTIDAD_DIAS
        , CANTIDAD_PASAJERO_ADULTO
        , CANTIDAD_PASAJERO_NINO
        , PLAN
        , ID_DESTINO
        , DESTINO
        , FECHA_CREACION
        , FECHA_MODIFICACION
       -- , FECHA_CREACION_REGISTRO
        , FLAG_CESIONADA
        , FECHA_VENTA 
        , FECHA_HORA_VENTA
        , ORIGEN_VIAJE
        , VIAJE_MARCA_TARJETA
        , VIAJE_PASARELA
        , VIAJE_CODIGO_PROMOCIONAL
  )
  VALUES (
          A2.ID_FUENTE
        , A2.NUMERO_POLIZA
        , A2.FECHA_EMISION
        , A2.ID_PRODUCTO
        , A2.NOMBRE_PRODUCTO
        , A2.ID_GRUPO_PRODUCTO
        , A2.NOMBRE_GRUPO_PRODUCTO
        , A2.ID_MONEDA
        , A2.MONEDA
        , A2.PRIMA_NETA
        , A2.PRIMA_TOTAL
        , A2.VIGENCIA
        , A2.CANAL
        , A2.FECHA_INICIO
        , A2.FECHA_FIN
        , A2.FRECUENCIA_PAGO
        , A2.FECHA_CANCELACION
        , A2.TIPO_PENSION
        , A2.MONTO_BASE
        , A2.MONTO_ORIGINAL
        , A2.TIPO_RENTA
        , A2.ESTADO
        , A2.ID_PERSONA
        , A2.PLACA
        , A2.CANTIDAD_DIAS
        , A2.CANTIDAD_PASAJERO_ADULTO
        , A2.CANTIDAD_PASAJERO_NINO
        , A2.PLAN
        , A2.ID_DESTINO
        , A2.DESTINO
        , A2.FECHA_CREACION
        , A2.FECHA_MODIFICACION
       -- , CAST(CURRENT_DATETIME() AS TIMESTAMP)
        ,'No' 
        , CAST(A2.FECHA_VENTA  AS STRING)
        , A2.FECHA_HORA_VENTA
        , A2.ORIGEN_VIAJE
        , A2.VIAJE_MARCA_TARJETA
        , A2.VIAJE_PASARELA
        , A2.VIAJE_CODIGO_PROMOCIONAL
  );

-- ----------------------------------------------------------------------
-- ACTUALIZAMOS ESTADOS
-- ----------------------------------------------------------------------	
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_ESTADOS_POLIZAS_HOMOLOGADOS` 
AS
SELECT 
NOMBRE_GRUPO_PRODUCTO,
NUMERO_POLIZA, 
CASE WHEN ESTADO='TERMINADO' THEN 'TERMINADA'
WHEN ESTADO='CADUCADO' THEN 'CADUCADA'
WHEN ESTADO='ANULADO' THEN 'ANULADA'
ELSE ESTADO END AS ESTADO_HOMOLOGADO
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
;

UPDATE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
SET POL.ESTADO_IC = FNT.ESTADO_HOMOLOGADO
FROM `iter-data-storage-pv-uat.temp.TMP_ESTADOS_POLIZAS_HOMOLOGADOS`  FNT
WHERE POL.NUMERO_POLIZA = FNT.NUMERO_POLIZA 
AND POL.NOMBRE_GRUPO_PRODUCTO=FNT.NOMBRE_GRUPO_PRODUCTO
;

-- ==============================================================================================================
--                                  RENTA PARTICULAR -RPP - ADMWR                                              --
-- ==============================================================================================================

-- ----------------------------------------------------------------------
-- Paso A10 : Universo de Polizas - Renta Particular - RPP - ADMWR
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_ADMWR_POLIZAS_UNI`
AS
SELECT 
  EG2.ID_FUENTE, -- '03' 
  POL.gls_poliza  AS NUMERO_POLIZA,
  SAFE_CAST(DATETIME(POL.fec_emision_poliza, "America/Lima") AS DATE) AS FECHA_EMISION,
  AP.ID_PRODUCTO,
  AP.NOMBRE_PRODUCTO,
  AP.ID_GRUPO_PRODUCTO,
  AP.NOMBRE_GRUPO_PRODUCTO,  
  EG1.CODIGO_GLOBAL AS ID_MONEDA,
  EG1.NOMBRE_GLOBAL AS MONEDA,
  --El primer valor fue val_prima_unica, se esta cambiando por val_renta_base
  SAFE_CAST(POL.val_prima_unica AS NUMERIC) AS PRIMA_NETA,
  SAFE_CAST(POL.val_prima_unica AS NUMERIC) AS PRIMA_TOTAL,
  POL.cod_canal_distribucion AS CANAL,
  SAFE_CAST(DATETIME(POL.fec_inicio_vigencia, "America/Lima") AS DATE) AS FECHA_INICIO,
  SAFE_CAST(DATETIME(POL.fec_fin_vigencia, "America/Lima") AS DATE)    AS FECHA_FIN,
  UPPER(TP.gls_larga)  AS TIPO_PENSION,
  SAFE_CAST(POL.val_renta_base AS NUMERIC)     AS  MONTO_BASE,
  SAFE_CAST(POL.val_renta_original AS NUMERIC) AS MONTO_ORIGINAL,
  UPPER(ES.gls_larga)  AS  ESTADO,
  CONCAT('01-', EG2.CODIGO_GLOBAL, '-', PER.gls_nro_identificacion) AS ID_PERSONA , --->
  CURRENT_DATE('America/Lima')      AS FECHA_CREACION,
  CURRENT_DATE('America/Lima')  AS FECHA_MODIFICACION,
  CAST(NUM_COTIZACION AS STRING) AS NUMERO_COTIZACION,
  GLS_SOLICITUD  AS NUMERO_SOLICITUD_COTIZACION,
  CURRENT_DATE('America/Lima')   AS FECHA_CARGA,
  CAM.MONTO_TIPO_CAMBIO AS TIPO_CAMBIO_HM
  FROM `iter-data-storage-pv-uat.admwr_data.poliza_raw` POL
  INNER JOIN `iter-data-storage-pv-uat.admwr_data.persona_raw`  PER 
  ON POL.cod_persona = PER.cod_persona
  --INNER JOIN `iter-data-storage-pv-uat.temp.con_admwr_temp` TEMP
    --      ON TEMP.ID_POLIZA = POL.gls_poliza
 INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` AP 
         ON POL.cod_tipo_producto = AP.ID_PRODUCTO 
        AND AP.ID_FUENTE = '03'
 INNER JOIN `iter-data-storage-pv-uat.rviadmin_data.tab_codigo_raw` ES 
         ON ES.cod_codigo    = POL.cod_estado_poliza 
        AND ES.nom_tabla     = 'ESTPOL'
  LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1
         ON EG1.VALOR_ORIGEN = POL.cod_moneda_prima 
        AND EG1.ID_FUENTE    = '03' 
        AND EG1.CODIGO_TIPO = 'MONEDA'
  LEFT JOIN `iter-data-storage-pv-uat.admwr_data.Tab_Codigo_raw` TP 
         ON TP.cod_codigo   = POL.cod_tipo_pago 
        AND TP.nom_tabla    = 'TIPPAG'
  LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM
        ON CAST(FORMAT_DATE("%Y%m", SAFE_CAST(DATETIME(POL.fec_emision_poliza, "America/Lima") AS DATE)) AS INT64) = CAM.PERIODO
       AND CAM.FRECUENCIA='MENSUAL'
  LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG2
         ON PER.cod_tipo_identificacion = EG2.VALOR_ORIGEN
        AND EG2.ID_FUENTE   = '03'
        AND EG2.CODIGO_TIPO = 'TIPODOC'
--- INNER JOIN admwr_data.beneficiario_raw BEN ON BEN.cod_persona = PER.cod_persona AND BEN.cod_poliza = POL.cod_poliza -- 2778
WHERE POL.cod_tipo_producto IN ('RPP','IFP')-- AND BEN.cod_parentesco = '80' 

QUALIFY(ROW_NUMBER()OVER(PARTITION BY POL.gls_poliza ORDER BY POL.gls_poliza DESC ))=1
;

-- ----------------------------------------------------------------------
-- Paso A10 : Eliminar Pólizas a reprocesar
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
      WHERE NUMERO_POLIZA IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.temp.TMP_ADMWR_POLIZAS_UNI`)
;

-- ----------------------------------------------------------------------
-- Paso A10 : Insertar en la Tabla FINAL
-- ----------------------------------------------------------------------
INSERT INTO  `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
(
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,CANAL
,FECHA_INICIO
,FECHA_FIN
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,ESTADO
,ID_PERSONA
,FECHA_CREACION
,FECHA_MODIFICACION
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,TIPO_CAMBIO_HM
)
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,CANAL
,FECHA_INICIO
,FECHA_FIN
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,ESTADO
,ID_PERSONA
,FECHA_CREACION
,FECHA_MODIFICACION
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,TIPO_CAMBIO_HM
FROM `iter-data-storage-pv-uat.temp.TMP_ADMWR_POLIZAS_UNI`
;
-- ==============================================================================================================
--                                      VIDA CASH                                                              --
-- ==============================================================================================================
-- Carga Polizas que no llegan por ACSELE
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_VIDACASH_POLIZAS_POL`
AS 
WITH TMP_POLIZA AS (
SELECT * FROM  `iter-data-storage-pv-uat.vidacash_data.POLIZA_raw`
WHERE CAST(ESTADO AS STRING) <> '0' AND ESTADO IS NOT NULL AND TRIM(CHANNEL) <>'RUMBO'
)
(
  SELECT DISTINCT
  CNF.ID_FUENTE,
  CAST(POL.ID_POLIZA        AS STRING)            AS ID_POLIZA,
  CAST(POL.NUMERO_POLIZA    AS STRING)            AS NUMERO_POLIZA,
  SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE)    AS FECHA_EMISION,
  CNF.ID_PRODUCTO,
  CNF.NOMBRE_PRODUCTO,
  CNF.ID_GRUPO_PRODUCTO,
  CNF.NOMBRE_GRUPO_PRODUCTO,
  GL1.CODIGO_GLOBAL                                AS ID_MONEDA,
  GL1.NOMBRE_GLOBAL                                AS MONEDA,
  SAFE_CAST(POL.PRIMA_RECURRENTE_TOTAL AS NUMERIC) AS PRIMA_NETA,
  SAFE_CAST(POL.PRIMA_RECURRENTE_TOTAL AS NUMERIC) AS PRIMA_TOTAL,
  CAST(DET.PERIODO_VIGENCIA AS STRING)             AS VIGENCIA,
  --IF(POL.channel_sell_is='FFVV','INTERNET',POL.channel_sell_is) AS CANAL,
  CASE WHEN pol.channel='FALABELLA'          THEN 'FALABELLA'
     WHEN pol.channel='FINANCIERAOH'         THEN 'FINANCIERAOH'
     WHEN pol.channel='IBK'                  THEN 'IBK'
     WHEN pol.channel='IBK_SELECT'           THEN 'IBK'
     WHEN pol.channel='ENDOSOS_IBK'          THEN 'IBK'
     WHEN pol.channel='PROMOCION_IBK'        THEN 'IBK'
     WHEN pol.channel='RUMBO'                THEN 'RUMBO'
     WHEN pol.channel='TELEMARKETING'        THEN 'TELEMARKETING'
     WHEN pol.channel='IS'                   THEN 'WEB'
     WHEN pol.channel='WEB'                  THEN 'WEB'
     WHEN pol.channel='ENDOSO'               THEN 'WEB'
     WHEN pol.channel='ENDOSOS'              THEN 'WEB'
     WHEN pol.channel='AHORRO_SEGURO'        THEN 'WEB'
     WHEN pol.channel='PROMOCION_WEB'        THEN 'WEB'
     WHEN pol.channel='PROTECCION_TOTAL'     THEN 'WEB'
     WHEN pol.channel='AHORRO_JUBILACION'    THEN 'WEB'
     WHEN pol.channel='PROTECCION_SEGURA'    THEN 'WEB'
     WHEN pol.channel='SEGURO_UNIVERSITARIO' THEN 'WEB'
     WHEN pol.channel IS NULL THEN 'WEB'
     ELSE 'WEB' END AS CANAL,
  DATE(DATETIME(POL.FECHA_INICIO_VIGENCIA, 'America/Lima')) AS FECHA_INICIO,
  DATE(DATETIME(POL.FECHA_FIN_VIGENCIA, 'America/Lima')) AS FECHA_FIN,
  GL4.NOMBRE_GLOBAL                                AS FRECUENCIA_PAGO,
  CAST(NULL AS DATE)                               AS FECHA_CANCELACION,
  CAST(NULL AS STRING)                             AS TIPO_PENSION,
  CAST(NULL AS NUMERIC)                            AS MONTO_BASE,
  CAST(NULL AS NUMERIC)                            AS MONTO_ORIGINAL,
  CAST(NULL AS STRING)                             AS TIPO_RENTA,
  CASE
  WHEN GL2.NOMBRE_GLOBAL='VENDIDO' THEN 'VIGENTE' 
  ELSE GL2.NOMBRE_GLOBAL  END                     AS ESTADO,
  CONCAT('01-',GL3.CODIGO_GLOBAL,'-',CLI.NUMERO_DOCUMENTO) AS ID_PERSONA,
  CAST(NULL AS STRING)                             AS  PLACA,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_DIAS,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_PASAJERO_ADULTO,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_PASAJERO_NINO,
  CAST(NULL AS STRING)                             AS PLAN,
  CAST(NULL AS STRING)                             AS ID_DESTINO,
  CAST(NULL AS STRING)                             AS DESTINO, 
  DATETIME(POL.FECHA_CREA , "America/Lima")        AS FECHA_CREACION, 
  DATETIME(POL.FECHA_MODIF , "America/Lima")       AS FECHA_MODIFICACION
  ,CAST(DET.PORCENTAJE_DEVOLUCION as FLOAT64)/100 AS PORCENTAJE_DEVOLUCION
  ,DET.PERIODO_PAGO AS PERIODO_PAGO
  ,DET.MONTO_DEVOLUCION 
  ,FORMAT_DATE("%Y-%m-%d",SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE))    AS FECHA_VENTA
  ,SAFE.DATETIME(POL.FECHA_VENTA,'America/Lima') AS FECHA_HORA_VENTA
  ,CAST(0 AS INT64)  AS COMODIN_DISPONIBLE
  ,CAST(0 AS INT64)  AS COMODIN_UTILIZADO
,CAM.MONTO_TIPO_CAMBIO AS TIPO_CAMBIO_HM
,POL.channel AS OPCION_VIDA
      FROM TMP_POLIZA POL
INNER JOIN iter-data-storage-pv-uat.vidacash_data.CLIENTE_raw CLI
        ON POL.ID_CLIENTE = CLI.ID_CLIENTE
INNER JOIN `iter-data-storage-pv-uat.vidacash_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
 LEFT JOIN iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL GL1 
        ON GL1.VALOR_ORIGEN    =POL.COD_MONEDA 
       AND GL1.ID_FUENTE       ='10' 
       AND GL1.CODIGO_TIPO     ='MONEDA'
 LEFT JOIN iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL GL2 
        ON GL2.VALOR_ORIGEN    =CAST(POL.ESTADO  AS STRING)
       AND GL2.ID_FUENTE       ='10' 
       AND GL2.CODIGO_TIPO     ='ESTADOVENTA'
       --AND GL2.VALOR_ORIGEN <> '0'
 LEFT JOIN iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL GL3 
        ON GL3.VALOR_ORIGEN    =CAST(CLI.ID_TIPO_DOCUMENTO AS STRING)
       AND GL3.ID_FUENTE       ='10' 
       AND GL3.CODIGO_TIPO     ='TIPODOC'
 LEFT JOIN iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL GL4 
        ON GL4.VALOR_ORIGEN    =POL.FRECUENCIA_PAGO
       AND GL4.ID_FUENTE       ='10' 
       AND GL4.CODIGO_TIPO     ='FRECUENCIAPAGO'
 LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM
       ON CAST(FORMAT_DATE("%Y%m", SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE)) AS INT64) = CAM.PERIODO
      AND CAM.FRECUENCIA='MENSUAL'
CROSS JOIN ( SELECT ID_FUENTE
                   ,ID_PRODUCTO
                   ,NOMBRE_PRODUCTO
                   ,ID_GRUPO_PRODUCTO
                   ,NOMBRE_GRUPO_PRODUCTO
               FROM config_data.CNF_AGRUPACION_PRODUCTO 
              WHERE ID_FUENTE        ='10'
                AND ID_PRODUCTO      ='VIDACASH'
	     ) CNF 
	WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>'' 
      AND TRIM(COALESCE(CLI.NUMERO_DOCUMENTO,''))<>''
      AND TRIM(COALESCE(POL.NUMERO_POLIZA,'')) NOT IN ( SELECT NUMERO_POLIZA FROM  `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` WHERE ID_FUENTE='01' )--> POLIZAS QUE NO LLEGAN POR ACSELE
      --> SI LA POLIZA YA INGRESO POR ACSELE Y EXISTE EN LA FUENTE 10 --> CONSIDERAR ACSEL
      --> CASO CONTRARIO CONSIDERA LA FUENTE 10
       --> POLIZAS DE VIDACASH CON ERROR 
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TRIM(COALESCE(POL.NUMERO_POLIZA,'')) ORDER BY POL.FECHA_CREA  DESC))=1
);

-- ----------------------------------------------------------------------
-- Paso A10 : Eliminar Pólizas a reprocesar
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
WHERE NUMERO_POLIZA IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.temp.TMP_VIDACASH_POLIZAS_POL`)
;
-- ----------------------------------------------------------------------
-- Paso A10 : Insertar en la tabla FINAL
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` 
(
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,ID_DESTINO
,DESTINO
,FECHA_CREACION
,FECHA_MODIFICACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,MONTO_DEVOLUCION
,FECHA_VENTA
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,TIPO_CAMBIO_HM
,OPCION_VIDA
,FECHA_HORA_VENTA
)
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,ID_DESTINO
,DESTINO
,FECHA_CREACION
,FECHA_MODIFICACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,MONTO_DEVOLUCION
,FECHA_VENTA
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,TIPO_CAMBIO_HM
,OPCION_VIDA
,FECHA_HORA_VENTA
FROM `iter-data-storage-pv-uat.temp.TMP_VIDACASH_POLIZAS_POL`
WHERE NUMERO_POLIZA NOT IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.inputfiles.POLIZA_VIDACASH_ERROR`)
;
-- ----------------------------------------------------------------------
-- Paso: Carga Monto Cobertura VIDACASH
-- ----------------------------------------------------------------------
MERGE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` A1
USING (
SELECT DISTINCT
       CNF.ID_FUENTE
      ,POL.NUMERO_POLIZA
      ,'FALLECIMIENTO' AS NOMBRE_COBERTURA
      ,CAST(DET.SUMA_ASEGURADA AS NUMERIC) AS MONTO_COBERTURA_PRINCIPAL
      ,FORMAT_DATE("%Y-%m-%d",SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE))     AS FECHA_VENTA
      FROM `iter-data-storage-pv-uat.vidacash_data.POLIZA_raw` POL
INNER JOIN `iter-data-storage-pv-uat.vidacash_data.CLIENTE_raw` CLI
        ON POL.ID_CLIENTE = CLI.ID_CLIENTE
INNER JOIN `iter-data-storage-pv-uat.vidacash_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
        AND DET.ID_COBERTURA=1
CROSS JOIN ( SELECT ID_FUENTE
                   ,ID_PRODUCTO
                   ,NOMBRE_PRODUCTO
                   ,ID_GRUPO_PRODUCTO
                   ,NOMBRE_GRUPO_PRODUCTO
               FROM `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` 
              WHERE ID_FUENTE        ='10'
                AND ID_PRODUCTO      ='VIDACASH'
	      ) CNF 
	WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>'' 
    AND TRIM(COALESCE(CLI.NUMERO_DOCUMENTO,''))<>''
  QUALIFY(ROW_NUMBER()OVER(PARTITION BY POL.NUMERO_POLIZA ))=1
)   A2 
     ON A1.NUMERO_POLIZA = A2.NUMERO_POLIZA 
    AND A1.ID_FUENTE    = A2.ID_FUENTE
  WHEN MATCHED THEN 
  UPDATE SET
  NOMBRE_COBERTURA          = A2.NOMBRE_COBERTURA,
  MONTO_COBERTURA_PRINCIPAL = A2.MONTO_COBERTURA_PRINCIPAL,
  FECHA_VENTA               = A2.FECHA_VENTA;

-- ==============================================================================================================
--                                      RUMBO                                                              --
-- ==============================================================================================================
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_RUMBO_POLIZAS_POL`
AS 
WITH TMP_POLIZA AS (
SELECT * FROM  `iter-data-storage-pv-uat.rumbo_data.POLIZA_raw`
WHERE CAST(ESTADO AS STRING) <> '0' AND ESTADO IS NOT NULL AND TRIM(CHANNEL)='RUMBO'
)
(
  SELECT DISTINCT
  CNF.ID_FUENTE,
  CAST(POL.ID_POLIZA        AS STRING)            AS ID_POLIZA,
  CAST(POL.NUMERO_POLIZA    AS STRING)            AS NUMERO_POLIZA,
  SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE)    AS FECHA_EMISION,
  CNF.ID_PRODUCTO,
  CNF.NOMBRE_PRODUCTO,
  CNF.ID_GRUPO_PRODUCTO,
  CNF.NOMBRE_GRUPO_PRODUCTO,
  GL1.CODIGO_GLOBAL                                AS ID_MONEDA,
  GL1.NOMBRE_GLOBAL                                AS MONEDA,
  SAFE_CAST(POL.PRIMA_RECURRENTE_TOTAL AS NUMERIC) AS PRIMA_NETA,
  SAFE_CAST(POL.PRIMA_RECURRENTE_TOTAL AS NUMERIC) AS PRIMA_TOTAL,
  CAST(DET.PERIODO_VIGENCIA AS STRING)             AS VIGENCIA,
  --IF(POL.channel_sell_is='FFVV','INTERNET',POL.channel_sell_is) AS CANAL,
  CASE WHEN pol.channel='FALABELLA'          THEN 'FALABELLA'
     WHEN pol.channel='FINANCIERAOH'         THEN 'FINANCIERAOH'
     WHEN pol.channel='IBK'                  THEN 'IBK'
     WHEN pol.channel='IBK_SELECT'           THEN 'IBK'
     WHEN pol.channel='ENDOSOS_IBK'          THEN 'IBK'
     WHEN pol.channel='PROMOCION_IBK'        THEN 'IBK'
     WHEN pol.channel='RUMBO'                THEN 'RUMBO'
     WHEN pol.channel='TELEMARKETING'        THEN 'TELEMARKETING'
     WHEN pol.channel='IS'                   THEN 'WEB'
     WHEN pol.channel='WEB'                  THEN 'WEB'
     WHEN pol.channel='ENDOSO'               THEN 'WEB'
     WHEN pol.channel='ENDOSOS'              THEN 'WEB'
     WHEN pol.channel='AHORRO_SEGURO'        THEN 'WEB'
     WHEN pol.channel='PROMOCION_WEB'        THEN 'WEB'
     WHEN pol.channel='PROTECCION_TOTAL'     THEN 'WEB'
     WHEN pol.channel='AHORRO_JUBILACION'    THEN 'WEB'
     WHEN pol.channel='PROTECCION_SEGURA'    THEN 'WEB'
     WHEN pol.channel='SEGURO_UNIVERSITARIO' THEN 'WEB'
     WHEN pol.channel IS NULL THEN 'WEB'
     ELSE 'WEB' END AS CANAL,
  DATE(DATETIME(POL.FECHA_INICIO_VIGENCIA, 'America/Lima')) AS FECHA_INICIO,
  DATE(DATETIME(POL.FECHA_FIN_VIGENCIA, 'America/Lima')) AS FECHA_FIN,
  GL4.NOMBRE_GLOBAL                                AS FRECUENCIA_PAGO,
  CAST(NULL AS DATE)                               AS FECHA_CANCELACION,
  CAST(NULL AS STRING)                             AS TIPO_PENSION,
  CAST(NULL AS NUMERIC)                            AS MONTO_BASE,
  CAST(NULL AS NUMERIC)                            AS MONTO_ORIGINAL,
  CAST(NULL AS STRING)                             AS TIPO_RENTA,
  CASE
  WHEN GL2.NOMBRE_GLOBAL='VENDIDO' THEN 'VIGENTE' 
  ELSE GL2.NOMBRE_GLOBAL  END                     AS ESTADO,
  CONCAT('01-',GL3.CODIGO_GLOBAL,'-',CLI.NUMERO_DOCUMENTO) AS ID_PERSONA,
  CAST(NULL AS STRING)                             AS  PLACA,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_DIAS,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_PASAJERO_ADULTO,
  CAST(NULL AS NUMERIC)                            AS CANTIDAD_PASAJERO_NINO,
  CAST(NULL AS STRING)                             AS PLAN,
  CAST(NULL AS STRING)                             AS ID_DESTINO,
  CAST(NULL AS STRING)                             AS DESTINO, 
  DATETIME(POL.FECHA_CREA , "America/Lima")        AS FECHA_CREACION, 
  DATETIME(POL.FECHA_MODIF , "America/Lima")       AS FECHA_MODIFICACION
  ,CAST(DET.PORCENTAJE_DEVOLUCION as FLOAT64)/100 AS PORCENTAJE_DEVOLUCION
  ,DET.PERIODO_PAGO AS PERIODO_PAGO
  ,DET.MONTO_DEVOLUCION 
  ,FORMAT_DATE("%Y-%m-%d",SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE))    AS FECHA_VENTA
  ,SAFE.DATETIME(POL.FECHA_VENTA,'America/Lima') AS FECHA_HORA_VENTA
  ,CAST(0 AS INT64)  AS COMODIN_DISPONIBLE
  ,CAST(0 AS INT64)  AS COMODIN_UTILIZADO
,CAM.MONTO_TIPO_CAMBIO AS TIPO_CAMBIO_HM
,POL.channel AS OPCION_VIDA
      FROM TMP_POLIZA POL
INNER JOIN `iter-data-storage-pv-uat.rumbo_data.CLIENTE_raw` CLI
        ON POL.ID_CLIENTE = CLI.ID_CLIENTE
INNER JOIN `iter-data-storage-pv-uat.rumbo_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` GL1 
        ON GL1.VALOR_ORIGEN    =POL.COD_MONEDA 
       AND GL1.ID_FUENTE       ='10' 
       AND GL1.CODIGO_TIPO     ='MONEDA'
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` GL2 
        ON GL2.VALOR_ORIGEN    =CAST(POL.ESTADO  AS STRING)
       AND GL2.ID_FUENTE       ='10' 
       AND GL2.CODIGO_TIPO     ='ESTADOVENTA'
       --AND GL2.VALOR_ORIGEN <> '0'
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` GL3 
        ON GL3.VALOR_ORIGEN    =CAST(CLI.ID_TIPO_DOCUMENTO AS STRING)
       AND GL3.ID_FUENTE       ='10' 
       AND GL3.CODIGO_TIPO     ='TIPODOC'
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` GL4 
        ON GL4.VALOR_ORIGEN    =POL.FRECUENCIA_PAGO
       AND GL4.ID_FUENTE       ='10' 
       AND GL4.CODIGO_TIPO     ='FRECUENCIAPAGO'
 LEFT JOIN `iter-data-storage-pv-uat.goldenrecord_data.DIM_TIPO_CAMBIO_CONTABLE` CAM
       ON CAST(FORMAT_DATE("%Y%m", SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE)) AS INT64) = CAM.PERIODO
      AND CAM.FRECUENCIA='MENSUAL'
CROSS JOIN ( SELECT ID_FUENTE
                   ,ID_PRODUCTO
                   ,NOMBRE_PRODUCTO
                   ,ID_GRUPO_PRODUCTO
                   ,NOMBRE_GRUPO_PRODUCTO
               FROM config_data.CNF_AGRUPACION_PRODUCTO 
              WHERE ID_FUENTE        ='10'
                AND ID_PRODUCTO      ='VIDACASH'
	     ) CNF 
	WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>'' 
      AND TRIM(COALESCE(CLI.NUMERO_DOCUMENTO,''))<>''
      AND TRIM(COALESCE(POL.NUMERO_POLIZA,'')) NOT IN ( SELECT NUMERO_POLIZA FROM  `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` WHERE ID_FUENTE='01' )--> POLIZAS QUE NO LLEGAN POR ACSELE
      --> SI LA POLIZA YA INGRESO POR ACSELE Y EXISTE EN LA FUENTE 10 --> CONSIDERAR ACSEL
      --> CASO CONTRARIO CONSIDERA LA FUENTE 10
       --> POLIZAS DE VIDACASH CON ERROR 
QUALIFY(ROW_NUMBER()OVER(PARTITION BY TRIM(COALESCE(POL.NUMERO_POLIZA,'')) ORDER BY POL.FECHA_CREA  DESC))=1
);
-- ----------------------------------------------------------------------
-- Paso A10 : Eliminar Pólizas a reprocesar
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
WHERE NUMERO_POLIZA IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.temp.TMP_RUMBO_POLIZAS_POL`)
;
-- ----------------------------------------------------------------------
-- Paso A10 : Insertar en la tabla FINAL
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` 
(
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,ID_DESTINO
,DESTINO
,FECHA_CREACION
,FECHA_MODIFICACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,MONTO_DEVOLUCION
,FECHA_VENTA
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,TIPO_CAMBIO_HM
,OPCION_VIDA
,FECHA_HORA_VENTA
)
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,ID_DESTINO
,DESTINO
,FECHA_CREACION
,FECHA_MODIFICACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,MONTO_DEVOLUCION
,FECHA_VENTA
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,TIPO_CAMBIO_HM
,OPCION_VIDA
,FECHA_HORA_VENTA
FROM `iter-data-storage-pv-uat.temp.TMP_RUMBO_POLIZAS_POL`
WHERE NUMERO_POLIZA NOT IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.inputfiles.POLIZA_VIDACASH_ERROR`)
;
-- ----------------------------------------------------------------------
-- Paso: Carga Monto Cobertura RUMBO
-- ----------------------------------------------------------------------
MERGE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` A1
USING (
SELECT DISTINCT
       CNF.ID_FUENTE
      ,POL.NUMERO_POLIZA
      ,'FALLECIMIENTO' AS NOMBRE_COBERTURA
      ,CAST(DET.SUMA_ASEGURADA AS NUMERIC) AS MONTO_COBERTURA_PRINCIPAL
      ,FORMAT_DATE("%Y-%m-%d",SAFE_CAST(DATETIME(POL.FECHA_VENTA,'America/Lima') AS DATE))     AS FECHA_VENTA
      FROM `iter-data-storage-pv-uat.rumbo_data.POLIZA_raw` POL
INNER JOIN `iter-data-storage-pv-uat.rumbo_data.CLIENTE_raw` CLI
        ON POL.ID_CLIENTE = CLI.ID_CLIENTE
INNER JOIN `iter-data-storage-pv-uat.rumbo_data.POLIZA_DETALLE_raw` DET
        ON POL.ID_POLIZA = DET.ID_POLIZA
        AND DET.ID_COBERTURA=1
CROSS JOIN ( SELECT ID_FUENTE
                   ,ID_PRODUCTO
                   ,NOMBRE_PRODUCTO
                   ,ID_GRUPO_PRODUCTO
                   ,NOMBRE_GRUPO_PRODUCTO
               FROM `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO` 
              WHERE ID_FUENTE        ='10'
                AND ID_PRODUCTO      ='VIDACASH'
	      ) CNF 
	WHERE TRIM(COALESCE(POL.NUMERO_POLIZA,''))<>'' 
    AND TRIM(COALESCE(CLI.NUMERO_DOCUMENTO,''))<>''
  QUALIFY(ROW_NUMBER()OVER(PARTITION BY POL.NUMERO_POLIZA ))=1
)   A2 
     ON A1.NUMERO_POLIZA = A2.NUMERO_POLIZA 
    AND A1.ID_FUENTE    = A2.ID_FUENTE
  WHEN MATCHED THEN 
  UPDATE SET
  NOMBRE_COBERTURA          = A2.NOMBRE_COBERTURA,
  MONTO_COBERTURA_PRINCIPAL = A2.MONTO_COBERTURA_PRINCIPAL,
  FECHA_VENTA               = A2.FECHA_VENTA;

-- ----------------------------------------------------------------------
-- FLAG DE COBERTURAS
-- ----------------------------------------------------------------------	
UPDATE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
SET POL.FLAG_COBERTURA_EG = FNT.FLAG_COBERTURA_EG
, POL.FLAG_COBERTURA_FAT = FNT.FLAG_COBERTURA_FAT
, POL.FLAG_COBERTURA_ITP = FNT.FLAG_COBERTURA_ITP
, POL.FLAG_COBERTURA_IA = FNT.FLAG_COBERTURA_IA
, POL.FLAG_COBERTURA_EGAC = FNT.FLAG_COBERTURA_EGAC
, POL.FLAG_COBERTURA_FA = FNT.FLAG_COBERTURA_FA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA` FNT
WHERE POL.NUMERO_POLIZA = FNT.NUMERO_POLIZA;

-- ----------------------------------------------------------------------
-- Paso 2: Diferencial con los registros nuevos y Modificados(algun campo no llave)
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN_DIFF`
AS
-- Universo de Registros NUEVOS o que se Modificados
WITH TMP_LANDING AS 
(
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,NOMBRE_COBERTURA
,MONTO_COBERTURA_PRINCIPAL
,MONTO_CUMULO
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,NUMERO_PLAN
,ID_DESTINO
,DESTINO
,MONTO_DEVOLUCION
,FECHA_VENTA
,FLAG_EMITIDO_ACSELE
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FECHA_CREACION
,FECHA_MODIFICACION
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,IGV_ANUAL
,OPCION_VIDA
,IGV
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,PRIMA_NETA_ANUAL_PEN
,FRECUENCIA_EMISION
,FECHA_HORA_VENTA
,ORIGEN_VIAJE
,VIAJE_PASARELA
,VIAJE_MARCA_TARJETA
,VIAJE_CODIGO_PROMOCIONAL
,RAMO
,SUBRAMO
,PRIMA_ACCIDENTAL_PEN
,PRIMA_TOTAL_PEN
,TIPO_CAMBIO_HM
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,ESTADO_IC
,FECHA_BAJA_POLIZA
,ESTADO_CAUSAL
,COMPANIA_IC
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,MOTIVO_BAJA
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,FLAG_COBERTURA_EG
,FLAG_COBERTURA_FAT
,FLAG_COBERTURA_ITP
,FLAG_COBERTURA_IA
,FLAG_COBERTURA_EGAC
,FLAG_COBERTURA_FA
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC
,UPPER(TO_HEX(SHA256(CONCAT( COALESCE(ID_FUENTE,'')
,COALESCE(NUMERO_POLIZA,'')
,COALESCE(FECHA_EMISION,'1990-01-01')
,COALESCE(ID_PRODUCTO,'')
,COALESCE(NOMBRE_PRODUCTO,'')
,COALESCE(ID_GRUPO_PRODUCTO,'')
,COALESCE(NOMBRE_GRUPO_PRODUCTO,'')
,COALESCE(ID_MONEDA,'')
,COALESCE(MONEDA,'')
,COALESCE(PRIMA_NETA,-0.00001)
,COALESCE(PRIMA_TOTAL,-0.00001)
,COALESCE(VIGENCIA,'')
,COALESCE(CANAL,'')
,COALESCE(NOMBRE_COBERTURA,'')
,COALESCE(MONTO_COBERTURA_PRINCIPAL,-0.00001)
,COALESCE(MONTO_CUMULO,-0.00001)
,COALESCE(FECHA_INICIO,'1990-01-01')
,COALESCE(FECHA_FIN,'1990-01-01')
,COALESCE(FRECUENCIA_PAGO,'')
,COALESCE(FECHA_CANCELACION,'1990-01-01')
,COALESCE(TIPO_PENSION,'')
,COALESCE(MONTO_BASE,-0.00001)
,COALESCE(MONTO_ORIGINAL,-0.00001)
,COALESCE(TIPO_RENTA,'')
,COALESCE(ESTADO,'')
,COALESCE(ID_PERSONA,'')
,COALESCE(PLACA,'')
,COALESCE(CANTIDAD_DIAS,-99)
,COALESCE(CANTIDAD_PASAJERO_ADULTO,-99)
,COALESCE(CANTIDAD_PASAJERO_NINO,-99)
,COALESCE(PLAN,'')
,COALESCE(NUMERO_PLAN,'')
,COALESCE(ID_DESTINO,'')
,COALESCE(DESTINO,'')
,COALESCE(MONTO_DEVOLUCION,-0.00001)
,COALESCE(FECHA_VENTA,'')
,COALESCE(FLAG_EMITIDO_ACSELE,TRUE)
,COALESCE(COMODIN_DISPONIBLE,-99)
,COALESCE(COMODIN_UTILIZADO,-99)
,COALESCE(PORCENTAJE_CESIONADA,'')
,COALESCE(MONTO_CESIONADA,'')
,COALESCE(FLAG_CESIONADA,'')
,COALESCE(BANCO_CESIONADA,'')
,COALESCE(PRIMA_TOTAL_ANUAL,-0.00001)
,COALESCE(PRIMA_BRUTA_ANUAL,-0.00001)
,COALESCE(IGV_ANUAL,-0.00001)
,COALESCE(OPCION_VIDA,'')
,COALESCE(IGV,-0.00001)
,COALESCE(INDRENOVACIONINPUT,'')
,COALESCE(FECHA_CADUCADA,'1990-01-01')
,COALESCE(FECHA_PRORROGADO,'1990-01-01')
,COALESCE(FECHA_ANULADA,'1990-01-01')
,COALESCE(FECHA_RESCATADO,'1990-01-01')
,COALESCE(FECHA_SUSPENDIDA,'1990-01-01')
,COALESCE(FECHA_SALDADA,'1990-01-01')
,COALESCE(FECHA_TERMINADO,'1990-01-01')
,COALESCE(PRIMA_NETA_ANUAL_PEN,-0.00001)
,COALESCE(FRECUENCIA_EMISION,'')
,COALESCE(FECHA_HORA_VENTA,'1990-01-01')
,COALESCE(ORIGEN_VIAJE,'')
,COALESCE(VIAJE_PASARELA,'')
,COALESCE(VIAJE_MARCA_TARJETA,'')
,COALESCE(VIAJE_CODIGO_PROMOCIONAL,'')
,COALESCE(RAMO,'')
,COALESCE(SUBRAMO,'')
,COALESCE(PRIMA_ACCIDENTAL_PEN,-0.00001)
,COALESCE(PRIMA_TOTAL_PEN,-0.00001)
,COALESCE(TIPO_CAMBIO_HM,-0.00001)
,COALESCE(NOMBRE_PRODUCTO_COD_SBS,'')
,COALESCE(FECHA_ULTIMA_OPERACION,'1990-01-01')
,COALESCE(ID_RAMO,'')
,COALESCE(ID_SUBRAMO,'')
,COALESCE(NOMBRE_ARCHIVO_TRAMA,'')
,COALESCE(ESTADO_IC,'')
,COALESCE(FECHA_BAJA_POLIZA,'1990-01-01')
,COALESCE(ESTADO_CAUSAL,'')
,COALESCE(COMPANIA_IC,'')
,COALESCE(NUMERO_COTIZACION,'')
,COALESCE(NUMERO_SOLICITUD_COTIZACION,'')
,COALESCE(PORCENTAJE_DEVOLUCION,-99)
,COALESCE(PERIODO_PAGO,-99)
,COALESCE(FECHA_ULTIMO_TRASPASO_CP,'1990-01-01')
,COALESCE(FECHA_ULTIMO_TRASPASO_CAV,'1990-01-01')
,COALESCE(MOTIVO_BAJA,'')
,COALESCE(NUMERO_POLIZA_RENOVADA,'')
,COALESCE(FLAG_INDICADOR_PRESTAMO,'')
,COALESCE(DIFERIDO_TOTAL_MESES,-0.00001)
,COALESCE(DIFERIDO_PERIODO_PAGO,-0.00001)
,COALESCE(DIFERIDO_FECHA_FIN,'1990-01-01')
,COALESCE(DIFERIDO_FECHA_INICIO,'1990-01-01')
,COALESCE(FLAG_COBERTURA_EG,FALSE)
,COALESCE(FLAG_COBERTURA_FAT,FALSE)
,COALESCE(FLAG_COBERTURA_ITP,FALSE)
,COALESCE(FLAG_COBERTURA_IA,FALSE)
,COALESCE(FLAG_COBERTURA_EGAC,FALSE)
,COALESCE(FLAG_COBERTURA_FA,FALSE)
,COALESCE(DIFERIDO_CUOTAS_GANADAS,-99)
,COALESCE(NUMERO_OPERACION,-99)
,COALESCE(NUMERO_PROPUESTA,'-')
,COALESCE(CESION_RUC,'-')
--,COALESCE(MEDIO_COMUNICACION,'')
--,COALESCE(NUMERO_PROPUESTA_ANTERIOR,'-')
--,COALESCE(FECHA_TRANSMISION,'1990-01-01')
--,COALESCE(FECHA_RECEPCION_GDC,'1990-01-01')
)))) AS HASH_DIFF
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
)
SELECT LAN.*
      ,COALESCE(DIFF.FECHA_CREACION_REGISTRO,CURRENT_DATE('America/Lima')) AS FECHA_CREACION_REGISTRO
      ,CURRENT_DATE('America/Lima')   AS FECHA_MODIFICACION_REGISTRO
     FROM TMP_LANDING LAN
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN` /*TMP_DIFF*/ DIFF -- Universo de Registros EXISTENTES en la tabla DESTINO
        ON LAN.NUMERO_POLIZA   = DIFF.NUMERO_POLIZA
       AND LAN.ID_PRODUCTO     = DIFF.ID_PRODUCTO
     WHERE LAN.HASH_DIFF      <> DIFF.HASH_DIFF -- Registros Modificados
        OR DIFF.HASH_DIFF IS NULL  -- Registros Nuevos
;

-- -----------------------------------------------------------------------------------
-- Paso 4: Diferencial 
-- -----------------------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN` CAR
 WHERE EXISTS (
 SELECT 1
   FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN_DIFF` LAN
   WHERE LAN.NUMERO_POLIZA   = CAR.NUMERO_POLIZA
     AND LAN.ID_PRODUCTO     = CAR.ID_PRODUCTO
 )
;

-- -----------------------------------------------------------------------------------
-- Paso 4: Diferencial 
-- -----------------------------------------------------------------------------------

INSERT INTO `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN`
(
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,NOMBRE_COBERTURA
,MONTO_COBERTURA_PRINCIPAL
,MONTO_CUMULO
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,NUMERO_PLAN
,ID_DESTINO
,DESTINO
,MONTO_DEVOLUCION
,FECHA_VENTA
,FLAG_EMITIDO_ACSELE
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FECHA_CREACION
,FECHA_MODIFICACION
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,IGV_ANUAL
,OPCION_VIDA
,IGV
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,PRIMA_NETA_ANUAL_PEN
,FRECUENCIA_EMISION
,FECHA_HORA_VENTA
,ORIGEN_VIAJE
,VIAJE_PASARELA
,VIAJE_MARCA_TARJETA
,VIAJE_CODIGO_PROMOCIONAL
,RAMO
,SUBRAMO
,PRIMA_ACCIDENTAL_PEN
,PRIMA_TOTAL_PEN
,TIPO_CAMBIO_HM
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,ESTADO_IC
,FECHA_BAJA_POLIZA
,ESTADO_CAUSAL
,COMPANIA_IC
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,MOTIVO_BAJA
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,FLAG_COBERTURA_EG
,FLAG_COBERTURA_FAT
,FLAG_COBERTURA_ITP
,FLAG_COBERTURA_IA
,FLAG_COBERTURA_EGAC
,FLAG_COBERTURA_FA
,HASH_DIFF
,FECHA_CREACION_REGISTRO
,FECHA_MODIFICACION_REGISTRO
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC

)
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,NOMBRE_COBERTURA
,MONTO_COBERTURA_PRINCIPAL
,MONTO_CUMULO
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,NUMERO_PLAN
,ID_DESTINO
,DESTINO
,MONTO_DEVOLUCION
,FECHA_VENTA
,FLAG_EMITIDO_ACSELE
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FECHA_CREACION
,FECHA_MODIFICACION
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,IGV_ANUAL
,OPCION_VIDA
,IGV
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,PRIMA_NETA_ANUAL_PEN
,FRECUENCIA_EMISION
,FECHA_HORA_VENTA
,ORIGEN_VIAJE
,VIAJE_PASARELA
,VIAJE_MARCA_TARJETA
,VIAJE_CODIGO_PROMOCIONAL
,RAMO
,SUBRAMO
,PRIMA_ACCIDENTAL_PEN
,PRIMA_TOTAL_PEN
,TIPO_CAMBIO_HM
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,ESTADO_IC
,FECHA_BAJA_POLIZA
,ESTADO_CAUSAL
,COMPANIA_IC
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,MOTIVO_BAJA
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,FLAG_COBERTURA_EG
,FLAG_COBERTURA_FAT
,FLAG_COBERTURA_ITP
,FLAG_COBERTURA_IA
,FLAG_COBERTURA_EGAC
,FLAG_COBERTURA_FA
,HASH_DIFF
,FECHA_CREACION_REGISTRO
,FECHA_MODIFICACION_REGISTRO
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC
  FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN_DIFF` 
;

-- ----------------------------------------------------------------------
-- Insertar en la tabla FINAL
-- ----------------------------------------------------------------------
TRUNCATE TABLE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`;

-- -----------------------------------------------------------------------------------
-- Paso 4: Diferencial 
-- -----------------------------------------------------------------------------------

INSERT INTO `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` 
(
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,NOMBRE_COBERTURA
,MONTO_COBERTURA_PRINCIPAL
,MONTO_CUMULO
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,NUMERO_PLAN
,ID_DESTINO
,DESTINO
,MONTO_DEVOLUCION
,FECHA_VENTA
,FLAG_EMITIDO_ACSELE
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FECHA_CREACION
,FECHA_MODIFICACION
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,IGV_ANUAL
,OPCION_VIDA
,IGV
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,PRIMA_NETA_ANUAL_PEN
,FRECUENCIA_EMISION
,FECHA_HORA_VENTA
,ORIGEN_VIAJE
,VIAJE_PASARELA
,VIAJE_MARCA_TARJETA
,VIAJE_CODIGO_PROMOCIONAL
,RAMO
,SUBRAMO
,PRIMA_ACCIDENTAL_PEN
,PRIMA_TOTAL_PEN
,TIPO_CAMBIO_HM
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,ESTADO_IC
,FECHA_BAJA_POLIZA
,ESTADO_CAUSAL
,COMPANIA_IC
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,MOTIVO_BAJA
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,FLAG_COBERTURA_EG
,FLAG_COBERTURA_FAT
,FLAG_COBERTURA_ITP
,FLAG_COBERTURA_IA
,FLAG_COBERTURA_EGAC
,FLAG_COBERTURA_FA
,HASH_DIFF
,FECHA_CREACION_REGISTRO
,FECHA_MODIFICACION_REGISTRO
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC

)
SELECT 
 ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,VIGENCIA
,CANAL
,NOMBRE_COBERTURA
,MONTO_COBERTURA_PRINCIPAL
,MONTO_CUMULO
,FECHA_INICIO
,FECHA_FIN
,FRECUENCIA_PAGO
,FECHA_CANCELACION
,TIPO_PENSION
,MONTO_BASE
,MONTO_ORIGINAL
,TIPO_RENTA
,ESTADO
,ID_PERSONA
,PLACA
,CANTIDAD_DIAS
,CANTIDAD_PASAJERO_ADULTO
,CANTIDAD_PASAJERO_NINO
,PLAN
,NUMERO_PLAN
,ID_DESTINO
,DESTINO
,MONTO_DEVOLUCION
,FECHA_VENTA
,FLAG_EMITIDO_ACSELE
,COMODIN_DISPONIBLE
,COMODIN_UTILIZADO
,PORCENTAJE_CESIONADA
,MONTO_CESIONADA
,FLAG_CESIONADA
,BANCO_CESIONADA
,FECHA_CREACION
,FECHA_MODIFICACION
,PRIMA_TOTAL_ANUAL
,PRIMA_BRUTA_ANUAL
,IGV_ANUAL
,OPCION_VIDA
,IGV
,INDRENOVACIONINPUT
,FECHA_CADUCADA
,FECHA_PRORROGADO
,FECHA_ANULADA
,FECHA_RESCATADO
,FECHA_SUSPENDIDA
,FECHA_SALDADA
,FECHA_TERMINADO
,PRIMA_NETA_ANUAL_PEN
,FRECUENCIA_EMISION
,FECHA_HORA_VENTA
,ORIGEN_VIAJE
,VIAJE_PASARELA
,VIAJE_MARCA_TARJETA
,VIAJE_CODIGO_PROMOCIONAL
,RAMO
,SUBRAMO
,PRIMA_ACCIDENTAL_PEN
,PRIMA_TOTAL_PEN
,TIPO_CAMBIO_HM
,NOMBRE_PRODUCTO_COD_SBS
,FECHA_ULTIMA_OPERACION
,ID_RAMO
,ID_SUBRAMO
,NOMBRE_ARCHIVO_TRAMA
,ESTADO_IC
,FECHA_BAJA_POLIZA
,ESTADO_CAUSAL
,COMPANIA_IC
,NUMERO_COTIZACION
,NUMERO_SOLICITUD_COTIZACION
,PORCENTAJE_DEVOLUCION
,PERIODO_PAGO
,FECHA_ULTIMO_TRASPASO_CP
,FECHA_ULTIMO_TRASPASO_CAV
,MOTIVO_BAJA
,NUMERO_POLIZA_RENOVADA
,FLAG_INDICADOR_PRESTAMO
,DIFERIDO_TOTAL_MESES
,DIFERIDO_PERIODO_PAGO
,DIFERIDO_FECHA_FIN
,DIFERIDO_FECHA_INICIO
,FLAG_COBERTURA_EG
,FLAG_COBERTURA_FAT
,FLAG_COBERTURA_ITP
,FLAG_COBERTURA_IA
,FLAG_COBERTURA_EGAC
,FLAG_COBERTURA_FA
,HASH_DIFF
,FECHA_CREACION_REGISTRO
,FECHA_MODIFICACION_REGISTRO
,DIFERIDO_CUOTAS_GANADAS
,NUMERO_OPERACION
,NUMERO_PROPUESTA
,CESION_RUC
,MEDIO_COMUNICACION
,NUMERO_PROPUESTA_ANTERIOR
,FECHA_TRANSMISION
,FECHA_RECEPCION_GDC
  FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN`
;


-------------------------------------------------------------------------------------
--ACTUALIZACION Y HOMOLOGACION DE CAMPOS
-------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION`
AS
WITH ACTUALIZACION_POLIZAS AS (
select 
NUMERO_POLIZA
,ID_RAMO
,ESTADO
, CASE

WHEN RAMO ='VIDA INVIDIDUAL' THEN 'VIDA INDIVIDUAL'
ELSE RAMO END AS RAMO
,SUBRAMO
,ID_PRODUCTO
,PLAN
,ESTADO_CAUSAL
, CASE WHEN FRECUENCIA_PAGO = 'PAGOUNICO' THEN 'U' ELSE SUBSTRING(FRECUENCIA_PAGO,1,1) END  AS ID_PERIODO_PAGO
,FRECUENCIA_PAGO
, PERIODO_PAGO
---,PRIMA_TOTAL_ANUAL AS PRIMA_BRUTA
,C.cod_causal_estado_poliza ID_ESTADO_CAUSAL
,C.cod_estado_poliza  ID_ESTADO_POLIZA
, 'ACSELE' AS BASE
,CASE
WHEN ID_PRODUCTO in 
('69343','69344','69345','69346','69347','69348','69349','69350','69351','69352','69353','69354','69355') THEN 'SURA'
ELSE 'INTER'  END AS COMPANIA
 from `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` P
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.T_ESTPOL_ACS_raw` C
          ON UPPER(C.cod_estado_acsel_e)=TRIM(P.ESTADO) 

WHERE NOMBRE_GRUPO_PRODUCTO='VIDA'
and ID_FUENTE='01'
)

SELECT P.NUMERO_POLIZA
,ESTADO
,P.ID_PRODUCTO
,RAMO
,ID_PERIODO_PAGO
,ID_ESTADO_CAUSAL
,ID_ESTADO_POLIZA
,upper(C.gls_larga) CAUSAL_ESTADO
,BASE
,COMPANIA fROM ACTUALIZACION_POLIZAS P
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.TAB_CODIGO_raw` C
          ON C.cod_codigo=TRIM(P.ID_ESTADO_CAUSAL) 
          AND lower(C.nom_tabla)='caupol'
;
---------------------------------------------------------------------------------
--HOMOLOGACION DE ESTADOS
-------------------------------------------------------------------------------
 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` A
 SET  A.Estado = 'ANULADA', A.CAUSAL_ESTADO = 'DESISTIMIENTO CLIENTE'
 WHERE A.Estado = 'SUSPENDIDA' and A.CAUSAL_ESTADO = 'ANULADA A PEDIDO';

 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` 
 SET  Estado = 'PRORROGADA', CAUSAL_ESTADO = 'PRORROGADA'
 WHERE Estado = 'VIGENTE' and CAUSAL_ESTADO = 'PRORROGADA';

 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` 
 SET  Estado = 'RESCATADA', CAUSAL_ESTADO = 'RESCATADA'
 WHERE Estado = 'TERMINADA' and CAUSAL_ESTADO = 'RESCATADA';

 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` 
 SET Estado = 'SALDADO', CAUSAL_ESTADO = 'SALDADA A PEDIDO'
 WHERE  Estado = 'VIGENTE' and CAUSAL_ESTADO = 'SALDADA A PEDIDO';

 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` 
 SET Estado = 'TERMINADA', CAUSAL_ESTADO = 'TERMINO VIGENCIA'
 WHERE  Estado = 'SUSPENDIDA' and CAUSAL_ESTADO = 'TERMINO VIGENCIA';



UPDATE `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POLIZA
SET 
    POLIZA.RAMO = temp.RAMO,
    POLIZA.ID_PERIODO_PAGO = temp.ID_PERIODO_PAGO,
    POLIZA.ID_ESTADO_CAUSAL = temp.ID_ESTADO_CAUSAL,
    POLIZA.ID_ESTADO_POLIZA = temp.ID_ESTADO_POLIZA,
    POLIZA.BASE = temp.BASE,
    POLIZA.COMPANIA = temp.COMPANIA,
    POLIZA.ESTADO_CAUSAL = temp.CAUSAL_ESTADO

FROM `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION` AS temp
WHERE POLIZA.numero_poliza = temp.numero_poliza
  AND POLIZA.id_producto = temp.id_producto;


-- ----------------------------------------------------------------------
-- Paso A10: TABLA POLIZA  ---- fuente 80
-- ----------------------------------------------------------------------
-----------------------EXP_SERV -- LEGACY
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV`
AS
WITH TMP_CONTRATANTE AS (
   SELECT 
        TRIM(ID_PERSONA) AS ID_PERSONA, 
        NUMERO_DOCUMENTO 
   FROM `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE` 
   WHERE NUMERO_DOCUMENTO<>''
   QUALIFY (ROW_NUMBER()OVER(PARTITION BY TRIM(NUMERO_DOCUMENTO) ORDER BY (CASE WHEN ID_TIPO_DOCUMENTO='01' THEN 0
    WHEN ID_TIPO_DOCUMENTO='02' THEN 1
    WHEN ID_TIPO_DOCUMENTO='03' THEN 2
    WHEN ID_TIPO_DOCUMENTO='04' THEN 3
    WHEN ID_TIPO_DOCUMENTO='05' THEN 4
    WHEN ID_TIPO_DOCUMENTO='06' THEN 5
    WHEN ID_TIPO_DOCUMENTO='07' THEN 6
    ELSE 7 END) ASC, FECHA_MODIFICACION DESC))=1
)
SELECT * FROM (
    SELECT DISTINCT
    '80' AS ID_FUENTE, 
    CAST(P.num_poliza AS STRING) AS NUMERO_POLIZA,
    DATE(P.fec_emision_poliza,'America/Lima') AS FECHA_EMISION, 
    TRIM(P.cod_producto) AS ID_PRODUCTO,
    PR.NOMBRE_PRODUCTO,
    PR.ID_GRUPO_PRODUCTO,
    PR.NOMBRE_GRUPO_PRODUCTO,
    EG1.CODIGO_GLOBAL AS ID_MONEDA,
    EG1.NOMBRE_GLOBAL AS MONEDA,
    CAST(P.val_prima_neta AS NUMERIC) AS PRIMA_NETA,
    CAST(P.val_prima_bruta AS NUMERIC) AS PRIMA_TOTAL,
    CAST(P.val_capitalizado AS NUMERIC) AS MONTO_COBERTURA_PRINCIPAL,
    DATE(P.fec_inicio_vigencia,'America/Lima') AS FECHA_INICIO,
    DATE(P.fec_fin_vigencia,'America/Lima') AS FECHA_FIN,
    P.cod_causal_estado_poliza ID_ESTADO_CAUSAL	,
    CASE WHEN TRIM(P.rut_contratante) IS NULL OR TRIM(P.rut_contratante)='' THEN ''
    ELSE COALESCE(CG.ID_PERSONA,CONCAT('01-80-',TRIM(P.rut_contratante))) END AS ID_PERSONA,
     CAST(DATE(P.fec_cierre_poliza ,'America/Lima') AS STRING) AS FECHA_VENTA,
    DATE(P.fec_pagado_hasta,'America/Lima') AS FECHA_ULTIMA_OPERACION,
    CURRENT_DATETIME('America/Lima') AS FECHA_CREACION,
    CURRENT_DATETIME('America/Lima') AS FECHA_MODIFICACION,
    MIN(CASE WHEN P.cod_estado_poliza='04' THEN DATE(P.fec_inicio_estado,'America/Lima')  END)OVER(PARTITION BY P.num_poliza) AS  FECHA_ANULADA,
    MIN(CASE WHEN P.cod_estado_poliza='02'  THEN DATE(P.fec_inicio_estado,'America/Lima')  END)OVER(PARTITION BY P.num_poliza) AS  FECHA_SUSPENDIDA,
    MIN(CASE WHEN P.cod_estado_poliza='03'  THEN DATE(P.fec_inicio_estado,'America/Lima') END )OVER(PARTITION BY P.num_poliza) FECHA_TERMINADO,
    PR.RAMO,
    PR.SUB_RAMO AS SUBRAMO,
    PR.ID_RAMO,
    PR.ID_SUBRAMO,
    -----NUEVOS CAMPOS
    P.cod_periodo_pago ID_PERIODO_PAGO,
    upper(E.gls_corta) FRECUENCIA_PAGO,
   ---  upper(M.gls_corta) MONEDA_V1,
    P.cod_estado_poliza ID_ESTADO_POLIZA,
    upper(T.gls_corta) ESTADO,
    upper(C.gls_larga) ESTADO_CAUSAL,
    CAST(p.num_plan AS STRING) NUMERO_PLAN,
    P.val_periodo_pago_prima AS PERIODO_PAGO,
    'LEGACY' BASE,
    CASE
        WHEN ID_PRODUCTO in 
        ('69343','69344','69345','69346','69347','69348','69349','69350','69351','69352','69353','69354','69355') THEN 'SURA'
        ELSE 'INTER'  END AS COMPANIA
FROM `iter-data-storage-pv-uat.raw_vesta_exp_serv.POLIZA_raw` P
LEFT JOIN TMP_CONTRATANTE CG ON TRIM(P.rut_contratante)=TRIM(CG.NUMERO_DOCUMENTO)
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
          ON EG1.VALOR_ORIGEN        = TRIM(P.mon_poliza)
         AND EG1.ID_FUENTE           = '02'
         AND EG1.CODIGO_TIPO         = 'MONEDA'
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG2 
          ON EG2.VALOR_ORIGEN       =  TRIM(P.cod_periodo_pago)
         AND EG2.CODIGO_TIPO        = 'FRECUENCIAPAGO'	 
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_AGRUPACION_PRODUCTO_RAMO` PR 
          ON PR.ID_PRODUCTO=TRIM(P.cod_producto) 
          AND PR.ID_FUENTE='80' 
          AND PR.ID_SUBRAMO=TRIM(P.cod_subramo) 
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.TAB_CODIGO_raw` E
          ON E.cod_codigo=TRIM(P.cod_periodo_pago) 
          AND lower(E.nom_tabla)='perpag'
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.TAB_CODIGO_raw` C
          ON C.cod_codigo=TRIM(P.cod_causal_estado_poliza) 
          AND lower(C.nom_tabla)='caupol'
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.TAB_CODIGO_raw` T
          ON T.cod_codigo=TRIM(P.cod_estado_poliza) 
          AND lower(T.nom_tabla)='estpol'
LEFT JOIN  `iter-data-storage-pv-uat.raw_vesta_exp_serv.TAB_CODIGO_raw` M
          ON M.cod_codigo=TRIM(P.mon_poliza) 
          AND lower(M.nom_tabla)='moneda'

WHERE P.cod_causal_estado_poliza <>'26'

)
WHERE NUMERO_POLIZA NOT IN (SELECT NUMERO_POLIZA FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` WHERE ID_FUENTE<>'80')

;

----------------------------------------------------------------------------
--ACTUALIZACION
---------------------------------------------------------------------------


 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` A
 SET  A.Estado = 'ANULADA', A.ESTADO_CAUSAL = 'DESISTIMIENTO CLIENTE'
 WHERE A.Estado = 'SUSPENDIDA' and A.ESTADO_CAUSAL = 'ANULADA A PEDIDO';



 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` 
 SET  Estado = 'PRORROGADA', ESTADO_CAUSAL = 'PRORROGADA'
 WHERE Estado = 'VIGENTE' and ESTADO_CAUSAL = 'PRORROGADA';




 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` 
 SET  Estado = 'RESCATADA', ESTADO_CAUSAL = 'RESCATADA'
 WHERE Estado = 'TERMINADA' and ESTADO_CAUSAL = 'RESCATADA';




 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` 
 SET Estado = 'SALDADO', ESTADO_CAUSAL = 'SALDADA A PEDIDO'
 WHERE  Estado = 'VIGENTE' and ESTADO_CAUSAL = 'SALDADA A PEDIDO';

    ---QUINTA ACTUALIZACION:


 UPDATE `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` 
 SET Estado = 'TERMINADA', ESTADO_CAUSAL = 'TERMINO VIGENCIA'
 WHERE  Estado = 'SUSPENDIDA' and ESTADO_CAUSAL = 'TERMINO VIGENCIA';


-- ----------------------------------------------------------------------
-- Eliminar polizas
-- ----------------------------------------------------------------------

DELETE FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` A
      WHERE EXISTS (
        SELECT 1 
         FROM `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV` B 
         WHERE A.NUMERO_POLIZA   =B.NUMERO_POLIZA
         AND A.ID_FUENTE='80'
);

-- ----------------------------------------------------------------------
-- Agregar nuevas polizas
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
 (
ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,MONTO_COBERTURA_PRINCIPAL
,FECHA_INICIO
,FECHA_FIN
,ID_ESTADO_CAUSAL	
,ID_PERSONA
,FECHA_VENTA
,FECHA_ULTIMA_OPERACION
,FECHA_CREACION
,FECHA_MODIFICACION
,FECHA_ANULADA
,FECHA_SUSPENDIDA
,FECHA_TERMINADO
,RAMO
,SUBRAMO
,ID_RAMO
,ID_SUBRAMO
,ID_PERIODO_PAGO
,FRECUENCIA_PAGO
,ID_ESTADO_POLIZA
,ESTADO
,ESTADO_CAUSAL
,NUMERO_PLAN
,PERIODO_PAGO
,BASE
,COMPANIA
) 
SELECT
ID_FUENTE
,NUMERO_POLIZA
,FECHA_EMISION
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,ID_GRUPO_PRODUCTO
,NOMBRE_GRUPO_PRODUCTO
,ID_MONEDA
,MONEDA
,PRIMA_NETA
,PRIMA_TOTAL
,MONTO_COBERTURA_PRINCIPAL
,FECHA_INICIO
,FECHA_FIN
,ID_ESTADO_CAUSAL	
,ID_PERSONA
,FECHA_VENTA
,FECHA_ULTIMA_OPERACION
,FECHA_CREACION
,FECHA_MODIFICACION
,FECHA_ANULADA
,FECHA_SUSPENDIDA
,FECHA_TERMINADO
,RAMO
,SUBRAMO
,ID_RAMO
,ID_SUBRAMO
,ID_PERIODO_PAGO
,FRECUENCIA_PAGO
,ID_ESTADO_POLIZA
,ESTADO
,ESTADO_CAUSAL
,NUMERO_PLAN
,PERIODO_PAGO
,BASE
,COMPANIA
FROM `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV`
;

-- ----------------------------------------------------------------------
-- Eliminar tablas Temporales
-- ----------------------------------------------------------------------
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_VEHICULAR_PLAN`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_FLAG_EMITIDO`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ACSELE`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_CESIONADA`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMODIN`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_UNI`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA_ACSELE`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA2_ACSELE`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA3_ACSELE`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_PRIMAS_ANUALIZADAS` ;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_REEMPLAZO_CEROS`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_SOATVEHICULARRENTA_UNI`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_ACSELE_UNIVERSO`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_ESTADOS_POLIZAS_HOMOLOGADOS` ;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_VIDACASH_POLIZAS_POL`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_ADMWR_POLIZAS_UNI`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIVERSO_GOLDEN_DIFF` ;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COBERTURA`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.POLIZA_ACTUALIZACION`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.POLIZA_EXP_SERV`;
 --DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_RUMBO_POLIZAS_POL`;
 SELECT 'OK' AS EJECUCION;

END;