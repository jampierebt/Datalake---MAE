CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.carga_dv_emision()
OPTIONS(
  strict_mode=true)
BEGIN
/********************************************************************
* Proyecto		   : iter-data-storage-pv-uat 
* Fecha			    : 23 / 12 / 2020
* Autor			    : Bluetab - Edson Huerta G.                               
* Descripción   : Tabla DV_EMISION, que contiene toda la emision a partir de la tabla de poliza               
*********************************************************************
*                       MODIFICACIONES POSTERIORES                  *
*===================================================================*
*=  Fecha   | Persona |           Modificación Realizada           =*
*===================================================================*                                    
* 2021/01/15|T.Ramirez| Se agrega el campo ANIO al data entry  de PORCENTAJE ESTACIONALIDAD
* 2021/01/18|T.Ramirez| En caso el Presupuesto o represupuesto es NULO, considera en  0
*********************************************************************/


/********************************
CNF_PRODUCTO_CANAL_VISTA -- TABLA DE CONDIGURACION PRINCIPAR PARA APERTURA DE VISTA - PRODUCTO - CANAL
**********************************/
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.bi_finanzas.DV_EMISION`
AS
(
/************POLIZA OPERACION --> Contiene la foto de las polizas al momento de su emision*********/
-- NO SE INCLUYE VIDACASH 
-- SE USA PARA OBTENER LA PRIMA ANUALIZADA Y LA COBERTURA DE LOS PRODUCTOS VIDA
WITH TMP_POLIZA_PRIMAPRIMERA AS(
SELECT * 
  FROM 
(
       SELECT 
       NUMERO_POLIZA,
       PRIMA_NETA PRIMA_NETA_OPERACION,
       PRIMA_TOTAL PRIMA_TOTAL_OPERACION,
       IGV,
       ROW_NUMBER()OVER(PARTITION BY NUMERO_POLIZA ORDER BY NUMERO_OPERACION ASC ) CORRELATIVO_ULTIMO
       FROM `iter-data-storage-pv-uat.master_product.POLIZA_OPERACION`
       WHERE DESCRIPCION_EVENTO IN ('EMITIRPROPUESTA','EMITIR','EMITIRRAPIDA','EMITIRMIGRACION')
)
WHERE CORRELATIVO_ULTIMO=1
),
/************Relacion de VISTAS, PRODUCTOS, ETC para productos diferentes a Soat*********/
TMP_PRODUCTO_VISTAS AS(
       SELECT 
              DISTINCT 
              VISTA,NOMBRE_GRUPO_PRODUCTO
              ,NOMBRE_PRODUCTO
              ,VISTA_PRODUCTO
              ,VISTA_PRODUCTO_HOMOLOGADO
              ,DESC_GRUPO_PRODUCTO
              ,NOMBRE_GRUPO_PRODUCTO_HOMOLOGADO
       FROM `iter-data-storage-pv-uat.config_data.CNF_PRODUCTO_CANAL_VISTA` 
       WHERE NOMBRE_GRUPO_PRODUCTO<>'SOAT'
),
/************Relacion de VISTAS, PRODUCTOS, CANAL, ETC para productos de Soat*********/
TMP_PRODUCTO_SOAT_VISTAS AS(
 SELECT  *
   FROM `iter-data-storage-pv-uat.config_data.CNF_PRODUCTO_CANAL_VISTA` 
  WHERE NOMBRE_GRUPO_PRODUCTO='SOAT'
),
POLIZA_TMP AS(

--UNIVERSO DE EMISION CON PRODUCTOS <> SOAT
SELECT
       POL.ID_FUENTE,
       UPPER(CNFF.NOMBRE_FUENTE) NOMBRE_FUENTE,
       CNFPCV.VISTA VISTA_DAILY,
       POL.NUMERO_POLIZA,
       POL.FECHA_EMISION,
       CAST(FORMAT_DATE("%Y%m", POL.FECHA_EMISION) AS INT64) PERIODO_FECHA_EMISION,
       FORMAT_DATE("%Y-%b",POL.FECHA_EMISION) ANIO_MES_EMISION,
       FORMAT_DATE("%Y-%m",POL.FECHA_EMISION) PERIODO_EMISION,
       EXTRACT(MONTH FROM CAST(POL.FECHA_EMISION AS DATE)) NRO_MES_EMISION,
       FORMAT_DATETIME("%B", CAST(POL.FECHA_EMISION AS DATETIME)) MES_LARGO_EMISION,
       POL.ID_PRODUCTO,
       POL.NOMBRE_PRODUCTO,
       POL.NOMBRE_PRODUCTO NOMBRE_PRODUCTO_HOMOLOGADO,
       POL.ID_GRUPO_PRODUCTO,
       POL.NOMBRE_GRUPO_PRODUCTO,
       CNFPCV.VISTA_PRODUCTO,
       CNFPCV.DESC_GRUPO_PRODUCTO,
       CNFPCV.VISTA_PRODUCTO_HOMOLOGADO,
       CNFPCV.NOMBRE_GRUPO_PRODUCTO_HOMOLOGADO,
       POL.ID_MONEDA,
       POL.MONEDA,
       CAST(POL.PRIMA_NETA AS FLOAT64) PRIMA_NETA,
       CAST(POL.PRIMA_TOTAL AS FLOAT64) PRIMA_TOTAL,
       CAST((CASE WHEN PRI.PRIMA_NETA_OPERACION IS NULL THEN POL.PRIMA_NETA ELSE PRI.PRIMA_NETA_OPERACION END) AS FLOAT64) PRIMA_NETA_OPERACION,
       CAST((CASE WHEN PRI.PRIMA_TOTAL_OPERACION IS NULL THEN POL.PRIMA_TOTAL ELSE PRI.PRIMA_TOTAL_OPERACION END) AS FLOAT64) PRIMA_TOTAL_OPERACION,
       POL.VIGENCIA,
       POL.CANAL,
       POL.NOMBRE_COBERTURA,
       CAST(POL.MONTO_COBERTURA_PRINCIPAL AS FLOAT64) MONTO_COBERTURA_PRINCIPAL,
       CAST(POL.MONTO_CUMULO AS FLOAT64) MONTO_CUMULO,
       POL.FECHA_INICIO,
       POL.FECHA_FIN,
       POL.FRECUENCIA_PAGO,
       POL.FECHA_CANCELACION,
       POL.TIPO_PENSION,
       CAST(POL.MONTO_BASE AS FLOAT64) MONTO_BASE,
       CAST(POL.MONTO_ORIGINAL AS FLOAT64) MONTO_ORIGINAL,
       (CASE  WHEN POL.TIPO_PENSION='TITULARES' THEN 'RENTA PRIVADA' WHEN POL.TIPO_PENSION IN ('INVALIDEZ TOTAL','INVALIDEZ PARCIAL','SOBREVIVENCIA','SOBREVIVENCIAS') THEN 'RENTA I&S' WHEN POL.TIPO_PENSION IN ('JUBILACIÓN ANTICIPADA','JUBILACION ANTICIPADA','JUBILACION') THEN 'JUBILACIÓN' ELSE POL.TIPO_PENSION END) TIPO_RENTA,
       POL.ESTADO,
       CNFPC.CANAL_HOMOLOGADO CANAL_AGRUPADO,
       POL.PARTY_ID,
       POL.PLACA,
       POL.CANTIDAD_DIAS,
       POL.CANTIDAD_PASAJERO_ADULTO,
       POL.CANTIDAD_PASAJERO_NINO,
       POL.PLAN,
       POL.ID_DESTINO,
       POL.DESTINO,
       (CASE WHEN CNFPCV.VISTA IS NULL THEN 0 ELSE 1 END) FLG_V_DAILY,
       POL.FECHA_CREACION,
       POL.FECHA_MODIFICACION,
       POL.FECHA_CREACION_REGISTRO,
       POL.FECHA_MODIFICACION_REGISTRO
FROM 
(SELECT * FROM `iter-data-storage-pv-uat.master_product.POLIZA` WHERE NOMBRE_GRUPO_PRODUCTO<>'SOAT') POL 
 LEFT JOIN TMP_PRODUCTO_VISTAS CNFPCV 
        ON POL.NOMBRE_PRODUCTO = CNFPCV.NOMBRE_PRODUCTO 
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_PRODUCTO_CANAL_VISTA` CNFPC 
        ON POL.NOMBRE_PRODUCTO = CNFPC.NOMBRE_PRODUCTO 
       AND POL.CANAL=CNFPC.CANAL 
 LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_FUENTES` CNFF 
        ON POL.ID_FUENTE = CNFF.ID_FUENTE 
 LEFT JOIN TMP_POLIZA_PRIMAPRIMERA PRI 
        ON POL.NUMERO_POLIZA = PRI.NUMERO_POLIZA
UNION ALL
--UNIVERSO DE EMISION CON PRODUCTOS = SOAT
SELECT
       POL.ID_FUENTE,
       UPPER(CNFF.NOMBRE_FUENTE) NOMBRE_FUENTE,
       CNFPC.VISTA VISTA_DAILY,
       POL.NUMERO_POLIZA,
       POL.FECHA_EMISION,
       CAST(FORMAT_DATE("%Y%m", POL.FECHA_EMISION) AS INT64) PERIODO_FECHA_EMISION,
       FORMAT_DATE("%Y-%b",POL.FECHA_EMISION) ANIO_MES_EMISION,
       FORMAT_DATE("%Y-%m",POL.FECHA_EMISION) PERIODO_EMISION,
       EXTRACT(MONTH FROM CAST(POL.FECHA_EMISION AS DATE)) NRO_MES_EMISION,
       FORMAT_DATETIME("%B", CAST(POL.FECHA_EMISION AS DATETIME)) MES_LARGO_EMISION,
       POL.ID_PRODUCTO,
       POL.NOMBRE_PRODUCTO,
       CNFPC.VISTA_PRODUCTO NOMBRE_PRODUCTO_HOMOLOGADO,
       POL.ID_GRUPO_PRODUCTO,
       POL.NOMBRE_GRUPO_PRODUCTO,
       CNFPC.VISTA_PRODUCTO,
       CNFPC.DESC_GRUPO_PRODUCTO,
       CNFPC.VISTA_PRODUCTO_HOMOLOGADO,
       CNFPC.NOMBRE_GRUPO_PRODUCTO_HOMOLOGADO,
       POL.ID_MONEDA,
       POL.MONEDA,
       CAST(POL.PRIMA_NETA AS FLOAT64) PRIMA_NETA,
       CAST(POL.PRIMA_TOTAL AS FLOAT64) PRIMA_TOTAL,
       CAST((CASE WHEN PRI.PRIMA_NETA_OPERACION IS NULL THEN POL.PRIMA_NETA ELSE PRI.PRIMA_NETA_OPERACION END) AS FLOAT64) PRIMA_NETA_OPERACION,
       CAST((CASE WHEN PRI.PRIMA_TOTAL_OPERACION IS NULL THEN POL.PRIMA_TOTAL ELSE PRI.PRIMA_TOTAL_OPERACION END) AS FLOAT64) PRIMA_TOTAL_OPERACION,
       POL.VIGENCIA,
       POL.CANAL,
       POL.NOMBRE_COBERTURA,
       CAST(POL.MONTO_COBERTURA_PRINCIPAL AS FLOAT64) MONTO_COBERTURA_PRINCIPAL,
       CAST(POL.MONTO_CUMULO AS FLOAT64) MONTO_CUMULO,
       POL.FECHA_INICIO,
       POL.FECHA_FIN,
       POL.FRECUENCIA_PAGO,
       POL.FECHA_CANCELACION,
       POL.TIPO_PENSION,
       CAST(POL.MONTO_BASE AS FLOAT64) MONTO_BASE,
       CAST(POL.MONTO_ORIGINAL AS FLOAT64) MONTO_ORIGINAL,
       (CASE  WHEN POL.TIPO_PENSION='TITULARES' THEN 'RENTA PRIVADA' WHEN POL.TIPO_PENSION IN ('INVALIDEZ TOTAL','INVALIDEZ PARCIAL','SOBREVIVENCIA','SOBREVIVENCIAS') 
              THEN 'RENTA I&S' 
              WHEN POL.TIPO_PENSION IN ('JUBILACIÓN ANTICIPADA','JUBILACION ANTICIPADA','JUBILACION') 
              THEN 'JUBILACIÓN' 
              ELSE POL.TIPO_PENSION 
       END) TIPO_RENTA,
       POL.ESTADO,
       CNFPC.CANAL_HOMOLOGADO CANAL_AGRUPADO,
       POL.PARTY_ID,
       POL.PLACA,
       POL.CANTIDAD_DIAS,
       POL.CANTIDAD_PASAJERO_ADULTO,
       POL.CANTIDAD_PASAJERO_NINO,
       POL.PLAN,
       POL.ID_DESTINO,
       POL.DESTINO,
       (CASE WHEN CNFPC.VISTA IS NULL THEN 0 ELSE 1 END) FLG_V_DAILY,
       POL.FECHA_CREACION,
       POL.FECHA_MODIFICACION,
       POL.FECHA_CREACION_REGISTRO,
       POL.FECHA_MODIFICACION_REGISTRO
FROM 
(
       SELECT * 
         FROM `iter-data-storage-pv-uat.master_product.POLIZA` 
        WHERE NOMBRE_GRUPO_PRODUCTO='SOAT'
) POL LEFT JOIN TMP_PRODUCTO_SOAT_VISTAS CNFPC 
             ON POL.NOMBRE_PRODUCTO = CNFPC.NOMBRE_PRODUCTO 
            AND POL.CANAL           =CNFPC.CANAL 
      LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_FUENTES` CNFF 
             ON POL.ID_FUENTE       = CNFF.ID_FUENTE 
      LEFT JOIN TMP_POLIZA_PRIMAPRIMERA PRI 
             ON POL.NUMERO_POLIZA   = PRI.NUMERO_POLIZA
)
,
/**************Tipo de cambio || TOMA EL PRIMER DIA DEL MES(LOGICA PROPORCIONADA POR FREDDY)***************/
tmp_currency_final AS 
(
    SELECT 
    format_date('%Y-%m',cast(fec_inicial_rango as date)) PERIODO
    ,VAL_DATO 
     FROM `iter-data-storage-pv-uat.raw_vesta_exp_serv.VAL_RANFEC_raw` 
    WHERE cod_codigo = '010'
),

/**************COBERTURA ADICIONAL PARA PRODUCTOS VIDA***************/
tmp_cobertura_adicional AS 
(
SELECT NUMERO_POLIZA
      ,SUM(PRIMA_NETA_COBERTURA) AS PRIMA_NETA_COBERTURA
 FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_COBERTURA` S1
WHERE CAST(CODIGO_COBERTURA AS NUMERIC) NOT IN
(
68759,
34019,
34059,
15312,
1,
50217,
15512,
38501,
42540,
42541,
20521,
28596,
68760,
68761
)
GROUP BY numero_poliza
),

/**************PRIMA ANUALIZADA***************/
TMP_PRIMA_ANUALIZADA AS
(
SELECT DISTINCT
    NUMERO_POLIZA,
    ESTADO_POLIZA,
    FECHA_EMISION,
    PRIMA_NETA AS PRIMA_NETA_OPERACION,
    PRIMA_TOTAL PRIMA_TOTAL_OPERACION,
    IGV,
    PRIMA_TOTAL_ANUAL,
    PRIMA_BRUTA_ANUAL,
    IGV_ANUAL
 FROM `iter-data-storage-pv-uat.master_product.POLIZA_OPERACION`
WHERE DESCRIPCION_EVENTO IN ('EMITIRPROPUESTA','EMITIR','EMITIRRAPIDA','EMITIRMIGRACION')
),
/**************DATAENTRY: PRESUPUESTO PARA PRODUCTOS DE VIDA ***************/
tmp_presupuesto_emision as(
SELECT
     GRUPO_PRODUCTO
    ,PRODUCTO
    ,MES
    ,MONTO 
 FROM `iter-data-storage-pv-uat.external_data.DE_PPTO_RPTO_EMISION` 
WHERE TIPO='PRESUPUESTO'
),
/**************DATAENTRY: REPRESUPUESTO PARA PRODUCTOS DE VIDA ***************/
tmp_represupuesto_emision as(
SELECT
     GRUPO_PRODUCTO
    ,PRODUCTO
    ,MES
    ,MONTO 
 FROM `iter-data-storage-pv-uat.external_data.DE_PPTO_RPTO_EMISION`
WHERE TIPO='REPRESUPUESTO'
),
/**************DATAENTRY: PORCENTAJE DE ESTACIONALIDAD PARA PRODUCTOS DE VIDA - LOGICA BASADA EN LOS DIAS HABILES ***************/
TMP_ESTACIONALIDAD AS(
 SELECT
       (CASE WHEN TIPO= 'EMISION_VIDA' THEN 'VIDA' END) TIPO,
       DIAS,
       DIA_HABIL,
       PORCENTAJE,
       PORCENTAJE_ACUMULADO,
       ANIO
  FROM `iter-data-storage-pv-uat.external_data.DE_ESTACIONALIDAD_VIDA`
 WHERE TIPO = 'EMISION_VIDA'
)
--INTEGRACION DE DATOS
SELECT
        DISTINCT
        POL.ID_FUENTE,
        POL.NOMBRE_FUENTE,
        POL.VISTA_DAILY,
        POL.VISTA_PRODUCTO,
        POL.VISTA_PRODUCTO_HOMOLOGADO,
        POL.NOMBRE_GRUPO_PRODUCTO_HOMOLOGADO,
        POL.NUMERO_POLIZA,
        POL.FECHA_EMISION,
        POL.PERIODO_FECHA_EMISION,
        POL.ANIO_MES_EMISION,
        POL.PERIODO_EMISION,
        POL.NRO_MES_EMISION,
        POL.MES_LARGO_EMISION,
        POL.ID_PRODUCTO,
        POL.NOMBRE_PRODUCTO,
        POL.NOMBRE_PRODUCTO_HOMOLOGADO,
        POL.ID_GRUPO_PRODUCTO,
        POL.NOMBRE_GRUPO_PRODUCTO,
        POL.DESC_GRUPO_PRODUCTO,
        POL.ID_MONEDA,
        POL.MONEDA,
        CR.VAL_DATO TIPO_CAMBIO,
        COALESCE(PPTO.MONTO,0)     AS PRESUPUESTO_EMISION,
        COALESCE(RPPTO.MONTO,0)    AS REPRESUPUESTO_EMISION,
        POL.PRIMA_NETA,
        CAST(PA.PRIMA_TOTAL_ANUAL AS FLOAT64) PRIMA_TOTAL_ANUAL,
        CAST(PA.PRIMA_BRUTA_ANUAL AS FLOAT64) PRIMA_BRUTA_ANUAL,
        POL.PRIMA_NETA_OPERACION,
        CAST(CA.PRIMA_NETA_COBERTURA AS FLOAT64) COBERTURA,
        CAST((CASE WHEN POL.ID_MONEDA='01' THEN POL.PRIMA_NETA_OPERACION ELSE (POL.PRIMA_NETA_OPERACION*CR.VAL_DATO) END) AS FLOAT64) PRIMA_NETA_SOLES,
        CAST((CASE WHEN POL.ID_MONEDA='01' THEN POL.PRIMA_NETA_OPERACION ELSE (POL.PRIMA_NETA_OPERACION*CR.VAL_DATO) END) AS FLOAT64) PRIMERA_PRIMA,
        CAST((CASE WHEN POL.ID_MONEDA='02' THEN POL.PRIMA_NETA_OPERACION ELSE (POL.PRIMA_NETA_OPERACION*CR.VAL_DATO) END) AS FLOAT64) PRIMA_NETA_DOLARES,
        POL.PRIMA_TOTAL,
        POL.PRIMA_TOTAL_OPERACION,
        CAST((CASE WHEN POL.ID_MONEDA='01' THEN POL.PRIMA_TOTAL_OPERACION ELSE (POL.PRIMA_TOTAL_OPERACION*CR.VAL_DATO) END) AS FLOAT64) PRIMA_TOTAL_SOLES,
        CAST((CASE WHEN POL.ID_MONEDA='02' THEN POL.PRIMA_TOTAL_OPERACION ELSE (POL.PRIMA_TOTAL_OPERACION*CR.VAL_DATO) END) AS FLOAT64) PRIMA_TOTAL_DOLARES,
        SUI.PORCENTAJE ESTACIONALIDAD_EMISION,
        SUI.PORCENTAJE_ACUMULADO ESTACIONALIDAD_EMISION_AC,
        POL.VIGENCIA,
        POL.CANAL,
        POL.NOMBRE_COBERTURA,
        POL.MONTO_COBERTURA_PRINCIPAL,
        POL.MONTO_CUMULO,
        POL.FECHA_INICIO,
        POL.FECHA_FIN,
        POL.FRECUENCIA_PAGO,
        POL.FECHA_CANCELACION,
        POL.TIPO_PENSION,
        POL.MONTO_BASE,
        POL.MONTO_ORIGINAL,
        POL.TIPO_RENTA,
        POL.ESTADO,
        POL.CANAL_AGRUPADO,
        POL.PARTY_ID,
        POL.PLACA,
        POL.CANTIDAD_DIAS,
        POL.CANTIDAD_PASAJERO_ADULTO,
        POL.CANTIDAD_PASAJERO_NINO,
        POL.PLAN,
        POL.ID_DESTINO,
        POL.DESTINO,
        POL.FLG_V_DAILY,
        POL.FECHA_CREACION,
        POL.FECHA_MODIFICACION,
        POL.FECHA_CREACION_REGISTRO,
        POL.FECHA_MODIFICACION_REGISTRO
     FROM POLIZA_TMP POL 
LEFT JOIN tmp_currency_final CR 
       ON POL.PERIODO_EMISION = CR.PERIODO 
LEFT JOIN tmp_cobertura_adicional CA 
       ON POL.NUMERO_POLIZA = CA.NUMERO_POLIZA 
LEFT JOIN TMP_PRIMA_ANUALIZADA PA 
       ON POL.NUMERO_POLIZA = PA.NUMERO_POLIZA 
LEFT JOIN tmp_presupuesto_emision PPTO 
       ON FORMAT_DATE("%Y%m", POL.FECHA_EMISION)=PPTO.MES 
      --AND POL.NOMBRE_GRUPO_PRODUCTO = PPTO.GRUPO_PRODUCTO 
      AND POL.VISTA_PRODUCTO = PPTO.PRODUCTO 
LEFT JOIN tmp_represupuesto_emision RPPTO 
       ON FORMAT_DATE("%Y%m", POL.FECHA_EMISION)=RPPTO.MES 
      --AND POL.NOMBRE_GRUPO_PRODUCTO = RPPTO.GRUPO_PRODUCTO 
      AND POL.VISTA_PRODUCTO = RPPTO.PRODUCTO 
LEFT JOIN `iter-data-storage-pv-uat.bi_finanzas.DIM_TIEMPO` TIM 
       ON POL.FECHA_EMISION = TIM.DATE 
LEFT JOIN TMP_ESTACIONALIDAD SUI 
       ON TIM.working_day_acum_month      = cast(SUI.DIAS as INT64)
      AND TIM.working_day_acum_date       = SUI.DIA_HABIL
      AND POL.NOMBRE_GRUPO_PRODUCTO       = SUI.TIPO
      AND CAST(TIM.year_number AS STRING) = SUI.ANIO

);

SELECT 'OK' ESTADO_EJECUCION;

END;