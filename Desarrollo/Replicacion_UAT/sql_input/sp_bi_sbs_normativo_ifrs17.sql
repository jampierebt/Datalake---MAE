CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.sp_bi_sbs_normativo_ifrs17(par_periodo INT64)
OPTIONS(
  strict_mode=true)
BEGIN

 /********************************************************************
* Proyecto      : IFRS17
* Fecha         : 15 / 11 / 2023
* Autor         : Jampiere Berrio         
* Descripción   : 
* Ejecuciòn     : Mensual - 8 de cada mes / Reprocesable (evaluando)
*********************************************************************
*                       MODIFICACIONES POSTERIORES                  *
*===================================================================*
*=  Fecha   | Persona |           Modificación Realizada           =*
*===================================================================*/
 
-- ------------------------------------------------------------------------------------
-- VARIABLES UTILIZADAS EN EL PROCESO
-- ------------------------------------------------------------------------------------

DECLARE var_periodo_calendario INT64;
DECLARE var_periodo_calendario_anterior INT64;
DECLARE var_periodo_fin DATE;
DECLARE var_periodo_actual STRING;

IF par_periodo IS NULL THEN

SET var_periodo_calendario = ( SELECT   MAX(CAST(PERIODO AS INT64))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE DATE_SUB(CURRENT_DATE,INTERVAL 8 DAY) BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN ) ;

SET var_periodo_calendario_anterior = ( SELECT   MAX(CAST(PERIODO AS INT64))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE DATE_SUB(CURRENT_DATE,INTERVAL 1 MONTH) BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN ) ;

SET var_periodo_actual = ( SELECT   MAX(CAST(PERIODO_ANIO AS STRING))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE DATE_SUB(CURRENT_DATE,INTERVAL 8 DAY) BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN );    

ELSE 
  
SET var_periodo_calendario = par_periodo ;

SET var_periodo_calendario_anterior = ( SELECT MAX(CAST(PERIODO AS INT64))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE DATE_SUB(PARSE_DATE('%Y%m',CAST(par_periodo AS STRING)), INTERVAL 1 MONTH)BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN ) ;  

SET var_periodo_actual = ( SELECT MAX(CAST(PERIODO_ANIO AS STRING))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE PARSE_DATE('%Y%m',CAST(par_periodo AS STRING)) BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN );

END IF; 

/*==================================================================*/
--                     BYPOL, POLIZA, REASEGURO
/*==================================================================*/

-- ----------------------------------------------------------------------
-- Poliza
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA`
AS
SELECT 
NUMERO_POLIZA
,NOMBRE_GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,FECHA_INICIO
,CASE WHEN CAST(FORMAT_DATE("%Y",FECHA_INICIO) AS INT64) <= 2021 THEN '2021'
      WHEN CAST(FORMAT_DATE("%Y",FECHA_INICIO) AS INT64) > 2021 AND CAST(FORMAT_DATE("%Y",FECHA_INICIO) AS INT64) <= 2024 THEN FORMAT_DATE("%Y",FECHA_INICIO)
      WHEN CAST(FORMAT_DATE("%Y",FECHA_INICIO) AS INT64) > 2024 THEN '2024'
      END AS ANIO
,var_periodo_actual AS ANIO_ACTUAL
,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)) AS  ANIO_2_DELAY
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
WHERE NOMBRE_GRUPO_PRODUCTO <> 'RENTA'
;
-- ----------------------------------------------------------------------
-- Bypol
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_BYPOL`
AS
	SELECT 
	  REPLACE(POL_NUMBER        ,'"','') AS POL_NUMBER
	, REPLACE(ONEROSIDAD        ,'"','') AS ONEROSIDAD
	, REPLACE(IFRS_GRP_UNIQUE_ID,'"','') AS IFRS_GRP_UNIQUE_ID
	, REPLACE(REIN_ONEROSIDAD   ,'"','') AS REIN_ONEROSIDAD
	, REPLACE(PRODUCT           ,'"','') AS PRODUCT
	, FECHA_PROCESO
	, REPLACE(NOMBRE_ARCHIVO    ,'"','') AS NOMBRE_ARCHIVO
	, REPLACE(AGRUPACION        ,'"','') AS AGRUPACION
	FROM `iter-data-storage-pv-uat.inputfiles.BYPOL_raw` 
       WHERE COALESCE(POL_NUMBER,'0') <> '0'
             AND POL_NUMBER IS NOT NULL
	QUALIFY(ROW_NUMBER()OVER(PARTITION BY POL_NUMBER ORDER BY FECHA_PROCESO DESC ))=1 
;
-- ----------------------------------------------------------------------
-- Reaseguro
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_REASEGURO`
AS
SELECT  
NUMERO_POLIZA
,MAX(IF(REASEGURADORA IS NOT NULL, 'SI','NO')) AS FLAG_REASEGURO
FROM (SELECT * FROM `iter-data-storage-pv-uat.inputfiles.REASEGURO_DESGRAVAMEN` 
      WHERE REASEGURADORA IS NOT NULL
      AND PERIODO = CAST(var_periodo_calendario AS STRING)
      UNION ALL
      SELECT * FROM `iter-data-storage-pv-uat.inputfiles.REASEGURO_VIDA`  
      WHERE REASEGURADORA IS NOT NULL
      AND PERIODO = CAST(var_periodo_calendario AS STRING)
     )
GROUP BY NUMERO_POLIZA
;
-- ----------------------------------------------------------------------
-- Opm015
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_OPM015`
AS
SELECT 
CUS_POLIZA AS NUMERO_POLIZA
,CUS_N_SINIESTRO AS NUMERO_SINIESTRO
,CUS_FECHA_REPORTE_CIA AS FECHA_REPORTE_CIA
,CUS_FEC_INICIO_VIG_POLIZA AS FECHA_INICIO
,(CASE WHEN EXTRACT(YEAR FROM CUS_FEC_INICIO_VIG_POLIZA) < 2021 THEN '2021'
       WHEN EXTRACT(YEAR FROM CUS_FEC_INICIO_VIG_POLIZA) > CAST(var_periodo_actual AS INT64) THEN var_periodo_actual
       ELSE FORMAT_DATE("%Y",CUS_FEC_INICIO_VIG_POLIZA) END)  AS ANIO_OPM
FROM `iter-data-storage-pv-uat.master_product.opm015` A 
QUALIFY(ROW_NUMBER()OVER(PARTITION BY CUS_CERTIFICACO,CUS_N_SINIESTRO)) = 1

;
/*==================================================================*/
--                             PRIMAS
/*==================================================================*/

CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_BYPOL`
AS
SELECT 
   CO.NUMERO_POLIZA
  ,CO.NUMERO_POLIZA_HOMOLOGADO
  ,CO.RAMO
  ,CO.SUB_RAMO
  ,CO.CODIGO_PRODUCTO
  ,CO.ID_PRODUCTO
  ,CO.NOMBRE_PRODUCTO
  ,UPPER(CO.GRUPO_PRODUCTO) AS GRUPO_PRODUCTO
  ,CO.CODIGO_CANAL
  ,CO.MONEDA
  ,CO.COD_TIPO_DOCUMENTO_COMPROBANTE AS TIPO_DOCUMENTO_COMPROBANTE
  ,CO.NUMERO_DOCUMENTO
  ,CO.MONEDA_COMPROBANTE
  ,CO.FECHA_INGRESO_COMPROBANTE
  ,CO.RUC
  ,UPPER(CO.CLIENTE) AS CLIENTE
  ,CO.AFECTO
  ,CO.NO_AFECTO
  ,CO.DERECHO_EMISION
  ,CO.INTERES
  ,CO.GASTO
  ,CO.AMORTIZACION_PRESTAMO
  ,CO.OTROS
  ,CO.IGV
  ,CO.TOTAL
  ,CO.SIN_IGV
  ,CO.SOLES
  ,CO.TIPO
  ,CO.ASIENTO_PRODUCCION
  ,CO.PRODUCTO
  ,CO.ID_PLANILLA
  ,CO.TOTAL_CANTIDAD_PLANILLA
  ,CO.TOTAL_MONEDA_PLANILLA
  ,CO.MONTO_RECAUDADO
  ,CO.FECHA_RECAUDACION
  ,CO.NUMERO_OPERACION
  ,CO.CUENTA_BANCARIA
  ,CO.BANCO
  ,CO.NUMERO_RECIBO
  ,CO.SALDO_RECIBO_CAJA
  ,CO.ASIENTO_RECAUDACION
  ,CO.MODO_RECAUDA_DESCRIPCION
  ,CO.ORIGEN_RECAUDA_DESCRIPCION
  ,CO.ESTADO_PLANILLA
  ,CO.ESTADO_COMPROBANTE
  ,CO.ID_COMPROBANTE
  ,CO.TIPO_PRODUCTO
  ,CO.ID_MODO_RECAUDACION
  ,CO.ID_DEPOSITO
  ,CO.IND_ANIADA             
  ,CO.IND_PEN                
  ,CO.IND_USD                
  ,CO.IFRS_GRP	            
  ,CO.ANIADA	                
  ,CO.DESCRIPCION_UOA	    
  ,CO.CLASIFICACION	        
  ,CO.ONEROSIDAD
  ,BP.IFRS_GRP_UNIQUE_ID
FROM `iter-data-storage-pv-uat.bi_sbs.POLIZA_COMPROBANTE_HIST` CO
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BP
       ON BP.POL_NUMBER = CO.NUMERO_POLIZA_HOMOLOGADO
WHERE CO.PERIODO = var_periodo_calendario
;

-- ----------------------------------------------------------------------
-- Solo las que no cruzen con la Bypol
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO`
AS
SELECT 
CO.NUMERO_POLIZA
,CO.NUMERO_POLIZA_HOMOLOGADO
,CO.RAMO
,CO.SUB_RAMO
,CO.CODIGO_PRODUCTO
,CO.ID_PRODUCTO
,CO.NOMBRE_PRODUCTO
,CASE WHEN REGEXP_CONTAINS(CO.GRUPO_PRODUCTO,'OPTATIVOS') THEN 'OPTATIVOS'
      ELSE CO.GRUPO_PRODUCTO END AS GRUPO_PRODUCTO
,CO.CODIGO_CANAL
,CO.MONEDA
,CO.TIPO_DOCUMENTO_COMPROBANTE
,CO.NUMERO_DOCUMENTO
,CO.MONEDA_COMPROBANTE
,CO.FECHA_INGRESO_COMPROBANTE
,CO.RUC
,CO.CLIENTE
,CO.AFECTO
,CO.NO_AFECTO
,CO.DERECHO_EMISION
,CO.INTERES
,CO.GASTO
,CO.AMORTIZACION_PRESTAMO
,CO.OTROS
,CO.IGV
,CO.TOTAL
,CO.SIN_IGV
,CO.SOLES
,CO.TIPO
,CO.ASIENTO_PRODUCCION
,CO.PRODUCTO
,CO.ID_PLANILLA
,CO.TOTAL_CANTIDAD_PLANILLA
,CO.TOTAL_MONEDA_PLANILLA
,CO.MONTO_RECAUDADO
,CO.FECHA_RECAUDACION
,CO.NUMERO_OPERACION
,CO.CUENTA_BANCARIA
,CO.BANCO
,CO.NUMERO_RECIBO
,CO.SALDO_RECIBO_CAJA
,CO.ASIENTO_RECAUDACION
,CO.MODO_RECAUDA_DESCRIPCION
,CO.ORIGEN_RECAUDA_DESCRIPCION
,CO.ESTADO_PLANILLA
,CO.ESTADO_COMPROBANTE
,CO.ID_COMPROBANTE
,CO.TIPO_PRODUCTO
,CO.ID_MODO_RECAUDACION
,CO.ID_DEPOSITO
,POL.FECHA_INICIO
--,CO.IFRS_GRP_UNIQUE_ID
,COALESCE(CO.IFRS_GRP_UNIQUE_ID,
     CASE WHEN CO.GRUPO_PRODUCTO='DESGRAVAMEN' AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO='DESGRAVAMEN' AND CO.IND_ANIADA = 'Año Actual' 
            THEN CONCAT(CO.IFRS_GRP,var_periodo_actual,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL3.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL2.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO IN ('VIDA LEY') AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL2.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO='DESGRAVAMEN TC' AND CO.IND_ANIADA='Año Actual' 
            THEN CONCAT(CO.IFRS_GRP,var_periodo_actual,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO='OPTATIVOS VIDA' AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL2.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.GRUPO_PRODUCTO='OPTATIVOS' AND CO.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(CO.IFRS_GRP,POL4.ANIO,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)            
          WHEN CO.IND_ANIADA = 'Antiguo' 
            THEN CONCAT(CO.IFRS_GRP,CO.ANIADA,CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          WHEN CO.IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(CO.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),CO.DESCRIPCION_UOA,CO.MONEDA,CO.CLASIFICACION,ONEROSIDAD)
          END
    ,CO.IFRS_GRP_UNIQUE_ID) AS IFRS_GRP_UNIQUE_ID      
 FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_BYPOL` CO
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON CO.NUMERO_POLIZA_HOMOLOGADO = POL.NUMERO_POLIZA
       AND POL.NOMBRE_GRUPO_PRODUCTO='DESGRAVAMEN'
       AND CO.IFRS_GRP_UNIQUE_ID IS NULL
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL2
        ON CO.NUMERO_POLIZA_HOMOLOGADO = CAST(SAFE_CAST(POL2.NUMERO_POLIZA AS NUMERIC) AS STRING)
       AND POL2.NOMBRE_GRUPO_PRODUCTO = 'VIDA'
       AND CO.IFRS_GRP_UNIQUE_ID IS NULL
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL3
        ON CO.NUMERO_POLIZA_HOMOLOGADO = CAST(SAFE_CAST(POL3.NUMERO_POLIZA AS NUMERIC) AS STRING)
       AND POL3.NOMBRE_GRUPO_PRODUCTO IN ('SOAT','VEHICULAR')
       AND CO.IFRS_GRP_UNIQUE_ID IS NULL
 LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL4
        ON CO.NUMERO_POLIZA_HOMOLOGADO = CAST(SAFE_CAST(POL4.NUMERO_POLIZA AS NUMERIC) AS STRING)
       AND POL4.NOMBRE_GRUPO_PRODUCTO NOT IN ('DESGRAVAMEN','VIDA','SOAT','VEHICULAR')
       AND CO.IFRS_GRP_UNIQUE_ID IS NULL
 WHERE COALESCE(CO.GRUPO_PRODUCTO,'VACIO') <> 'RENTAS'
;
-- ----------------------------------------------------------------------
-- Distribucion de la prima en unidades de cuenta
-- La prima total por el porcentaje de polizas vigentes en los años
-- correspondientes
-- ----------------------------------------------------------------------

CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_VIGENCIA`
AS
WITH TMP_POLIZAS_ANIO AS ( 
SELECT  
NOMBRE_PRODUCTO
,FORMAT_DATE("%Y",FECHA_INICIO) AS ANIO
,COUNT(DISTINCT NUMERO_POLIZA) AS CANTIDAD_POLIZAS
,CASE WHEN MONEDA ='US DOLAR' THEN 'USD'
      WHEN MONEDA ='NUEVO SOL'THEN 'PEN'
      END AS MONEDA
FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA`
WHERE ESTADO='VIGENTE'
AND FORMAT_DATE("%Y",FECHA_INICIO) IN ('2022','2023','2024')
GROUP BY NOMBRE_PRODUCTO , ANIO , MONEDA
ORDER BY 1 DESC
)
,TMP_LANDING_LIBRO_UOA AS (
SELECT 
ID_PRODUCTO
,REPLACE(NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,MONEDA
,SUM(SIN_IGV) AS PRIMA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO`
WHERE IFRS_GRP_UNIQUE_ID IS NULL
GROUP BY NOMBRE_PRODUCTO,GRUPO_PRODUCTO,MONEDA,ID_PRODUCTO
)
SELECT 
A.NOMBRE_PRODUCTO
,B.ID_PRODUCTO
,B.GRUPO_PRODUCTO
,A.ANIO
,A.MONEDA
,A.CANTIDAD_POLIZAS
,SUM(CANTIDAD_POLIZAS)OVER(PARTITION BY A.NOMBRE_PRODUCTO,A.MONEDA) AS CANTIDAD_TOTAL_PRODUCTO
,ROUND(CANTIDAD_POLIZAS / SUM(CANTIDAD_POLIZAS) OVER(PARTITION BY A.NOMBRE_PRODUCTO,A.MONEDA),2) AS PORCENTAJE_DISTRIBUCION_UOA 
,B.PRIMA
,ROUND(ROUND(CANTIDAD_POLIZAS / SUM(CANTIDAD_POLIZAS) OVER(PARTITION BY A.NOMBRE_PRODUCTO,A.MONEDA),2) * B.PRIMA,2) AS DISTRIBUCION_PRIMA
,CONCAT(UOA.IFRS_GRP,A.ANIO,UOA.DESCRIPCION_UOA,A.MONEDA,UOA.CLASIFICACION,ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
FROM TMP_POLIZAS_ANIO A 
INNER JOIN TMP_LANDING_LIBRO_UOA B
       ON A.NOMBRE_PRODUCTO = B.NOMBRE_PRODUCTO
      AND A.MONEDA = TRIM(B.MONEDA)
INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` UOA
       ON UOA.ID_PRODUCTO = B.ID_PRODUCTO
      AND UPPER(UOA.IND_ANIADA) NOT LIKE  '%DISTRIBUCION%'
;
-- ----------------------------------------------------------------------
-- Distribucion por año y mes
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_ANIO_MES`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,SUM(PRIMA) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PRIMA
,CAST(NULL AS NUMERIC) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
--,TIPO_ASIENTO
FROM (
      SELECT A.NOMBRE_PRODUCTO,A.ID_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
      --,A.TIPO_ASIENTO 
      ,A.SIN_IGV AS PRIMA     
      FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
      UNION ALL
      SELECT A.NOMBRE_PRODUCTO,A.ID_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
   --   ,A.TIPO_ASIENTO
      ,A.SIN_IGV AS PRIMA 
      FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
)
GROUP BY NOMBRE_PRODUCTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,ID_PRODUCTO,GRUPO_PRODUCTO
;
-- ----------------------------------------------------------------------
-- Distribucion de la unidad de de cuenta en base 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_PRIMA`
AS
SELECT 
   NOMBRE_PRODUCTO 
  ,ID_PRODUCTO
  ,GRUPO_PRODUCTO
  ,ANIO
  ,MONEDA
  ,(PRIMA * PORCENTAJE_DISTRIBUCION) AS PRIMA
  ,IFRS_GRP_UNIQUE_ID
FROM (
      SELECT 
	      PC.ID_PRODUCTO
	      ,REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
	      ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_PEN = TRUE THEN 'PEN' END) AS MONEDA
	      ,SUM(PC.SIN_IGV) AS PRIMA
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_PEN=TRUE THEN 'PEN' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.ID_PRODUCTO =PUC.ID_PRODUCTO
       AND PUC.ID_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_PEN=TRUE
	    GROUP BY 1,2,3,4,5,7
	    UNION ALL
	    SELECT 
	      PC.ID_PRODUCTO
	      ,REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
	      ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_USD = TRUE THEN 'USD' END) AS MONEDA
	      ,SUM(PC.SIN_IGV) AS PRIMA
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_USD=TRUE THEN 'USD' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.ID_PRODUCTO =PUC.ID_PRODUCTO
       AND PUC.ID_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_USD=TRUE
	    GROUP BY 1,2,3,4,5,7
) 
;
-- ----------------------------------------------------------------------
-- Universo final de consolidado de distribucion 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA`
AS
SELECT 
ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,CAST(DISTRIBUCION_PRIMA AS NUMERIC) AS SIN_IGV
,IFRS_GRP_UNIQUE_ID
,MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_VIGENCIA` 
WHERE DISTRIBUCION_PRIMA IS NOT NULL
UNION ALL
SELECT 
ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,CAST(PRIMA AS NUMERIC) AS SIN_IGV
,IFRS_GRP_UNIQUE_ID
,MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_ANIO_MES`
UNION ALL
SELECT 
ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,PRIMA AS SIN_IGV
,IFRS_GRP_UNIQUE_ID
,MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_PRIMA`;

-- ----------------------------------------------------------------------
-- Universo final de consolidado de informacion 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO_FINAL`
AS
SELECT 
NUMERO_POLIZA_HOMOLOGADO AS NUMERO_POLIZA
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,MONEDA
,SIN_IGV
,FECHA_INICIO
,IFRS_GRP_UNIQUE_ID
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO`
WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL
UNION ALL 
SELECT 
CAST(NULL AS STRING) AS NUMERO_POLIZA
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,MONEDA
,CAST(SIN_IGV AS NUMERIC) AS SIN_IGV
,NULL AS FECHA_INICIO
,IFRS_GRP_UNIQUE_ID
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA`
;
-- ----------------------------------------------------------------------
-- Reporte de Primas
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE  `iter-data-storage-pv-uat.temp.TMP_REPORTE_PRIMAS`
AS
SELECT 
'PRIMAS' AS NOMBRE_REPORTE
,A.NUMERO_POLIZA	
,0 AS INV_COMP	
,0 AS INS_COMP	
,SIN_IGV AS PRIMA	
,0 AS GASTOS	
,0 AS COSTOS_ADQ	
,IFRS_GRP_UNIQUE_ID	
,CURRENT_DATE('America/Lima') AS FECHA_INICIO
,FECHA_INICIO AS FECHA_INICIO_VIGENCIA
,COALESCE(B.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
,GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO_FINAL` A 
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` B
       ON A.NUMERO_POLIZA = B.NUMERO_POLIZA
      AND COALESCE(A.GRUPO_PRODUCTO,'VACIO') NOT IN ('OPTATIVOS','DESGRAVAMEN TC')
;
/*==================================================================*/
--                            FIN PRIMAS
/*==================================================================*/

/*==================================================================*/
--                      SOBREVIVENCIA Y RESCATES
/*==================================================================*/

-- ----------------------------------------------------------------------
-- Paso 1: Informacion de la cuenta contable de sobrevivencia y rescates
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_MOVIMIENTOS_CONTABLES_SBV_RCT`
AS
SELECT  
FUENTE_ORIGEN
,PERIODO
,RAMO
,CUENTA_CONTABLE
,DESCRIPCION
,ASIENTO
,TIPO_DOCUMENTO
,DOCUMENTO
,REFERENCIA
,ARRAY(SELECT CASE WHEN REGEXP_CONTAINS(REFERENCIA,'Rescate de póliza ') 
                   THEN NUMERO_POLIZA END NUMERO_POLIZA 
       FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS NUMERO_POLIZA)[SAFE_ORDINAL(1)] AS NUMERO_POLIZA
,ARRAY(SELECT CAST(NUMERO_INCIDENTE AS INT64) FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS NUMERO_INCIDENTE)[SAFE_ORDINAL(3)] AS NUMERO_INCIDENTE
,DEBITO_LOCAL 
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,SALDO
,PRODUCTO
,CENTRO_COSTO
,DESCRIPCION_CENTRO_COSTO
,TIPO_ASIENTO
,FECHA
,NIT
,RAZON_SOCIAL
,FUENTE
,NOTAS
,FLUJO_EFECTIVO
,PATRIMONIO_NETO
,PROYECTO_ULTIMUS
,APROBADOR_ULTIMUS
,GASTO_ATRIBUIBLE
,TIPO_COSTO
,FECHA_PROCESO
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST`
WHERE FUENTE_ORIGEN='RESCATES Y SOBREVIVENCIA'
AND PERIODO = var_periodo_calendario 
;
-- ----------------------------------------------------------------------
-- Paso 2: Pagos de el area de operaciones para el producto VIDA y SAC
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC`
AS
(SELECT 
 AREA
,ASUNTO
,IF(NUMERO_POLIZA = '',NULL,NUMERO_POLIZA) AS NUMERO_POLIZA
,NUMERO_INCIDENTE
,ASIENTO
,NUMERO_DOCUMENTO
,FECHA_CREACION
,FECHA_PAGO
,MONEDA_PAGO
,MONTO
,CASE WHEN ESTADO_PAGO = '31 - Registro de Pago Procesado' THEN 'APROBADO'
      WHEN ESTADO_PAGO <> '31 - Registro de Pago Procesado' THEN 'NO APROBADO'
      END AS ESTADO_PAGO_HOMOLOGADO
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_PAGOS_COMPANIA_HIST` 
WHERE CAST(FORMAT_DATE("%Y%m",FECHA_PAGO) AS INT64) = var_periodo_calendario  -- var_periodo_calendario
)
;
-- ----------------------------------------------------------------------
-- Paso 3: Pagos de ultimus y operaciones SAC de un periodo anterior
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC_PASADO`
AS
(SELECT 
 AREA
,ASUNTO
,IF(NUMERO_POLIZA = '',NULL,NUMERO_POLIZA) AS NUMERO_POLIZA
,NUMERO_INCIDENTE
,ASIENTO
,NUMERO_DOCUMENTO
,FECHA_CREACION
,FECHA_PAGO
,MONEDA_PAGO
,MONTO 
,CASE WHEN ESTADO_PAGO = '31 - Registro de Pago Procesado' THEN 'APROBADO'
      WHEN ESTADO_PAGO <> '31 - Registro de Pago Procesado' THEN 'NO APROBADO'
      END AS ESTADO_PAGO_HOMOLOGADO
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_PAGOS_COMPANIA_HIST` 
WHERE CAST(FORMAT_DATE("%Y%m",FECHA_PAGO) AS INT64) = var_periodo_calendario_anterior  -- var_periodo_calendario
)
;
-- ----------------------------------------------------------------------
-- Paso 4: Cruce para encontrar la poliza
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL`
AS
SELECT
 A.FUENTE_ORIGEN
,A.PERIODO
,A.RAMO
,A.CUENTA_CONTABLE
,A.DESCRIPCION
,A.ASIENTO
,A.TIPO_DOCUMENTO
,A.DOCUMENTO
,A.REFERENCIA
,COALESCE(A.NUMERO_POLIZA,B.NUMERO_POLIZA,C.NUMERO_POLIZA) AS NUMERO_POLIZA
,A.NUMERO_INCIDENTE
,A.DEBITO_LOCAL
,A.DEBITO_DOLAR
,A.CREDITO_LOCAL
,A.CREDITO_DOLAR
,A.SALDO
,A.PRODUCTO
,A.CENTRO_COSTO
,A.DESCRIPCION_CENTRO_COSTO
,A.TIPO_ASIENTO
,A.FECHA
,A.NIT
,A.RAZON_SOCIAL
,A.FUENTE
,A.NOTAS
,A.FLUJO_EFECTIVO
,A.PATRIMONIO_NETO
,A.PROYECTO_ULTIMUS
,A.APROBADOR_ULTIMUS
,A.GASTO_ATRIBUIBLE
,A.TIPO_COSTO
,COALESCE(B.MONTO,C.MONTO) AS MONTO_ULTIMUS
,COALESCE(B.ASUNTO,C.ASUNTO) AS ASUNTO
,COALESCE(B.NUMERO_DOCUMENTO,C.NUMERO_DOCUMENTO) AS NUMERO_DOCUMENTO
,COALESCE(B.MONEDA_PAGO,C.MONEDA_PAGO) AS MONEDA_PAGO
,CASE WHEN COALESCE(B.ASUNTO,C.ASUNTO) IS NOT NULL THEN TRUE
      ELSE FALSE END AS FLAG_ENCUENTRA_ULTIMUS_PERIODO_ACTUAL
FROM  `iter-data-storage-pv-uat.temp.TMP_MOVIMIENTOS_CONTABLES_SBV_RCT` A
LEFT JOIN (SELECT DISTINCT NUMERO_POLIZA,NUMERO_INCIDENTE ,ASUNTO,NUMERO_DOCUMENTO,MONEDA_PAGO,MONTO
           FROM `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC`
          ) B 
       ON A.NUMERO_INCIDENTE = B.NUMERO_INCIDENTE
LEFT JOIN (SELECT DISTINCT NUMERO_POLIZA,ASIENTO,ASUNTO,NUMERO_DOCUMENTO,MONEDA_PAGO,MONTO
           FROM `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC`
          ) C
       ON A.ASIENTO = C.ASIENTO
;
-- ----------------------------------------------------------------------
-- Paso 5: Cruze para encontrar la poliza con el periodo pasado
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL_PASADO`
AS
SELECT 
 A.FUENTE_ORIGEN
,A.PERIODO
,A.RAMO
,A.CUENTA_CONTABLE
,A.DESCRIPCION
,A.ASIENTO
,A.TIPO_DOCUMENTO
,A.DOCUMENTO
,A.REFERENCIA
,COALESCE(A.NUMERO_POLIZA,B.NUMERO_POLIZA,C.NUMERO_POLIZA) AS NUMERO_POLIZA
,A.NUMERO_INCIDENTE
,A.DEBITO_LOCAL
,A.DEBITO_DOLAR
,A.CREDITO_LOCAL
,A.CREDITO_DOLAR
,A.SALDO
,A.PRODUCTO
,A.CENTRO_COSTO
,A.DESCRIPCION_CENTRO_COSTO
,A.TIPO_ASIENTO
,A.FECHA
,A.NIT
,A.RAZON_SOCIAL
,A.FUENTE
,A.NOTAS
,A.FLUJO_EFECTIVO
,A.PATRIMONIO_NETO
,A.PROYECTO_ULTIMUS
,A.APROBADOR_ULTIMUS
,A.GASTO_ATRIBUIBLE
,A.TIPO_COSTO
,COALESCE(A.MONTO_ULTIMUS,B.MONTO,C.MONTO) AS MONTO_ULTIMUS
,COALESCE(A.ASUNTO,B.ASUNTO,C.ASUNTO) AS ASUNTO
,COALESCE(A.NUMERO_DOCUMENTO,B.NUMERO_DOCUMENTO,C.NUMERO_DOCUMENTO) AS NUMERO_DOCUMENTO
,COALESCE(A.MONEDA_PAGO,B.MONEDA_PAGO,C.MONEDA_PAGO) AS MONEDA_PAGO
,A.FLAG_ENCUENTRA_ULTIMUS_PERIODO_ACTUAL
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL` A
LEFT JOIN (SELECT DISTINCT NUMERO_POLIZA,NUMERO_INCIDENTE,ASUNTO,NUMERO_DOCUMENTO,MONEDA_PAGO,MONTO
           FROM `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC_PASADO`
          ) B 
       ON A.NUMERO_INCIDENTE = B.NUMERO_INCIDENTE
LEFT JOIN (SELECT DISTINCT NUMERO_POLIZA,ASIENTO,ASUNTO,NUMERO_DOCUMENTO,MONEDA_PAGO,MONTO
           FROM `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC_PASADO`
          ) C
       ON A.ASIENTO = C.ASIENTO
;
-- ----------------------------------------------------------------------
-- Paso 5: Cruze para encontrar la poliza con el periodo pasado
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES`
AS
SELECT 
PAA.FUENTE_ORIGEN
,PAA.PERIODO
,PAA.RAMO
,PAA.CUENTA_CONTABLE
,PAA.DESCRIPCION
,PAA.ASIENTO
,PAA.TIPO_DOCUMENTO
,PAA.DOCUMENTO
,PAA.REFERENCIA
,COALESCE(PAA.NUMERO_POLIZA,PC.NUMERO_POLIZA) AS NUMERO_POLIZA
,PAA.NUMERO_INCIDENTE
,PAA.DEBITO_LOCAL
,PAA.DEBITO_DOLAR
,PAA.CREDITO_LOCAL
,PAA.CREDITO_DOLAR
,PAA.SALDO
,PAA.PRODUCTO
,PAA.CENTRO_COSTO
,PAA.DESCRIPCION_CENTRO_COSTO
,PAA.TIPO_ASIENTO
,PAA.FECHA
,PAA.NIT
,PAA.RAZON_SOCIAL
,PAA.FUENTE
,BYP.IFRS_GRP_UNIQUE_ID
,PAA.ASUNTO
,PAA.MONTO_ULTIMUS
,COALESCE(POL.NOMBRE_GRUPO_PRODUCTO,PC.NOMBRE_GRUPO_PRODUCTO) AS NOMBRE_GRUPO_PRODUCTO
,COALESCE(POL.NOMBRE_PRODUCTO,PC.NOMBRE_PRODUCTO) AS NOMBRE_PRODUCTO
,POL.FECHA_INICIO
,ANIO
,CASE WHEN DESCRIPCION LIKE '%US$%'            THEN 'USD'
      WHEN REGEXP_CONTAINS(DESCRIPCION,' S/')  THEN 'PEN'
      WHEN PAA.MONEDA_PAGO ='DOL'              THEN 'USD'
      WHEN PAA.MONEDA_PAGO ='SOL'              THEN 'PEN' 
      WHEN SPLIT(BYP.IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)] = 'PEN' THEN 'PEN'
      WHEN SPLIT(BYP.IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)] = 'USD' THEN 'USD'
      END AS MONEDA_PAGO
,CASE WHEN SUBSTRING(LPAD(COALESCE(PAA.NUMERO_POLIZA,'999999'),10,'0'),1,3)='059' 
           AND COALESCE(PAA.NUMERO_POLIZA,PC.NUMERO_POLIZA) IS NOT NULL THEN TRUE
      ELSE FALSE END AS FLAG_INDICADOR_SOAT
,CASE WHEN PAA.ASUNTO IN ('RESCATE POLIZA (ACSEL -E)','PAGO DE SOBREVIVENCIA') THEN TRUE
      ELSE FALSE END AS FLAG_INDICADOR_ASUNTO
,CASE WHEN REGEXP_CONTAINS(COALESCE(PAA.NUMERO_POLIZA,PC.NUMERO_POLIZA),'-')  THEN TRUE
      ELSE FALSE END AS FLAG_PRODUCTO_SIC
,CASE WHEN REFERENCIA LIKE '%PAGO VENCIMIENTO%' THEN TRUE
      ELSE FALSE END AS FLAG_PAGO_VENCIMIENTO
,PAA.FLAG_ENCUENTRA_ULTIMUS_PERIODO_ACTUAL
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL_PASADO` PAA
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON SAFE_CAST(PAA.NUMERO_POLIZA AS NUMERIC) = SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC)
LEFT JOIN (SELECT NUMERO_POLIZA,NUMERO_DOCUMENTO,ESTADO,NOMBRE_PRODUCTO,NOMBRE_GRUPO_PRODUCTO
	         FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
	         INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE` CON
	                 ON POL.ID_PERSONA = CON.ID_PERSONA
	         WHERE ESTADO='RESCATADA'
	         AND NOMBRE_GRUPO_PRODUCTO='VIDA' 
          ) PC
       ON PC.NUMERO_DOCUMENTO = PAA.NUMERO_DOCUMENTO
      AND PAA.NUMERO_POLIZA IS NULL
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP
       ON CAST(SAFE_CAST(COALESCE(PAA.NUMERO_POLIZA,PC.NUMERO_POLIZA) AS NUMERIC) AS STRING) = BYP.POL_NUMBER 
      AND BYP.AGRUPACION='VIDA'
;
-- ----------------------------------------------------------------------
-- Paso 6: Cruze para encontrar la poliza con el periodo pasado
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RESCATES_UOA`
AS
SELECT 
A.NUMERO_POLIZA
,A.CUENTA_CONTABLE
,DESCRIPCION
,ASIENTO
,TIPO_DOCUMENTO
,DOCUMENTO
,REFERENCIA
,DEBITO_LOCAL
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,SALDO
,PRODUCTO
,CENTRO_COSTO
,DESCRIPCION_CENTRO_COSTO
,FUENTE_ORIGEN
,RAMO
,TIPO_ASIENTO
,FECHA
,NIT
,RAZON_SOCIAL
,FUENTE
,ASUNTO
,MONEDA_PAGO
,ANIO
--,NOMBRE_GRUPO_PRODUCTO
--,NOMBRE_PRODUCTO
,DTB.NOMBRE_PRODUCTO
,DTB.GRUPO_PRODUCTO
--,DTB.IFRS_GRP	            
--,DTB.IND_ANIADA	                 
--,DTB.DESCRIPCION_UOA	    
--,DTB.CLASIFICACION	        
--,DTB.ONEROSIDAD  
,COALESCE(A.IFRS_GRP_UNIQUE_ID,
     CASE WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA LEY') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN TC' AND DTB.IND_ANIADA='Año Actual' 
            THEN CONCAT(DTB.IFRS_GRP,var_periodo_actual,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS VIDA' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)            
          WHEN DTB.IND_ANIADA = 'Antiguo' 
            THEN CONCAT(DTB.IFRS_GRP,DTB.ANIADA,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(DTB.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DTB.DESCRIPCION_UOA
	     ,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          END) AS IFRS_GRP_UNIQUE_ID 
,FECHA_INICIO
,FLAG_INDICADOR_SOAT
,FLAG_PAGO_VENCIMIENTO
,FLAG_ENCUENTRA_ULTIMUS_PERIODO_ACTUAL
,MONTO_ULTIMUS
FROM `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES` A
LEFT JOIN (SELECT DISTINCT 
	        NOMBRE_PRODUCTO
	        ,GRUPO_PRODUCTO
		      ,IFRS_GRP
	        ,IND_ANIADA
		      ,DESCRIPCION_UOA
		      ,CLASIFICACION
	    	  ,ONEROSIDAD
          ,IND_PEN                
	        ,IND_USD
		      ,ANIADA
	        FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`  
	        WHERE UPPER(IND_ANIADA) NOT LIKE '%DISTRIBUCION%'
			          AND GRUPO_PRODUCTO='VIDA INDIVIDUAL'
                AND ID_PRODUCTO IS NOT NULL
          QUALIFY(ROW_NUMBER()OVER(PARTITION BY ID_PRODUCTO)) = 1
         ) DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(A.NOMBRE_PRODUCTO,CASE WHEN A.FLAG_PRODUCTO_SIC =TRUE THEN 'SIC'END)
;
-- ----------------------------------------------------------------------
-- Paso 8: Bloque de ultimus
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS`
AS
SELECT 
ASUNTO
,PUO.NUMERO_POLIZA
,PUO.ASIENTO
,POL.ANIO 
,PUO.MONTO
,COALESCE(POL.NOMBRE_GRUPO_PRODUCTO,PC.NOMBRE_GRUPO_PRODUCTO) AS NOMBRE_GRUPO_PRODUCTO
,COALESCE(POL.NOMBRE_PRODUCTO,PC.NOMBRE_PRODUCTO) AS NOMBRE_PRODUCTO
,POL.FECHA_INICIO
,CASE WHEN PUO.MONEDA_PAGO = 'DOL' THEN 'USD'
      ELSE 'PEN' END AS MONEDA_PAGO
,BMV.IFRS_GRP_UNIQUE_ID
,CASE WHEN SUBSTRING(LPAD(COALESCE(PUO.NUMERO_POLIZA,'999999'),10,'0'),1,3)='059' 
           AND COALESCE(PUO.NUMERO_POLIZA,PC.NUMERO_POLIZA) IS NOT NULL THEN TRUE
      ELSE FALSE END AS FLAG_INDICADOR_SOAT
,CASE WHEN REGEXP_CONTAINS(PUO.NUMERO_POLIZA,'-')  THEN TRUE
      ELSE FALSE END AS FLAG_PRODUCTO_SIC
,PUO.MONTO AS MONTO_ULTIMUS
FROM `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC` PUO
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BMV
       ON BMV.POL_NUMBER = CAST(SAFE_CAST(PUO.NUMERO_POLIZA AS NUMERIC) AS STRING)
      AND BMV.AGRUPACION='VIDA'
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON SAFE_CAST(PUO.NUMERO_POLIZA AS NUMERIC) = SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC)
LEFT JOIN (SELECT NUMERO_POLIZA,NOMBRE_PRODUCTO,NOMBRE_GRUPO_PRODUCTO
	    FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
	    INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE` CON
	            ON POL.ID_PERSONA = CON.ID_PERSONA
	    WHERE ESTADO='RESCATADA'
	    AND NOMBRE_GRUPO_PRODUCTO='VIDA' 
          ) PC
       ON CAST(SAFE_CAST(PC.NUMERO_POLIZA AS NUMERIC) AS STRING)= CAST(SAFE_CAST(PUO.NUMERO_POLIZA AS NUMERIC) AS STRING)
WHERE ASIENTO  NOT IN (SELECT ASIENTO FROM `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RESCATES_UOA`
                       WHERE FLAG_ENCUENTRA_ULTIMUS_PERIODO_ACTUAL = TRUE
                             AND FLAG_INDICADOR_SOAT = FALSE
                             AND FLAG_PAGO_VENCIMIENTO = FALSE
                             AND IFRS_GRP_UNIQUE_ID IS NOT NULL
                      )
;
-- ----------------------------------------------------------------------
-- 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS_FINAL`
AS
SELECT 
A.ASUNTO
,A.NUMERO_POLIZA
,A.ASIENTO
,A.ANIO
,A.MONTO
,A.NOMBRE_GRUPO_PRODUCTO
,A.NOMBRE_PRODUCTO
,A.FECHA_INICIO
,A.MONEDA_PAGO
,A.MONTO_ULTIMUS
,COALESCE(A.IFRS_GRP_UNIQUE_ID,
     CASE WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA LEY') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN TC' AND DTB.IND_ANIADA='Año Actual' 
            THEN CONCAT(DTB.IFRS_GRP,var_periodo_actual,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS VIDA' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,A.ANIO,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)            
          WHEN DTB.IND_ANIADA = 'Antiguo' 
            THEN CONCAT(DTB.IFRS_GRP,DTB.ANIADA,DTB.DESCRIPCION_UOA,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          WHEN DTB.IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(DTB.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DTB.DESCRIPCION_UOA
	     ,A.MONEDA_PAGO,DTB.CLASIFICACION,ONEROSIDAD)
          END) AS IFRS_GRP_UNIQUE_ID 
FROM `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS` A
LEFT JOIN (SELECT DISTINCT 
	       NOMBRE_PRODUCTO
	       ,GRUPO_PRODUCTO
		     ,IFRS_GRP
	       ,IND_ANIADA
		     ,DESCRIPCION_UOA
		     ,CLASIFICACION
		     ,ONEROSIDAD
         ,IND_PEN                
	       ,IND_USD
		     ,ANIADA
	        FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`  
	        WHERE UPPER(IND_ANIADA) NOT LIKE '%DISTRIBUCION%'
			          AND GRUPO_PRODUCTO='VIDA INDIVIDUAL'
                AND ID_PRODUCTO IS NOT NULL
          QUALIFY(ROW_NUMBER()OVER(PARTITION BY ID_PRODUCTO)) = 1
         ) DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(A.NOMBRE_PRODUCTO,CASE WHEN A.FLAG_PRODUCTO_SIC =TRUE THEN 'SIC'END)
WHERE FLAG_INDICADOR_SOAT =FALSE
AND COALESCE(A.NOMBRE_GRUPO_PRODUCTO,'SOAT') NOT IN ('SOAT','VEHICULAR')
;
-- ----------------------------------------------------------------------
-- 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RECATES_TOTAL`
AS
SELECT 
NUMERO_POLIZA
,ASIENTO
,DEBITO_LOCAL
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,ASUNTO
,MONEDA_PAGO
,ANIO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO
,MONTO_ULTIMUS
,DESCRIPCION
FROM `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RESCATES_UOA`
WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL
AND FLAG_INDICADOR_SOAT = FALSE
--AND ASUNTO IS NOT NULL
AND NUMERO_POLIZA IS NOT NULL
AND FLAG_PAGO_VENCIMIENTO =FALSE
UNION ALL 
SELECT 
NUMERO_POLIZA
,ASIENTO
,MONTO AS DEBITO_LOCAL
,MONTO AS DEBITO_DOLAR
,NULL AS CREDITO_LOCAL
,NULL AS CREDITO_DOLAR
,ASUNTO
,MONEDA_PAGO 
,ANIO
,NOMBRE_PRODUCTO
,NULL AS GRUPO_PRODUCTO
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO
,MONTO_ULTIMUS
,NULL AS DESCRIPCION

FROM `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS_FINAL`
;

-- ----------------------------------------------------------------------
-- 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_REPORTE_SOBREVIVENCIA_RESCATES`
AS
SELECT 
CASE WHEN ASUNTO LIKE '%RESCATE%' THEN 'RESCATE'
     WHEN DESCRIPCION LIKE '%RES%' THEN 'RESCATE'
     WHEN DESCRIPCION LIKE 'RETIRO%' THEN 'RESCATE'
     ELSE 'SOBREVIVENCIA' END AS NOMBRE_REPORTE
,A.NUMERO_POLIZA	
,0 AS INV_COMP		
,IF( (CASE WHEN MONEDA_PAGO ='USD' THEN CREDITO_DOLAR * -1
          WHEN MONEDA_PAGO ='PEN' THEN CREDITO_LOCAL * -1
		      END) <> 0   AND ASUNTO = 'RESCATE POLIZA (ACSEL -E)'
		 ,(CASE WHEN MONEDA_PAGO ='USD' THEN CREDITO_DOLAR * -1
            WHEN MONEDA_PAGO ='PEN' THEN CREDITO_LOCAL * -1
		        END)	 
		 ,(CASE WHEN MONEDA_PAGO ='USD' THEN DEBITO_DOLAR
            WHEN MONEDA_PAGO ='PEN' THEN DEBITO_LOCAL
		        END) 
		) AS INS_COMP
,CAST(NULL AS NUMERIC) AS PRIMA
,COALESCE(IF( (CASE WHEN MONEDA_PAGO ='USD' THEN CREDITO_DOLAR * -1
          WHEN MONEDA_PAGO ='PEN' THEN CREDITO_LOCAL * -1
		      END) <> 0   -- AND ASUNTO <> 'RESCATE POLIZA (ACSEL -E)'
		 ,(CASE WHEN MONEDA_PAGO ='USD' THEN CREDITO_DOLAR * -1
            WHEN MONEDA_PAGO ='PEN' THEN CREDITO_LOCAL * -1
		        END)	 
		 ,(CASE WHEN MONEDA_PAGO ='USD' THEN DEBITO_DOLAR
            WHEN MONEDA_PAGO ='PEN' THEN DEBITO_LOCAL
		        END) 
		),MONTO_ULTIMUS) AS GASTOS 	
,0 AS COSTOS_ADQ	
,IFRS_GRP_UNIQUE_ID	
--,CAST('45139.0' AS STRING) AS FECHA_INICIO --??  Funciona como la fecha de proceso
,CURRENT_DATE('America/Lima') AS FECHA_INICIO
,FECHA_INICIO AS FECHA_INICIO_VIGENCIA
,COALESCE(B.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
,GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,CASE WHEN MONEDA_PAGO = 'DOL' THEN 'USD' ELSE 'PEN' END AS MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RECATES_TOTAL` A
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` B
       ON A.NUMERO_POLIZA = B.NUMERO_POLIZA
;
/*==================================================================*/
--                  FIN SOBREVIVENCIA Y RESCATES
/*==================================================================*/

/*==================================================================*/
--                      FACTURACION MANUAL
/*==================================================================*/

--------------------------------------------------------------------
-- Facturacion Manual
--------------------------------------------------------------------
CREATE OR REPLACE TABLE`iter-data-storage-pv-uat.temp.TMP_FACTURACION_MANUAL_UOA`
AS
WITH TMP_LANDING AS (
SELECT 
PERIODO
,CASE WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \|Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REPLACE(REPLACE(TRIM(REFERENCIA),'Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,'|')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima \(\d{2}/\d{2}/\d{4}-\d{2}/\d{2}/\d{4}\) Poliza: \d+') = TRUE 
      THEN ARRAY(SELECT REPLACE(REPLACE(REFERENCIA,' Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,')')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+ - [a-zA-Z0-9\s]+') = TRUE 
           OR REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+-[a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ Poliza \d+\s[a-zA-Z0-9\s]+ [a-zA-Z]+\s\d{4}') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      END AS NUMERO_POLIZA
,CUENTA_CONTABLE
,ASIENTO
,DEBITO_LOCAL
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,SALDO
,DESCRIPCION_CENTRO_COSTO
,ARRAY(SELECT REPLACE(DESCRIPCION_CENTRO_COSTO,' ','') FROM UNNEST(SPLIT(DESCRIPCION_CENTRO_COSTO,'-')) AS DESCRIPCION_CENTRO_COSTO)[SAFE_ORDINAL(2)] AS DESCRIPCION_CENTRO_COSTO_SPLIT
,TIPO_ASIENTO
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST`
WHERE PERIODO = var_periodo_calendario
AND FUENTE_ORIGEN = 'PRIMAS'
AND TIPO_ASIENTO ='FACTURACION MANUAL'
AND RAMO <> '21'
UNION ALL
SELECT 
PERIODO
,CASE WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \|Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REPLACE(REPLACE(TRIM(REFERENCIA),'Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,'|')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima \(\d{2}/\d{2}/\d{4}-\d{2}/\d{2}/\d{4}\) Poliza: \d+') = TRUE 
      THEN ARRAY(SELECT REPLACE(REPLACE(REFERENCIA,' Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,')')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+ - [a-zA-Z0-9\s]+') = TRUE 
           OR REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+-[a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ Poliza \d+\s[a-zA-Z0-9\s]+ [a-zA-Z]+\s\d{4}') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      END AS NUMERO_POLIZA
,CUENTA_CONTABLE
,ASIENTO
,DEBITO_LOCAL
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,SALDO
,DESCRIPCION_CENTRO_COSTO
,ARRAY(SELECT REPLACE(DESCRIPCION_CENTRO_COSTO,' ','') FROM UNNEST(SPLIT(DESCRIPCION_CENTRO_COSTO,'-')) AS DESCRIPCION_CENTRO_COSTO)[SAFE_ORDINAL(2)] AS DESCRIPCION_CENTRO_COSTO_SPLIT
,TIPO_ASIENTO
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST`
WHERE PERIODO=var_periodo_calendario
AND FUENTE_ORIGEN = 'PRIMAS'
AND TIPO_ASIENTO='PRIMA COASEGURO'
AND SUBSTRING(ASIENTO,1,2)='02'
)
SELECT 
A.PERIODO
,A.NUMERO_POLIZA
--,BYP.IFRS_GRP_UNIQUE_ID
,POL.FECHA_INICIO
,COALESCE(POL.NOMBRE_PRODUCTO,DESCRIPCION_CENTRO_COSTO_SPLIT) AS NOMBRE_PRODUCTO
,DTB.GRUPO_PRODUCTO
,COALESCE(REA.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
,A.DESCRIPCION_CENTRO_COSTO
,COALESCE(BYP.IFRS_GRP_UNIQUE_ID,
     CASE WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,COALESCE(POL.ANIO,var_periodo_actual),DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA LEY') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN TC' AND DTB.IND_ANIADA='Año Actual' 
            THEN CONCAT(DTB.IFRS_GRP,var_periodo_actual,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS VIDA' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)            
          WHEN DTB.IND_ANIADA = 'Antiguo' 
            THEN CONCAT(DTB.IFRS_GRP,DTB.ANIADA,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(DTB.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DTB.DESCRIPCION_UOA
	     ,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          END,CONCAT(CUC.IFRS_GRP,var_periodo_actual,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD)
          ) AS IFRS_GRP_UNIQUE_ID
--,CUC.DESCRIPCION_CENTRO_COSTO
,A.CUENTA_CONTABLE
,A.ASIENTO
,A.DEBITO_LOCAL
,A.DEBITO_DOLAR
,A.CREDITO_LOCAL
,A.CREDITO_DOLAR
,A.SALDO
,A.TIPO_ASIENTO
FROM TMP_LANDING A 
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP
       ON A.NUMERO_POLIZA = BYP.POL_NUMBER 
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` REA
       ON A.NUMERO_POLIZA = REA.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON A.NUMERO_POLIZA = CAST(SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC) AS STRING)
      AND POL.NOMBRE_GRUPO_PRODUCTO = 'VIDA'
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(POL.NOMBRE_PRODUCTO,DESCRIPCION_CENTRO_COSTO_SPLIT)
      AND DTB.IND_ANIADA NOT LIKE '%DISTRIBUCION%'
      AND DTB.ID_PRODUCTO IS NOT NULL
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
       ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
      AND CUC.IND_ANIADA ='uniforme'
;
--------------------------------------------------------------------
-- Polizas con sus montos y unidades en el formato 090
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_FACTURACION_MANUAL_UOA`
AS
SELECT 
COALESCE(NUMERO_POLIZA,'820000') AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,COALESCE(IF( (CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN CREDITO_DOLAR 
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN CREDITO_LOCAL 
		        END) <> 0
		 ,(CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN CREDITO_DOLAR 
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN CREDITO_LOCAL 
		        END)	 
		 ,(CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN DEBITO_DOLAR * -1
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN DEBITO_LOCAL * -1
		        END) 
		),SALDO) AS PRIMA
,CAST(NULL AS NUMERIC) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO AS FECHA_INICIO_VIGENCIA
,FLAG_REASEGURO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)] IN('PEN','USD') THEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]
      ELSE 'PEN' END AS MONEDA
,TIPO_ASIENTO
FROM `iter-data-storage-pv-uat.temp.TMP_FACTURACION_MANUAL_UOA`
WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL 
;
--------------------------------------------------------------------
-- Distribucion de la prima en base al CECO
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_FACTURACION_MANUAL_UOA`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,DESCRIPCION_CENTRO_COSTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,SUM(PRIMA) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PRIMA
,CAST(NULL AS NUMERIC) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
,TIPO_ASIENTO
FROM (
      SELECT A.DESCRIPCION_CENTRO_COSTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              ),SALDO) AS PRIMA     
      FROM `iter-data-storage-pv-uat.temp.TMP_FACTURACION_MANUAL_UOA` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
             ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
            AND CUC.IND_ANIADA = 'distribucion'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
      UNION ALL
      SELECT A.DESCRIPCION_CENTRO_COSTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL *-1
		                      END) 
		              ),SALDO) AS PRIMA 
      FROM `iter-data-storage-pv-uat.temp.TMP_FACTURACION_MANUAL_UOA` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
             ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
            AND CUC.IND_ANIADA = 'distribucion'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
)
GROUP BY DESCRIPCION_CENTRO_COSTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,TIPO_ASIENTO
;

--------------------------------------------------------------------
-- Unificamos
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_REPORTE_FACTURACION_MANUAL`
AS
SELECT 
var_periodo_calendario AS PERIODO
,TIPO_ASIENTO AS NOMBRE_REPORTE
,NUMERO_POLIZA
,INV_COMP
,INS_COMP
,PRIMA
,GASTOS
,COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO
,FECHA_INICIO_VIGENCIA
,FLAG_REASEGURO
,GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,MONEDA 
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_FACTURACION_MANUAL_UOA`
UNION ALL
SELECT 
var_periodo_calendario AS PERIODO
,TIPO_ASIENTO AS NOMBRE_REPORTE
,NUMERO_POLIZA
,INV_COMP
,INS_COMP
,PRIMA
,GASTOS
,COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO
,FECHA_INICIO_VIGENCIA
,FLAG_REASEGURO
,NULL AS GRUPO_PRODUCTO
,NULL AS NOMBRE_PRODUCTO
,MONEDA 
FROM `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_FACTURACION_MANUAL_UOA`
;

/*==================================================================*/
--                     FIN FACTURACION MANUAL
/*==================================================================*/

/*==================================================================*/
--                       PROVICION DE PRIMA
/*==================================================================*/

--------------------------------------------------------------------
-- Provicion de Prima
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PROVICION_PRIMA_UOA`
AS
WITH TMP_LANDING AS (
SELECT 
PERIODO
,CASE WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \| Poliza \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
           OR REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ \|Poliza: \d+ \| Cobertura: [a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REPLACE(REPLACE(TRIM(REFERENCIA),'Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,'|')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima \(\d{2}/\d{2}/\d{4}-\d{2}/\d{2}/\d{4}\) Poliza: \d+') = TRUE 
      THEN ARRAY(SELECT REPLACE(REPLACE(REFERENCIA,' Poliza: ',''),'Poliza ','') AS REFERENCIA FROM UNNEST(SPLIT(REFERENCIA,')')) AS REFERENCIA)[SAFE_ORDINAL(2)]
      WHEN REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+ - [a-zA-Z0-9\s]+') = TRUE 
           OR REGEXP_CONTAINS(trim(REFERENCIA), r'Prima Poliza \d+-[a-zA-Z0-9\s]+') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      WHEN REGEXP_CONTAINS(TRIM(REFERENCIA), r'Prima [a-zA-Z0-9\s]+ Poliza \d+\s[a-zA-Z0-9\s]+ [a-zA-Z]+\s\d{4}') = TRUE
      THEN ARRAY(SELECT REFERENCIA FROM UNNEST(REGEXP_EXTRACT_ALL(REFERENCIA, r'\d+')) AS REFERENCIA)[SAFE_ORDINAL(1)] 
      END AS NUMERO_POLIZA
,CUENTA_CONTABLE
,ASIENTO
,DEBITO_LOCAL
,DEBITO_DOLAR
,CREDITO_LOCAL
,CREDITO_DOLAR
,SALDO
,DESCRIPCION_CENTRO_COSTO
,ARRAY(SELECT REPLACE(DESCRIPCION_CENTRO_COSTO,' ','') FROM UNNEST(SPLIT(DESCRIPCION_CENTRO_COSTO,'-')) AS DESCRIPCION_CENTRO_COSTO)[SAFE_ORDINAL(2)] AS DESCRIPCION_CENTRO_COSTO_SPLIT
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST`
WHERE PERIODO = var_periodo_calendario
AND FUENTE_ORIGEN = 'PRIMAS'
AND TIPO_ASIENTO='PROVICION PRIMA'
)
SELECT 
A.PERIODO
,A.NUMERO_POLIZA
--,BYP.IFRS_GRP_UNIQUE_ID
,POL.FECHA_INICIO
,COALESCE(POL.NOMBRE_PRODUCTO,CUC.NOMBRE_PRODUCTO,DESCRIPCION_CENTRO_COSTO_SPLIT) AS NOMBRE_PRODUCTO
,DTB.GRUPO_PRODUCTO
,COALESCE(REA.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
,A.DESCRIPCION_CENTRO_COSTO
,COALESCE(BYP.IFRS_GRP_UNIQUE_ID,
     CASE WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,COALESCE(POL.ANIO,var_periodo_actual),DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO IN ('VIDA LEY') AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='DESGRAVAMEN TC' AND DTB.IND_ANIADA='Año Actual' 
            THEN CONCAT(DTB.IFRS_GRP,var_periodo_actual,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS VIDA' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.GRUPO_PRODUCTO='OPTATIVOS' AND DTB.IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(DTB.IFRS_GRP,POL.ANIO,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)            
          WHEN DTB.IND_ANIADA = 'Antiguo' 
            THEN CONCAT(DTB.IFRS_GRP,DTB.ANIADA,DTB.DESCRIPCION_UOA,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          WHEN DTB.IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(DTB.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DTB.DESCRIPCION_UOA
	     ,'PEN',DTB.CLASIFICACION,DTB.ONEROSIDAD)
          END,CONCAT(CUC.IFRS_GRP,var_periodo_actual,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD)
          ) AS IFRS_GRP_UNIQUE_ID
--,CUC.DESCRIPCION_CENTRO_COSTO
,A.CUENTA_CONTABLE
,A.ASIENTO
,A.DEBITO_LOCAL
,A.DEBITO_DOLAR
,A.CREDITO_LOCAL
,A.CREDITO_DOLAR
,A.SALDO
FROM TMP_LANDING A 
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP
       ON A.NUMERO_POLIZA = BYP.POL_NUMBER 
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` REA
       ON A.NUMERO_POLIZA = REA.NUMERO_POLIZA
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON A.NUMERO_POLIZA = CAST(SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC) AS STRING)
      AND POL.NOMBRE_GRUPO_PRODUCTO = 'VIDA'
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(POL.NOMBRE_PRODUCTO,DESCRIPCION_CENTRO_COSTO_SPLIT)
      AND DTB.IND_ANIADA NOT LIKE '%DISTRIBUCION%'
      AND DTB.ID_PRODUCTO IS NOT NULL
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
       ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
      AND CUC.IND_ANIADA IN ('uniforme','distribucion prima')
;
--------------------------------------------------------------------
-- Polizas con sus montos y unidades en el formato 090
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_PROVICION_PRIMA_UOA`
AS
SELECT 
COALESCE(NUMERO_POLIZA,'820000') AS NUMERO_POLIZA
,'PROVISION' AS NOMBRE_REPORTE
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,COALESCE(IF( (CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN CREDITO_DOLAR 
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN CREDITO_LOCAL 
		                END) <> 0
		         ,(CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN CREDITO_DOLAR 
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN CREDITO_LOCAL 
		                END)	 
		         ,(CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='USD' THEN DEBITO_DOLAR * -1
                    WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]  ='PEN' THEN DEBITO_LOCAL * -1
		        END) 
		),SALDO) AS PRIMA
,CAST(NULL AS NUMERIC) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO AS FECHA_INICIO_VIGENCIA
,CURRENT_DATE("America/Lima") AS FECHA_INICIO
,FLAG_REASEGURO
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,CASE WHEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)] IN('PEN','USD') THEN SPLIT(IFRS_GRP_UNIQUE_ID,'_')[OFFSET(5)]
      ELSE 'PEN' END AS MONEDA
FROM `iter-data-storage-pv-uat.temp.TMP_PROVICION_PRIMA_UOA`
WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL 
;
--------------------------------------------------------------------
-- Distribucion en base a la prima en unidad de cuenta
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PROVICION_UOA`
AS
WITH TMP_PRIMAS AS (
SELECT 
NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,IFRS_GRP_UNIQUE_ID
,MONEDA
,SUM(PRIMA)OVER(PARTITION BY NOMBRE_PRODUCTO ) AS TOTAL_PRIMA
,PRIMA / SUM(PRIMA)OVER(PARTITION BY NOMBRE_PRODUCTO ) AS PORCENTAJE_DISTRIBUCION_PRIMA
FROM (SELECT 
      NOMBRE_PRODUCTO
      ,GRUPO_PRODUCTO
      ,IFRS_GRP_UNIQUE_ID
      ,SUM(PRIMA) AS PRIMA
      ,MONEDA
      FROM `iter-data-storage-pv-uat.temp.TMP_REPORTE_PRIMAS`
      GROUP BY NOMBRE_PRODUCTO,GRUPO_PRODUCTO,IFRS_GRP_UNIQUE_ID,MONEDA
      )
ORDER BY NOMBRE_PRODUCTO DESC
)
,TMP_BASE_PROVISION_CECO AS (
SELECT 
'820000' AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,SUM(TD.PRIMA) AS PRIMA
,CAST(NULL AS NUMERIC) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
,TD.NOMBRE_PRODUCTO
FROM (
      SELECT A.DESCRIPCION_CENTRO_COSTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,CUC.MONEDA
      ,CUC.NOMBRE_PRODUCTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              ),SALDO) AS PRIMA     
      FROM `iter-data-storage-pv-uat.temp.TMP_PROVICION_PRIMA_UOA` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
              ON TRIM(REPLACE(CUC.DESCRIPCION_CENTRO_COSTO,' ','')) = REPLACE(A.DESCRIPCION_CENTRO_COSTO ,' ','')
             AND CUC.IND_ANIADA = 'distribucion prima'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
) TD
GROUP BY MONEDA,TD.NOMBRE_PRODUCTO
)
SELECT
TD.NUMERO_POLIZA
,'PROVISION' AS NOMBRE_REPORTE
,TD.INV_COMP
,TD.INS_COMP
,TRP.NOMBRE_PRODUCTO
,TD.PRIMA
,TD.GASTOS
,TD.COSTOS_ADQ
,TRP.IFRS_GRP_UNIQUE_ID
,TD.FECHA_INICIO_VIGENCIA
,TD.FLAG_REASEGURO
,TRP.MONEDA
,TRP.GRUPO_PRODUCTO
,TRP.PORCENTAJE_DISTRIBUCION_PRIMA
,CURRENT_DATE("America/Lima") AS FECHA_INICIO
,TD.PRIMA * TRP.PORCENTAJE_DISTRIBUCION_PRIMA / IF(TRP.MONEDA='USD',MTC.MONTO_TIPO_CAMBIO,1) AS PRIMA_DISTRIBUIDA
FROM TMP_BASE_PROVISION_CECO TD
INNER JOIN TMP_PRIMAS TRP
       ON TRP.NOMBRE_PRODUCTO = TD.NOMBRE_PRODUCTO
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.TIPO_CAMBIO_IFRS17` MTC
       ON MTC.PERIODO = var_periodo_calendario
;

--------------------------------------------------------------------
-- Provision de Primas
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PROVISION_PRIMAS_UNV`
AS
SELECT 
   NOMBRE_REPORTE
  ,NUMERO_POLIZA
  ,INV_COMP
  ,INS_COMP
  ,PRIMA
  ,GASTOS
  ,COSTOS_ADQ
  ,IFRS_GRP_UNIQUE_ID
  ,FECHA_INICIO
  ,FECHA_INICIO_VIGENCIA
  ,FLAG_REASEGURO
  ,GRUPO_PRODUCTO
  ,NOMBRE_PRODUCTO
  ,MONEDA 
FROM  `iter-data-storage-pv-uat.temp.TMP_POLIZA_PROVICION_PRIMA_UOA`
UNION ALL
SELECT 
   NOMBRE_REPORTE
  ,NUMERO_POLIZA
  ,INV_COMP
  ,INS_COMP
  ,PRIMA_DISTRIBUIDA AS PRIMA
  ,GASTOS
  ,COSTOS_ADQ
  ,IFRS_GRP_UNIQUE_ID
  ,FECHA_INICIO
  ,FECHA_INICIO_VIGENCIA
  ,FLAG_REASEGURO
  ,GRUPO_PRODUCTO
  ,NOMBRE_PRODUCTO
  ,MONEDA 
FROM  `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PROVICION_UOA`
;

/*==================================================================*/
--                      FIN PROVICION
/*==================================================================*/

/*==================================================================*/
--                           SINIESTROS
/*==================================================================*/
--------------------------------------------------------------------
-- Distribucion de la prima de coaseguro en los siniestros MC
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_AGRUPADOS`
AS
SELECT 
PERIODO
,NOMBRE_REPORTE
,TIPO_PAGO
,NUMERO_SINIESTRO
,CASE WHEN MONEDA= 'US DOLAR' THEN 'USD'
      WHEN MONEDA= 'NUEVO SOL' THEN 'PEN'
	  ELSE MONEDA END AS MONEDA
,MONTO
,NOMBRE_PRODUCTO
,NOMBRE_ASEGURADO
,GLS_COBERTURA
,NUMERO_CERTIFICADO
,FECHA_OCURRENCIA_SINIESTRO
,ANIO
,NUMERO_POLIZA
,FECHA_INICIO_VIGENCIA
,FECHA_REPORTE_CIA
,CECO
,SCOR
,MUNICH
,GEN_RE
,HANNOVER
,NAVIGATORS
,RGA
,MONTO_TIPO_CAMBIO
,FECHA_PROCESO
,NOMBRE_BENEFICIARIO
,CANAL
,AGENCIA
,CLASE
,TIPO
,NOMBRE_PROVEEDOR
FROM (
		SELECT  
		PERIODO
		,'SINIESTRO_DESGRAVAMEN' AS NOMBRE_REPORTE
		,TIPO_PAGO
		,NUMERO_SINIESTRO
		,MONEDA
		,MONTO
		,NOMBRE_PRODUCTO
		,NOMBRE_ASEGURADO
		,GLS_COBERTURA
		,NUMERO_CERTIFICADO
		,FECHA_OCURRENCIA_SINIESTRO
		,ANIO
		,NUMERO_POLIZA
		,FECHA_INICIO_VIGENCIA
		,FECHA_REPORTE_CIA
		,CECO
		,SCOR
		,MUNICH
		,GEN_RE
		,HANNOVER
		,NAVIGATORS
		,RGA
		,MONTO_TIPO_CAMBIO
		,FECHA_PROCESO
		,NULL AS NOMBRE_BENEFICIARIO
		,NULL AS CANAL
		,NULL AS AGENCIA
		,NULL AS CLASE
		,NULL AS TIPO
		,NULL AS NOMBRE_PROVEEDOR
		FROM `iter-data-storage-pv-uat.inputfiles.SINIESTRO_DESGRAVAMEN` 
		UNION ALL 
		SELECT 
		PERIODO
		,'SINIESTRO_OPTATIVOS' AS NOMBRE_REPORTE
		,TIPO_PAGO
		,NUMERO_SINIESTRO
		,MONEDA
		,MONTO
		,NOMBRE_PRODUCTO
		,NOMBRE_ASEGURADO
		,GLS_COBERTURA
		,NULL AS NUMERO_CERTIFICADO
		,FECHA_OCURRENCIA_SINIESTRO
		,ANIO
		,NUMERO_POLIZA
		,FECHA_INICIO_VIGENCIA
		,FECHA_REPORTE_CIA
		,CECO
		,NULL AS SCOR
		,NULL AS MUNICH
		,NULL AS GEN_RE
		,NULL AS HANNOVER
		,NULL AS NAVIGATORS
		,NULL AS RGA
		,NULL AS MONTO_TIPO_CAMBIO
		,FECHA_PROCESO    
		,NULL AS NOMBRE_BENEFICIARIO
		,NULL AS CANAL
		,NULL AS AGENCIA
		,NULL AS CLASE
		,NULL AS TIPO
		,NULL AS NOMBRE_PROVEEDOR
		FROM `iter-data-storage-pv-uat.inputfiles.SINIESTRO_OPTATIVO`
		UNION ALL
		SELECT 
		PERIODO
		,'SINIESTRO_BENEFICIARIO' AS NOMBRE_REPORTE
		,NULL AS TIPO_PAGO
		,NUMERO_SINIESTRO
		,NULL AS MONEDA
		,MONTO
		,NULL AS NOMBRE_PRODUCTO
		,NULL AS NOMBRE_ASEGURADO
		,NULL AS GLS_COBERTURA
		,NULL AS NUMERO_CERTIFICADO
		,NULL AS FECHA_OCURRENCIA_SINIESTRO
		,NULL AS ANIO
		,NUMERO_POLIZA
		,NULL AS FECHA_INICIO_VIGENCIA
		,NULL AS FECHA_REPORTE_CIA
		,NULL AS CECO
		,NULL AS SCOR
		,NULL AS MUNICH
		,NULL AS GEN_RE
		,NULL AS HANNOVER
		,NULL AS NAVIGATORS
		,NULL AS RGA
		,NULL AS MONTO_TIPO_CAMBIO
		,FECHA_PROCESO    
		,NOMBRE_BENEFICIARIO
		,CANAL
		,AGENCIA
		,CLASE
		,TIPO
		,NULL AS NOMBRE_PROVEEDOR
		FROM `iter-data-storage-pv-uat.inputfiles.SINIESTRO_BENEFICIARIO`
		UNION ALL
		SELECT 
		PERIODO
		,'SINIESTRO_PROVEEDOR' AS NOMBRE_REPORTE
		,NULL AS TIPO_PAGO
		,NUMERO_SINIESTRO
		,NULL AS MONEDA
		,MONTO
		,NULL AS NOMBRE_PRODUCTO
		,NULL AS NOMBRE_ASEGURADO
		,NULL AS GLS_COBERTURA
		,NULL AS NUMERO_CERTIFICADO
		,NULL AS FECHA_OCURRENCIA_SINIESTRO
		,NULL AS ANIO
		,NUMERO_POLIZA
		,NULL AS FECHA_INICIO_VIGENCIA
		,NULL AS FECHA_REPORTE_CIA
		,NULL AS CECO
		,NULL AS SCOR
		,NULL AS MUNICH
		,NULL AS GEN_RE
		,NULL AS HANNOVER
		,NULL AS NAVIGATORS
		,NULL AS RGA
		,NULL AS MONTO_TIPO_CAMBIO
		,FECHA_PROCESO    
		,NULL AS NOMBRE_BENEFICIARIO
		,CANAL
		,AGENCIA
		,CLASE
		,TIPO
		,NOMBRE_PROVEEDOR
		FROM `iter-data-storage-pv-uat.inputfiles.SINIESTRO_PROVEEDOR`
		UNION ALL
		SELECT 
		PERIODO
		,'SINIESTRO_VIDA' AS NOMBRE_REPORTE
		,NULL AS TIPO_PAGO
		,NUMERO_SINIESTRO
		,MONEDA
		,MONTO
		,NOMBRE_PRODUCTO
		,NOMBRE_ASEGURADO
		,GLS_COBERTURA
		,NULL AS NUMERO_CERTIFICADO
		,FECHA_OCURRENCIA_SINIESTRO
		,ANIO
		,NUMERO_POLIZA
		,FECHA_INICIO_VIGENCIA
		,FECHA_REPORTE_CIA
		,CECO
		,NULL AS SCOR
		,NULL AS MUNICH
		,NULL AS GEN_RE
		,NULL AS HANNOVER
		,NULL AS NAVIGATORS
		,NULL AS RGA
		,NULL AS MONTO_TIPO_CAMBIO
		,FECHA_PROCESO    
		,NULL AS NOMBRE_BENEFICIARIO
		,NULL AS CANAL
		,NULL AS AGENCIA
		,NULL AS CLASE
		,NULL AS TIPO
		,NULL AS NOMBRE_PROVEEDOR
		FROM `iter-data-storage-pv-uat.inputfiles.SINIESTRO_VIDA`
)
WHERE PERIODO=CAST(var_periodo_calendario AS STRING)
;
--------------------------------------------------------------------
-- Distribucion de la prima de coaseguro en los siniestros MC
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_COASEGURO_SINIESTRO`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,'COASEGURO' AS GRUPO_PRODUCTO
,CAST(NULL AS NUMERIC) AS INV_COMP
,CAST(NULL AS NUMERIC) AS INS_COMP
,DESCRIPCION_CENTRO_COSTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,CAST(NULL AS NUMERIC)  AS PRIMA
,SUM(PRIMA) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
,TIPO_ASIENTO
FROM (
      SELECT A.DESCRIPCION_CENTRO_COSTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              )*-1,SALDO) AS PRIMA     
      FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
             ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
            AND CUC.IND_ANIADA = 'distribucion'
      WHERE FUENTE_ORIGEN='SINIESTROS COASEGUROS' AND PERIODO=var_periodo_calendario
      UNION ALL
      SELECT A.DESCRIPCION_CENTRO_COSTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              )*-1,SALDO) AS PRIMA 
      FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.CECO_UNIDAD_CUENTA` CUC
             ON CUC.DESCRIPCION_CENTRO_COSTO = A.DESCRIPCION_CENTRO_COSTO 
            AND CUC.IND_ANIADA = 'distribucion'
      WHERE FUENTE_ORIGEN='SINIESTROS COASEGUROS' AND PERIODO=var_periodo_calendario
)
GROUP BY DESCRIPCION_CENTRO_COSTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,TIPO_ASIENTO
;
--------------------------------------------------------------------
-- Prima de siniestros de vehicular con UOA
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PRODUCTO_VEHICULAR_SINIESTRO`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,GRUPO_PRODUCTO
,CAST(NULL AS NUMERIC) AS INV_COMP
,(SUM(PRIMA) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2))) * MAX(ROUND(PRODUCTO_DISTRIBUCION_INS_COM,2))  AS INS_COMP
,NOMBRE_PRODUCTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,CAST(NULL AS NUMERIC)  AS PRIMA
,SUM(PRIMA) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
,TIPO_ASIENTO
FROM (
      SELECT CUC.NOMBRE_PRODUCTO,CUC.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,CUC.PORCENTAJE_DISTRIBUCION AS PRODUCTO_DISTRIBUCION_INS_COM 
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              )*-1,SALDO) AS PRIMA     
      FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST` A 
      CROSS JOIN (SELECT A.* , 'USD' AS MONEDA
                  FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` A 
                  WHERE NOMBRE_PRODUCTO ='VEHICULAR' 
                        AND IND_ANIADA ='distribucion año'
                        AND ID_PRODUCTO IS  NULL
                 ) CUC
      WHERE FUENTE_ORIGEN='SINIESTROS VEHICULAR' AND PERIODO=var_periodo_calendario
      UNION ALL
      SELECT CUC.NOMBRE_PRODUCTO,CUC.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,CUC.PORCENTAJE_DISTRIBUCION AS PRODUCTO_DISTRIBUCION_INS_COM 
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,CUC.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,CUC.MONEDA
      ,A.TIPO_ASIENTO
      ,COALESCE(IF( (CASE WHEN CUC.MONEDA ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END) <> 0
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.CREDITO_DOLAR 
                          WHEN CUC.MONEDA  ='PEN' THEN A.CREDITO_LOCAL 
		                      END)	 
		               ,(CASE WHEN CUC.MONEDA  ='USD' THEN A.DEBITO_DOLAR * -1
                          WHEN CUC.MONEDA  ='PEN' THEN A.DEBITO_LOCAL * -1
		                      END) 
		              )*-1,SALDO) AS PRIMA 
      FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST` A 
      CROSS JOIN (SELECT A.* , 'USD' AS MONEDA
                  FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` A 
                  WHERE NOMBRE_PRODUCTO ='VEHICULAR' 
                        AND IND_ANIADA ='distribucion año'
                        AND ID_PRODUCTO IS NULL
                 ) CUC
      WHERE FUENTE_ORIGEN='SINIESTROS VEHICULAR' AND PERIODO = var_periodo_calendario
)
GROUP BY NOMBRE_PRODUCTO,GRUPO_PRODUCTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,TIPO_ASIENTO
;

--------------------------------------------------------------------
-- Prima de siniestros UOA - varios
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA`
AS
WITH TMP_LANDING AS (
SELECT 
A.NOMBRE_REPORTE
,A.TIPO_PAGO
,A.NUMERO_SINIESTRO
,A.NUMERO_POLIZA
,A.NUMERO_CERTIFICADO
,MONTO
,COALESCE(MONEDA,CASE WHEN COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO)='SOAT' THEN 'PEN'
                      WHEN COALESCE(DTB.GRUPO_PRODUCTO,DTBC.GRUPO_PRODUCTO,IF(A.NOMBRE_REPORTE='SINIESTRO_PROVEEDOR','SOAT',NULL)) ='SOAT'
                      THEN 'PEN' END) AS MONEDA
,COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) AS NOMBRE_PRODUCTO
,COALESCE(IF( COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) = 'SOAT', POL.FECHA_INICIO,NULL),OPM.FECHA_INICIO,OPM2.FECHA_INICIO) AS FECHA_INICIO
,COALESCE(IF( COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) = 'SOAT',POL.ANIO,NULL ), OPM.ANIO_OPM,OPM2.ANIO_OPM ) AS ANIO
,DTB.IFRS_GRP
,DTB.ANIADA
,DTB.DESCRIPCION_UOA
,DTB.CLASIFICACION
,DTB.ONEROSIDAD
,DTB.IND_ANIADA
,COALESCE(DTB.GRUPO_PRODUCTO,DTBC.GRUPO_PRODUCTO,(CASE WHEN A.NOMBRE_REPORTE='SINIESTRO_PROVEEDOR'   THEN'SOAT'
                                                       WHEN A.NOMBRE_REPORTE='SINIESTRO_BENEFICIARIO'THEN'SOAT'
                                                       WHEN A.NOMBRE_REPORTE='SINIESTRO_OPTATIVOS' THEN 'OPTATIVOS' END )) AS GRUPO_PRODUCTO
,CASE WHEN DTB.GRUPO_PRODUCTO='SURA' THEN 'SURA'
      WHEN DTB.GRUPO_PRODUCTO='VIDA LEY' THEN 'VIDA LEY'
      WHEN A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO') THEN 'SOAT'
      ELSE REPLACE(NOMBRE_REPORTE,'SINIESTRO_','') END AS GRUPO_PRODUCTO_REPORTE
,COALESCE(BYP.IFRS_GRP_UNIQUE_ID,BYP2.IFRS_GRP_UNIQUE_ID) AS IFRS_GRP_UNIQUE_ID
,COALESCE(A.FECHA_REPORTE_CIA,OPM.FECHA_REPORTE_CIA,OPM2.FECHA_REPORTE_CIA) AS FECHA_REPORTE_CIA
,COALESCE(TR.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_AGRUPADOS` A
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON A.NUMERO_POLIZA = CAST(SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC) AS STRING)
LEFT JOIN (SELECT DISTINCT NOMBRE_PRODUCTO,GRUPO_PRODUCTO,IFRS_GRP,	ANIADA,	DESCRIPCION_UOA	,CLASIFICACION,	ONEROSIDAD,IND_ANIADA
           FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`
           WHERE IND_ANIADA <> 'distribucion'
          ) DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO,IF(A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO'),'SOAT',NULL))
LEFT JOIN (SELECT DISTINCT NOMBRE_PRODUCTO,GRUPO_PRODUCTO --,IFRS_GRP,	ANIADA,	DESCRIPCION_UOA	,CLASIFICACION,	ONEROSIDAD,IND_ANIADA
           FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`
           WHERE IND_ANIADA = 'distribucion'
          ) DTBC
       ON DTBC.NOMBRE_PRODUCTO = COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO,IF(A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO'),'SOAT',NULL))      
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP
       ON BYP.POL_NUMBER = A.NUMERO_POLIZA
      AND A.NOMBRE_REPORTE = 'SINIESTRO_VIDA'
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP2
       ON BYP2.POL_NUMBER = A.NUMERO_CERTIFICADO
      AND A.NOMBRE_REPORTE = 'SINIESTRO_DESGRAVAMEN'
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_OPM015` OPM 
       ON A.NUMERO_SINIESTRO = OPM.NUMERO_SINIESTRO
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_OPM015` OPM2 
       ON A.NUMERO_SINIESTRO = CAST(SAFE_CAST(OPM2.NUMERO_SINIESTRO AS INT64) AS STRING)
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` TR
       ON TR.NUMERO_POLIZA = A.NUMERO_POLIZA
)
SELECT 
NOMBRE_REPORTE
,TIPO_PAGO
,NUMERO_SINIESTRO
,NUMERO_POLIZA
,NUMERO_CERTIFICADO
,MONTO
,CASE WHEN FECHA_REPORTE_CIA BETWEEN PARSE_DATE('%Y%m',CAST(var_periodo_calendario AS STRING)) 
           AND LAST_DAY(PARSE_DATE('%Y%m',CAST(var_periodo_calendario AS STRING))) THEN MONTO
      ELSE 0 END AS MONTO_RANGO_CIA  
,MONEDA
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,GRUPO_PRODUCTO_REPORTE
,FECHA_REPORTE_CIA
,FECHA_INICIO
,FLAG_REASEGURO
,ANIO
,IFRS_GRP
,DESCRIPCION_UOA
,CLASIFICACION
,ONEROSIDAD
,IND_ANIADA
,COALESCE(IFRS_GRP_UNIQUE_ID,
     CASE WHEN GRUPO_PRODUCTO='DESGRAVAMEN' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VIDA LEY') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='DESGRAVAMEN TC' AND IND_ANIADA='Año Actual' 
            THEN CONCAT(IFRS_GRP,var_periodo_actual,DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='DESGRAVAMEN' AND IND_ANIADA='Año Actual' 
            THEN CONCAT(IFRS_GRP,var_periodo_actual,DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='OPTATIVOS VIDA' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='OPTATIVOS' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)            
          WHEN IND_ANIADA = 'Antiguo' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIADA,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DESCRIPCION_UOA
	     ,MONEDA,CLASIFICACION,ONEROSIDAD)
          END) AS IFRS_GRP_UNIQUE_ID 
FROM TMP_LANDING
;
-- ----------------------------------------------------------------------
-- Distribucion de la unidad de de cuenta en base 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_PRIMA`
AS
SELECT 
   NOMBRE_PRODUCTO 
  --,ID_PRODUCTO
  ,GRUPO_PRODUCTO
  ,PORCENTAJE_DISTRIBUCION
  ,ANIO
  ,MONEDA
  ,(INS_COMP * PORCENTAJE_DISTRIBUCION) AS INS_COMP
  ,(GASTOS * PORCENTAJE_DISTRIBUCION)   AS GASTOS
  ,IFRS_GRP_UNIQUE_ID
FROM (
      SELECT 
	      REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
        ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_PEN = TRUE THEN 'PEN' END) AS MONEDA
	      ,SUM(PC.MONTO) AS GASTOS
        ,SUM(PC.MONTO_RANGO_CIA) AS INS_COMP
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_PEN=TRUE THEN 'PEN' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.NOMBRE_PRODUCTO =PUC.NOMBRE_PRODUCTO
       AND PUC.NOMBRE_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_PEN=TRUE
	    GROUP BY 1,2,3,4,7
	    UNION ALL
	    SELECT 
	      REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
        ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_USD = TRUE THEN 'USD' END) AS MONEDA
        ,SUM(PC.MONTO_RANGO_CIA) AS INS_COMP
	      ,SUM(PC.MONTO) AS GASTOS
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_USD=TRUE THEN 'USD' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.NOMBRE_PRODUCTO =PUC.NOMBRE_PRODUCTO
       AND PUC.NOMBRE_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_USD=TRUE
	    GROUP BY 1,2,3,4,7
) 
;
-- ----------------------------------------------------------------------
-- Distribucion por año y mes
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_ANIO_MES`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,SUM(INS_COMP) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS INS_COMP
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,CAST(NULL AS NUMERIC) AS PRIMA
,SUM(GASTOS) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2))  AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
FROM (
      SELECT A.NOMBRE_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
      ,A.MONTO AS GASTOS     
      ,A.MONTO_RANGO_CIA AS INS_COMP
      FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA`A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
      UNION ALL
      SELECT A.NOMBRE_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
      ,A.MONTO AS GASTOS 
      ,A.MONTO_RANGO_CIA AS INS_COMP
      FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
)
GROUP BY NOMBRE_PRODUCTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,GRUPO_PRODUCTO
;
-- ----------------------------------------------------------------------
-- Distribucion por año y mes
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_VARIOS`
AS
SELECT
		 NOMBRE_REPORTE
		,NUMERO_POLIZA
		,ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,CASE WHEN GRUPO_PRODUCTO IN ('OPTATIVOS' ,'DESGRAVAMEN','DESGRAVAMEN TC','VIDA INDIVIDUAL','SOAT','VEHICULAR') THEN INS_COMP 
          WHEN GRUPO_PRODUCTO IN ('VIDA LEY') THEN GASTOS END AS INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,FLAG_REASEGURO
FROM (
 		SELECT 
		'SINIESTROS' AS NOMBRE_REPORTE
		,NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO_REPORTE AS GRUPO_PRODUCTO
		,MONTO_RANGO_CIA AS INS_COMP
		,MONTO AS GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA`
		WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL
		UNION ALL 
		SELECT 
		'SINIESTROS' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_PRIMA`
		UNION ALL 
		SELECT 
		'SINIESTROS' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA 
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_ANIO_MES`
		UNION ALL
		SELECT 
		'SINIESTROS' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NULL NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,NULL AS INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA 
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_COASEGURO_SINIESTRO`
		UNION ALL
		SELECT 
		'SINIESTROS' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NULL NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA 
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PRODUCTO_VEHICULAR_SINIESTRO`L
)
;
/*==================================================================*/
--                           FIN SINIESTROS
/*==================================================================*/

/*==================================================================*/
--                          PROCESO - 042
/*==================================================================*/
--------------------------------------------------------------------
-- Prima de siniestros UOA - varios
--------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042`
AS
WITH TMP_LANDING AS (
SELECT 
A.NOMBRE_REPORTE
--,A.TIPO_PAGO
,A.NUMERO_SINIESTRO
,A.NUMERO_POLIZA
,A.NUMERO_CERTIFICADO
,A.INVESMENT AS MONTO
,COALESCE(MONEDA,CASE WHEN COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO)='SOAT' THEN 'PEN'
                      WHEN COALESCE(DTB.GRUPO_PRODUCTO,DTBC.GRUPO_PRODUCTO,IF(A.NOMBRE_REPORTE='SINIESTRO_PROVEEDOR','SOAT',NULL)) ='SOAT'
                      THEN 'PEN' END) AS MONEDA
,COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) AS NOMBRE_PRODUCTO
,COALESCE(IF( COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) = 'SOAT', POL.FECHA_INICIO,NULL),OPM.FECHA_INICIO,OPM2.FECHA_INICIO) AS FECHA_INICIO
,COALESCE(IF( COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO) = 'SOAT',POL.ANIO,NULL ), OPM.ANIO_OPM,OPM2.ANIO_OPM ) AS ANIO
,DTB.IFRS_GRP
,DTB.ANIADA
,DTB.DESCRIPCION_UOA
,DTB.CLASIFICACION
,DTB.ONEROSIDAD
,DTB.IND_ANIADA
,COALESCE(DTB.GRUPO_PRODUCTO,DTBC.GRUPO_PRODUCTO,(CASE WHEN A.NOMBRE_REPORTE='SINIESTRO_PROVEEDOR'   THEN'SOAT'
                                                       WHEN A.NOMBRE_REPORTE='SINIESTRO_BENEFICIARIO'THEN'SOAT'
                                                       WHEN A.NOMBRE_REPORTE='SINIESTRO_OPTATIVOS' THEN 'OPTATIVOS' END )) AS GRUPO_PRODUCTO
,CASE WHEN DTB.GRUPO_PRODUCTO='SURA' THEN 'SURA'
      WHEN DTB.GRUPO_PRODUCTO='VIDA LEY' THEN 'VIDA LEY'
      WHEN A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO') THEN 'SOAT'
      ELSE REPLACE(NOMBRE_REPORTE,'SINIESTRO_','') END AS GRUPO_PRODUCTO_REPORTE
,COALESCE(BYP.IFRS_GRP_UNIQUE_ID,BYP2.IFRS_GRP_UNIQUE_ID) AS IFRS_GRP_UNIQUE_ID
,COALESCE(A.FECHA_REPORTE_CIA,OPM.FECHA_REPORTE_CIA,OPM2.FECHA_REPORTE_CIA) AS FECHA_REPORTE_CIA
,COALESCE(TR.FLAG_REASEGURO,'NO') AS FLAG_REASEGURO
--FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_AGRUPADOS` A
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_IFRS17_042` A
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA` POL
       ON A.NUMERO_POLIZA = CAST(SAFE_CAST(POL.NUMERO_POLIZA AS NUMERIC) AS STRING)
LEFT JOIN (SELECT DISTINCT NOMBRE_PRODUCTO,GRUPO_PRODUCTO,IFRS_GRP,	ANIADA,	DESCRIPCION_UOA	,CLASIFICACION,	ONEROSIDAD,IND_ANIADA
           FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`
           WHERE IND_ANIADA <> 'distribucion'
          ) DTB
       ON DTB.NOMBRE_PRODUCTO = COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO,IF(A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO'),'SOAT',NULL))
LEFT JOIN (SELECT DISTINCT NOMBRE_PRODUCTO,GRUPO_PRODUCTO --,IFRS_GRP,	ANIADA,	DESCRIPCION_UOA	,CLASIFICACION,	ONEROSIDAD,IND_ANIADA
           FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`
           WHERE IND_ANIADA = 'distribucion'
          ) DTBC
       ON DTBC.NOMBRE_PRODUCTO = COALESCE(REPLACE(A.NOMBRE_PRODUCTO,' ',''),POL.NOMBRE_PRODUCTO,IF(A.NOMBRE_REPORTE IN ('SINIESTRO_PROVEEDOR','SINIESTRO_BENEFICIARIO'),'SOAT',NULL))      
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP
       ON BYP.POL_NUMBER = A.NUMERO_POLIZA
      AND A.NOMBRE_REPORTE = 'SINIESTRO_VIDA'
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_BYPOL` BYP2
       ON BYP2.POL_NUMBER = A.NUMERO_CERTIFICADO
      AND A.NOMBRE_REPORTE = 'SINIESTRO_DESGRAVAMEN'
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_OPM015` OPM 
       ON A.NUMERO_SINIESTRO = OPM.NUMERO_SINIESTRO
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_OPM015` OPM2 
       ON A.NUMERO_SINIESTRO = CAST(SAFE_CAST(OPM2.NUMERO_SINIESTRO AS INT64) AS STRING)
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_REASEGURO` TR
       ON TR.NUMERO_POLIZA = A.NUMERO_POLIZA
WHERE A.PERIODO=var_periodo_calendario
)
SELECT 
NOMBRE_REPORTE
,NUMERO_SINIESTRO
,NUMERO_POLIZA
,NUMERO_CERTIFICADO
,MONTO
,CASE WHEN FECHA_REPORTE_CIA BETWEEN PARSE_DATE('%Y%m',CAST(var_periodo_calendario AS STRING)) 
           AND LAST_DAY(PARSE_DATE('%Y%m',CAST(var_periodo_calendario AS STRING))) THEN MONTO
      ELSE 0 END AS MONTO_RANGO_CIA  
,MONEDA
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,GRUPO_PRODUCTO_REPORTE
,FECHA_REPORTE_CIA
,FECHA_INICIO
,FLAG_REASEGURO
,ANIO
,IFRS_GRP
,DESCRIPCION_UOA
,CLASIFICACION
,ONEROSIDAD
,IND_ANIADA
,COALESCE(IFRS_GRP_UNIQUE_ID,
     CASE WHEN GRUPO_PRODUCTO='DESGRAVAMEN' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VEHICULAR','SOAT') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VIDA INDIVIDUAL','VIDA') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO IN ('VIDA LEY') AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='DESGRAVAMEN TC' AND IND_ANIADA='Año Actual' 
            THEN CONCAT(IFRS_GRP,var_periodo_actual,DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='DESGRAVAMEN' AND IND_ANIADA='Año Actual' 
            THEN CONCAT(IFRS_GRP,var_periodo_actual,DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='OPTATIVOS VIDA' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN GRUPO_PRODUCTO='OPTATIVOS' AND IND_ANIADA = 'Fechainicio' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIO,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)            
          WHEN IND_ANIADA = 'Antiguo' 
            THEN CONCAT(IFRS_GRP,COALESCE(ANIADA,var_periodo_actual),DESCRIPCION_UOA,MONEDA,CLASIFICACION,ONEROSIDAD)
          WHEN IND_ANIADA = 'Años Anterior' 
            THEN CONCAT(IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(CURRENT_DATE("America/Lima"),INTERVAL 2 YEAR)),DESCRIPCION_UOA
	     ,MONEDA,CLASIFICACION,ONEROSIDAD)
          END) AS IFRS_GRP_UNIQUE_ID 
FROM TMP_LANDING
;

-- ----------------------------------------------------------------------
-- Distribucion de la unidad de de cuenta en base 
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_PRIMA_042`
AS
SELECT 
   NOMBRE_PRODUCTO 
  --,ID_PRODUCTO
  ,GRUPO_PRODUCTO
  ,PORCENTAJE_DISTRIBUCION
  ,ANIO
  ,MONEDA
  ,(INS_COMP * PORCENTAJE_DISTRIBUCION) AS INS_COMP
  ,(GASTOS * PORCENTAJE_DISTRIBUCION)   AS GASTOS
  ,IFRS_GRP_UNIQUE_ID
FROM (
      SELECT 
	      REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
        ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_PEN = TRUE THEN 'PEN' END) AS MONEDA
	      ,SUM(PC.MONTO) AS GASTOS
        ,SUM(PC.MONTO_RANGO_CIA) AS INS_COMP
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_PEN=TRUE THEN 'PEN' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.NOMBRE_PRODUCTO =PUC.NOMBRE_PRODUCTO
       AND PUC.NOMBRE_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_PEN=TRUE
	    GROUP BY 1,2,3,4,7
	    UNION ALL
	    SELECT 
	      REPLACE(PC.NOMBRE_PRODUCTO,' ','') AS NOMBRE_PRODUCTO
        ,PC.GRUPO_PRODUCTO
             ,ANIADA AS ANIO
	      ,(CASE WHEN IND_USD = TRUE THEN 'USD' END) AS MONEDA
        ,SUM(PC.MONTO) AS GASTOS
        ,SUM(PC.MONTO_RANGO_CIA) AS INS_COMP
	      ,CONCAT(PUC.IFRS_GRP,PUC.ANIADA,PUC.DESCRIPCION_UOA
	      	,(CASE WHEN IND_USD=TRUE THEN 'USD' END)
	      			,PUC.CLASIFICACION,PUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
	      ,MAX(PUC.PORCENTAJE_DISTRIBUCION) AS PORCENTAJE_DISTRIBUCION
	    FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042` PC
	    INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` PUC
	    	ON PC.NOMBRE_PRODUCTO =PUC.NOMBRE_PRODUCTO
       AND PUC.NOMBRE_PRODUCTO IS NOT NULL
	    	AND UPPER(PUC.IND_ANIADA) = 'DISTRIBUCION'
	    WHERE IFRS_GRP_UNIQUE_ID IS NULL 
	    AND PUC.IND_USD=TRUE
	    GROUP BY 1,2,3,4,7
) 
;
-- ----------------------------------------------------------------------
-- Distribucion por año y mes
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_ANIO_MES_042`
AS
SELECT 
'820000' AS NUMERO_POLIZA
,CAST(NULL AS NUMERIC) AS INV_COMP
,SUM(INS_COMP) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS INS_COMP
,NOMBRE_PRODUCTO
,GRUPO_PRODUCTO
,ANIO
,MAX(ROUND(PORCENTAJE_DISTRIBUCION,2)) AS PORCENTAJE_DISTRIBUCION
,CAST(NULL AS NUMERIC) AS PRIMA
,SUM(GASTOS) * MAX(ROUND(PORCENTAJE_DISTRIBUCION,2))  AS GASTOS
,CAST(NULL AS NUMERIC) AS COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,CURRENT_DATE('America/Lima') AS FECHA_INICIO_VIGENCIA
,'NO' AS FLAG_REASEGURO
,MONEDA
FROM (
      SELECT A.NOMBRE_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) AS ANIO
      ,EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))  / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
      ,A.MONTO AS GASTOS     
      ,A.MONTO_RANGO_CIA AS INS_COMP
      FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042`A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
      UNION ALL
      SELECT A.NOMBRE_PRODUCTO,A.GRUPO_PRODUCTO
      ,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR)) AS ANIO
      ,(-1 * (EXTRACT(MONTH FROM PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING))) - 12 )) / 12 AS PORCENTAJE_DISTRIBUCION
      ,CONCAT(CUC.IFRS_GRP,FORMAT_DATE("%Y",DATE_SUB(PARSE_DATE("%Y%m",CAST(var_periodo_calendario AS STRING)),INTERVAL 1 YEAR))
              ,CUC.DESCRIPCION_UOA,A.MONEDA,CUC.CLASIFICACION,CUC.ONEROSIDAD) AS IFRS_GRP_UNIQUE_ID
      ,A.MONEDA
      ,A.MONTO AS GASTOS 
      ,A.MONTO_RANGO_CIA AS INS_COMP
      FROM `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042` A 
      INNER JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` CUC
             ON CUC.NOMBRE_PRODUCTO = A.NOMBRE_PRODUCTO 
            AND UPPER(CUC.IND_ANIADA) = 'DISTRIBUCION AÑO'
      WHERE IFRS_GRP_UNIQUE_ID IS NULL
)
GROUP BY NOMBRE_PRODUCTO,ANIO,IFRS_GRP_UNIQUE_ID,MONEDA,GRUPO_PRODUCTO
;
-- ----------------------------------------------------------------------
-- Distribucion por año y mes
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_VARIOS_042`
AS
SELECT
		 NOMBRE_REPORTE
		,NUMERO_POLIZA
		,ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,CASE WHEN GRUPO_PRODUCTO IN ('OPTATIVOS' ,'DESGRAVAMEN','DESGRAVAMEN TC','VIDA INDIVIDUAL','SOAT','VEHICULAR') THEN INS_COMP 
                  WHEN GRUPO_PRODUCTO IN ('VIDA LEY') THEN GASTOS END AS INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,FLAG_REASEGURO
FROM (
 		SELECT 
		'REPORTE 042' AS NOMBRE_REPORTE
		,NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO_REPORTE AS GRUPO_PRODUCTO
		,MONTO_RANGO_CIA AS INS_COMP
		,MONTO AS GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,FLAG_REASEGURO
		FROM  `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA_042`
		WHERE IFRS_GRP_UNIQUE_ID IS NOT NULL
		UNION ALL 
		SELECT 
		'REPORTE 042' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_PRIMA_042`
		UNION ALL
		SELECT 
		'REPORTE 042' AS NOMBRE_REPORTE
		,NULL AS NUMERO_POLIZA
		,NULL AS ID_PRODUCTO
		,NOMBRE_PRODUCTO
		,GRUPO_PRODUCTO
		,INS_COMP
		,GASTOS
		,IFRS_GRP_UNIQUE_ID
		,MONEDA 
    ,'NO' AS FLAG_REASEGURO
		FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_ANIO_MES_042`
	)
;
/*==================================================================*/
--                         FIN PROCESO - 042
/*==================================================================*/

------------------------------------------------------------------------
--Delete
------------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_POLIZA_IFRS17_ACTUALS` 
WHERE PERIODO =var_periodo_calendario;
------------------------------------------------------------------------
--Insert
------------------------------------------------------------------------
INSERT INTO`iter-data-storage-pv-uat.bi_sbs.PLNT_POLIZA_IFRS17_ACTUALS` 
(
PERIODO
,NOMBRE_REPORTE
,NUMERO_POLIZA
,INV_COMP
,INS_COMP
,PRIMA
,GASTOS
,COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO
,FECHA_INICIO_VIGENCIA
,FLAG_REASEGURO
,GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,MONEDA      
)
SELECT 
PERIODO
,NOMBRE_REPORTE
,NUMERO_POLIZA
,INV_COMP
,INS_COMP
,PRIMA
,GASTOS
,COSTOS_ADQ
,IFRS_GRP_UNIQUE_ID
,FECHA_INICIO
,FECHA_INICIO_VIGENCIA
,FLAG_REASEGURO
,GRUPO_PRODUCTO
,NOMBRE_PRODUCTO
,MONEDA 
 FROM ( SELECT 
          var_periodo_calendario AS PERIODO
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,INV_COMP
          ,INS_COMP
          ,PRIMA
          ,GASTOS
          ,COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,FECHA_INICIO
          ,FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
        FROM `iter-data-storage-pv-uat.temp.TMP_REPORTE_PRIMAS`
        UNION ALL
        SELECT 
          var_periodo_calendario AS PERIODO
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,INV_COMP
          ,CASE WHEN NOMBRE_REPORTE = 'RESCATE' THEN INS_COMP
                ELSE 0 END AS INS_COMP
          ,PRIMA
          ,GASTOS
          ,COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,FECHA_INICIO
          ,FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
        FROM `iter-data-storage-pv-uat.temp.TMP_REPORTE_SOBREVIVENCIA_RESCATES`
        UNION ALL
        SELECT 
          var_periodo_calendario AS PERIODO
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,INV_COMP
          ,INS_COMP
          ,PRIMA
          ,GASTOS
          ,COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,FECHA_INICIO
          ,FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
        FROM `iter-data-storage-pv-uat.temp.TMP_REPORTE_FACTURACION_MANUAL`
        UNION ALL
        SELECT 
          var_periodo_calendario AS PERIODO
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,INV_COMP
          ,INS_COMP
          ,PRIMA
          ,GASTOS
          ,COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,FECHA_INICIO
          ,FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
        FROM `iter-data-storage-pv-uat.temp.TMP_PROVISION_PRIMAS_UNV`
        UNION ALL
        SELECT 
          var_periodo_calendario AS PERIODO          
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,NULL AS INV_COMP
          ,INS_COMP 
          ,NULL AS PRIMA
          ,GASTOS
          ,NULL AS COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,CURRENT_DATE('America/Lima') AS FECHA_INICIO
          ,NULL AS FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
        FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_VARIOS`
        UNION ALL
          SELECT 
          var_periodo_calendario AS PERIODO          
          ,NOMBRE_REPORTE
          ,NUMERO_POLIZA
          ,NULL AS INV_COMP
          ,INS_COMP 
          ,NULL AS PRIMA
          ,GASTOS
          ,NULL AS COSTOS_ADQ
          ,IFRS_GRP_UNIQUE_ID
          ,CURRENT_DATE('America/Lima') AS FECHA_INICIO
          ,NULL AS FECHA_INICIO_VIGENCIA
          ,FLAG_REASEGURO
          ,GRUPO_PRODUCTO
          ,NOMBRE_PRODUCTO
          ,MONEDA 
          FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_VARIOS_042`              
        )
;

 -- ----------------------------------------------------------------------
-- 090
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_AGRUPACION_UNIDAD_CUENTA`
AS
WITH TMP_LANDING AS (
SELECT 
PERIODO
,IFRS_GRP_UNIQUE_ID
,CAST(NULL AS NUMERIC) AS ACQ_EXPN_PAID_A
,CAST(NULL AS NUMERIC) AS ACQ_EXPN_PAID_A_WOUT_REIN
,CAST(NULL AS NUMERIC) AS ACQ_EXPN_PAID_A_WITH_REIN
,SUM(GASTOS) AS CLAIMS_EXPNS_PAID_A
,SUM(IF(FLAG_REASEGURO='NO',GASTOS,0)) AS CLAIMS_EXPNS_PAID_A_WOUT_REIN
,SUM(IF(FLAG_REASEGURO='SI',GASTOS,0)) AS CLAIMS_EXPNS_PAID_A_WITH_REIN
,SUM(IF(NOMBRE_REPORTE IN ('SOBREVIVENCIA','RESCATE','REPORTE 042'), GASTOS,0)) AS INV_COMPONENT_OUTGO_A
,SUM(IF(FLAG_REASEGURO='NO' AND NOMBRE_REPORTE IN ('SOBREVIVENCIA','RESCATE','REPORTE 042') ,GASTOS,0)) AS INV_COMPONENT_OUTGO_A_WOUT_REIN
,SUM(IF(FLAG_REASEGURO='SI' AND NOMBRE_REPORTE IN ('SOBREVIVENCIA','RESCATE','REPORTE 042') ,GASTOS,0)) AS INV_COMPONENT_OUTGO_A_WITH_REIN
,SUM(PRIMA) AS PREM_RECEIVED_A
,SUM(IF(FLAG_REASEGURO='NO',PRIMA,0)) AS PREM_RECEIVED_A_WOUT_REIN
,SUM(IF(FLAG_REASEGURO='SI',PRIMA,0)) AS PREM_RECEIVED_A_WITH_REIN
,SUM(INS_COMP) AS INCUR_CLAIMS_NEW_SETTLED
,SUM(IF(FLAG_REASEGURO='NO',INS_COMP,0)) AS INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,SUM(IF(FLAG_REASEGURO='SI',INS_COMP,0)) AS INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_POLIZA_IFRS17_ACTUALS`
--WHERE PERIODO=202310
WHERE PERIODO = var_periodo_calendario
GROUP BY IFRS_GRP_UNIQUE_ID,PERIODO
)
SELECT 
UC.PERIODO
,UC.IFRS_GRP_UNIQUE_ID
,D.MONEDA
,D.CATEGORIA
,D.DISTRIBUCION
,D.ANIADA
,UC.ACQ_EXPN_PAID_A
,UC.ACQ_EXPN_PAID_A_WOUT_REIN
,UC.ACQ_EXPN_PAID_A_WITH_REIN
,UC.CLAIMS_EXPNS_PAID_A
,UC.CLAIMS_EXPNS_PAID_A_WOUT_REIN
,UC.CLAIMS_EXPNS_PAID_A_WITH_REIN
,UC.INV_COMPONENT_OUTGO_A
,UC.INV_COMPONENT_OUTGO_A_WOUT_REIN
,UC.INV_COMPONENT_OUTGO_A_WITH_REIN
,UC.PREM_RECEIVED_A
,UC.PREM_RECEIVED_A_WOUT_REIN
,UC.PREM_RECEIVED_A_WITH_REIN
,UC.INCUR_CLAIMS_NEW_SETTLED
,UC.INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,UC.INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,GR.COSTOS_ADQUISICION
,GR.GASTOS_MANTENIMIENTO
---------------REGLAS  
,CASE WHEN D.DISTRIBUCION = 'SÍ' THEN UC.PREM_RECEIVED_A
      WHEN D.DISTRIBUCION = 'NO' AND D.ANIADA = '2024'  THEN UC.PREM_RECEIVED_A 
      ELSE 0 END PRIMA_CA
,CASE WHEN D.DISTRIBUCION = 'SÍ' THEN UC.PREM_RECEIVED_A_WITH_REIN
      WHEN D.DISTRIBUCION = 'NO' AND D.ANIADA = '2024'  THEN UC.PREM_RECEIVED_A_WITH_REIN
      ELSE 0 END PRIMA_REASEGURO_CA
,MTC.MONTO_TIPO_CAMBIO
FROM TMP_LANDING UC
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.DISTRIBUCION_COSTOS_GASTOS` D
       ON UC.IFRS_GRP_UNIQUE_ID = D.IFRS_GRP_UNIQUE_ID
      --AND PERIODO = var_periodo_calendario
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.GASTOS_REALES`  GR
       ON GR.CATEGORIA = D.CATEGORIA
      AND GR.PERIODO = var_periodo_calendario
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.TIPO_CAMBIO_IFRS17` MTC
       ON UC.PERIODO = MTC.PERIODO 
;
-- ----------------------------------------------------------------------
-- Delete
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_UOA_IFRS17`
WHERE PERIODO=var_periodo_calendario
AND TIPO_REPORTE = 'SIN COSTOS Y GASTOS';
 -- ----------------------------------------------------------------------
-- SIN COSTOS Y GASTOS
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.bi_sbs.PLNT_UOA_IFRS17`
(
PERIODO
,IFRS_GRP_UNIQUE_ID
,ACQ_EXPN_PAID_A
,ACQ_EXPN_PAID_A_WOUT_REIN
,ACQ_EXPN_PAID_A_WITH_REIN
,CLAIMS_EXPNS_PAID_A
,CLAIMS_EXPNS_PAID_A_WOUT_REIN
,CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN
,PREM_RECEIVED_A
,PREM_RECEIVED_A_WOUT_REIN
,PREM_RECEIVED_A_WITH_REIN
,INCUR_CLAIMS_NEW_SETTLED
,INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,TIPO_REPORTE  
)
SELECT 
PERIODO
,IFRS_GRP_UNIQUE_ID
,ACQ_EXPN_PAID_A
,ACQ_EXPN_PAID_A_WOUT_REIN
,ACQ_EXPN_PAID_A_WITH_REIN
,CLAIMS_EXPNS_PAID_A
,CLAIMS_EXPNS_PAID_A_WOUT_REIN
,CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN
,PREM_RECEIVED_A
,PREM_RECEIVED_A_WOUT_REIN
,PREM_RECEIVED_A_WITH_REIN
,INCUR_CLAIMS_NEW_SETTLED
,INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,'SIN COSTOS Y GASTOS' AS TIPO_REPORTE
 FROM `iter-data-storage-pv-uat.temp.TMP_AGRUPACION_UNIDAD_CUENTA`;
 
-- ----------------------------------------------------------------------
-- Distribucion de los costos y gastos
-- ----------------------------------------------------------------------

CREATE OR REPLACE TABLE  `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS`
AS
SELECT 
PERIODO
,IFRS_GRP_UNIQUE_ID
,MONEDA
,CATEGORIA
,DISTRIBUCION
,ANIADA
,ACQ_EXPN_PAID_A
,ACQ_EXPN_PAID_A_WOUT_REIN
,ACQ_EXPN_PAID_A_WITH_REIN
,CLAIMS_EXPNS_PAID_A
,CLAIMS_EXPNS_PAID_A_WOUT_REIN
,CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN
,PREM_RECEIVED_A
,PREM_RECEIVED_A_WOUT_REIN
,PREM_RECEIVED_A_WITH_REIN
,INCUR_CLAIMS_NEW_SETTLED
,INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,COSTOS_ADQUISICION
,GASTOS_MANTENIMIENTO
---------------REGLAS  
,PRIMA_CA
,PRIMA_REASEGURO_CA
,PRIMA_REASEGURO_CA /  NULLIF(PRIMA_CA,0)        AS PORCENTAJE__CA
,1 - (PRIMA_REASEGURO_CA /  NULLIF(PRIMA_CA,0) ) AS PORCENTAJE_REASEGURO_SIN_CA
,CASE WHEN DISTRIBUCION='SÍ' THEN PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,CATEGORIA),0)
      ELSE PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,ANIADA,CATEGORIA),0) END AS PORCENTAJE_DISTRIBUCION_CA

,COALESCE(CASE WHEN MONEDA='PEN' THEN COSTOS_ADQUISICION 
      ELSE COSTOS_ADQUISICION / MONTO_TIPO_CAMBIO END,0) AS COSTO_ADQUISICION_PEN
,COALESCE((
  (CASE WHEN MONEDA='PEN' THEN COSTOS_ADQUISICION 
       ELSE COSTOS_ADQUISICION / MONTO_TIPO_CAMBIO END) 
  * 
 (CASE WHEN DISTRIBUCION='SÍ' THEN PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,CATEGORIA),0)
       ELSE PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,ANIADA,CATEGORIA),0) END) 
 ),0) AS CA
,COALESCE((
  (CASE WHEN MONEDA='PEN' THEN COSTOS_ADQUISICION 
       ELSE COSTOS_ADQUISICION / MONTO_TIPO_CAMBIO END) 
  * 
 (CASE WHEN DISTRIBUCION='SÍ' THEN PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,CATEGORIA),0)
      ELSE PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,ANIADA,CATEGORIA),0) END) 
 ) * (1 - (PRIMA_REASEGURO_CA /  NULLIF(PRIMA_CA,0) )),0) AS CA_SIN_R

,COALESCE((
  (CASE WHEN MONEDA='PEN' THEN COSTOS_ADQUISICION 
       ELSE COSTOS_ADQUISICION / MONTO_TIPO_CAMBIO END) 
  * 
 (CASE WHEN DISTRIBUCION='SÍ' THEN PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,CATEGORIA),0)
      ELSE PRIMA_CA / NULLIF(SUM(PRIMA_CA) OVER(PARTITION BY PERIODO,ANIADA,CATEGORIA),0) END) 
 ) * (PRIMA_REASEGURO_CA /  NULLIF(PRIMA_CA,0)),0) AS CA_R

--,PREM_RECEIVED_A  AS PRIMA_GM
--,PREM_RECEIVED_A_WITH_REIN  AS PRIMA_REASEGURO_GM
,PREM_RECEIVED_A_WITH_REIN  / NULLIF(PREM_RECEIVED_A,0) AS PORCENTAJE_GM
,(1 - (PREM_RECEIVED_A_WITH_REIN  / NULLIF(PREM_RECEIVED_A,0))) AS PORCENTAJE_REASEGURO_SIN_GM
,PREM_RECEIVED_A / NULLIF(SUM(PREM_RECEIVED_A)OVER(PARTITION BY PERIODO,CATEGORIA),0) AS PORCENTAJE_DISTRIBUCION_GM
,COALESCE(CASE WHEN MONEDA='PEN' THEN GASTOS_MANTENIMIENTO 
      ELSE GASTOS_MANTENIMIENTO / MONTO_TIPO_CAMBIO END) AS GASTOS_MANTENIMIENTO_PEN
,COALESCE((
  (CASE WHEN MONEDA='PEN' THEN GASTOS_MANTENIMIENTO 
        ELSE GASTOS_MANTENIMIENTO / MONTO_TIPO_CAMBIO END)
  *
  (PREM_RECEIVED_A / NULLIF(SUM(PREM_RECEIVED_A)OVER(PARTITION BY PERIODO,CATEGORIA),0))
 ),0) AS GM
,COALESCE((((CASE WHEN MONEDA='PEN' THEN GASTOS_MANTENIMIENTO 
       ELSE GASTOS_MANTENIMIENTO / MONTO_TIPO_CAMBIO END)
    *
  (PREM_RECEIVED_A / NULLIF(SUM(PREM_RECEIVED_A)OVER(PARTITION BY PERIODO,CATEGORIA),0))
  )
   * 
  (1 - (PREM_RECEIVED_A_WITH_REIN  / NULLIF(PREM_RECEIVED_A,0))) 
 ) ,0) AS GM_SIN_R
,COALESCE(((CASE WHEN MONEDA='PEN' THEN GASTOS_MANTENIMIENTO 
       ELSE GASTOS_MANTENIMIENTO / MONTO_TIPO_CAMBIO END)
 *
 (PREM_RECEIVED_A / NULLIF(SUM(PREM_RECEIVED_A)OVER(PARTITION BY PERIODO,CATEGORIA),0)))
 * (PREM_RECEIVED_A_WITH_REIN  / NULLIF(PREM_RECEIVED_A,0)) ,0) AS GM_R

FROM `iter-data-storage-pv-uat.temp.TMP_AGRUPACION_UNIDAD_CUENTA` 
;
-- ----------------------------------------------------------------------
-- Distribucion de los costos y gastos
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE  `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS_FINAL`
AS
SELECT 
PERIODO
,IFRS_GRP_UNIQUE_ID
,CA AS  ACQ_EXPN_PAID_A 
,CA_SIN_R AS ACQ_EXPN_PAID_A_WOUT_REIN
,CA_R AS ACQ_EXPN_PAID_A_WITH_REIN
,GM + CLAIMS_EXPNS_PAID_A AS CLAIMS_EXPNS_PAID_A 
,GM_SIN_R + CLAIMS_EXPNS_PAID_A_WOUT_REIN AS CLAIMS_EXPNS_PAID_A_WOUT_REIN
,GM_R + CLAIMS_EXPNS_PAID_A_WITH_REIN AS CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN    
,PREM_RECEIVED_A 	
,PREM_RECEIVED_A_WOUT_REIN	
,PREM_RECEIVED_A_WITH_REIN	
,GM + INCUR_CLAIMS_NEW_SETTLED AS INCUR_CLAIMS_NEW_SETTLED	
,GM_SIN_R + INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN	AS INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,GM_R + INCUR_CLAIMS_NEW_SETTLED_WITH_REIN AS INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
FROM `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS` 
;
-- ----------------------------------------------------------------------
-- Delete
-- ----------------------------------------------------------------------
DELETE FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_UOA_IFRS17`
WHERE PERIODO=var_periodo_calendario
AND TIPO_REPORTE = 'CON COSTOS Y GASTOS';
-- ----------------------------------------------------------------------
-- Insert
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.bi_sbs.PLNT_UOA_IFRS17`
(
PERIODO
,IFRS_GRP_UNIQUE_ID
,ACQ_EXPN_PAID_A
,ACQ_EXPN_PAID_A_WOUT_REIN
,ACQ_EXPN_PAID_A_WITH_REIN
,CLAIMS_EXPNS_PAID_A
,CLAIMS_EXPNS_PAID_A_WOUT_REIN
,CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN
,PREM_RECEIVED_A
,PREM_RECEIVED_A_WOUT_REIN
,PREM_RECEIVED_A_WITH_REIN
,INCUR_CLAIMS_NEW_SETTLED
,INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,TIPO_REPORTE
)
SELECT 
PERIODO
,IFRS_GRP_UNIQUE_ID
,ACQ_EXPN_PAID_A
,ACQ_EXPN_PAID_A_WOUT_REIN
,ACQ_EXPN_PAID_A_WITH_REIN
,CLAIMS_EXPNS_PAID_A
,CLAIMS_EXPNS_PAID_A_WOUT_REIN
,CLAIMS_EXPNS_PAID_A_WITH_REIN
,INV_COMPONENT_OUTGO_A
,INV_COMPONENT_OUTGO_A_WOUT_REIN
,INV_COMPONENT_OUTGO_A_WITH_REIN
,PREM_RECEIVED_A
,PREM_RECEIVED_A_WOUT_REIN
,PREM_RECEIVED_A_WITH_REIN
,INCUR_CLAIMS_NEW_SETTLED
,INCUR_CLAIMS_NEW_SETTLED_WOUT_REIN
,INCUR_CLAIMS_NEW_SETTLED_WITH_REIN
,'CON COSTOS Y GASTOS' AS TIPO_REPORTE
FROM `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS_FINAL`
;

-- ----------------------------------------------------------------------
-- Drop
-- ----------------------------------------------------------------------
/*
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_BYPOL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_REASEGURO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_BYPOL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_VIGENCIA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_ANIO_MES`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA_PRIMA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_COMPROBANTE_UOA_UNIVERSO_FINAL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_REPORTE_PRIMAS`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_MOVIMIENTOS_CONTABLES_SBV_RCT`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_PAGOS_ULTIMUS_OPERACIONES_SAC_PASADO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_UNIV_PERIODO_ACTUAL_PASADO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RESCATES_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_SOBREVIVENCIA_RESCATES_ULTIMUS_FINAL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_UNIVERSO_SOBREVIVENCIA_RECATES_TOTAL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_REPORTE_SOBREVIVENCIA_RESCATES`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_FACTURACION_MANUAL_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_FACTURACION_MANUAL_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_FACTURACION_MANUAL_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_REPORTE_FACTURACION_MANUAL`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_PROVICION_PRIMA_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_PROVICION_PRIMA_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PROVICION_UOA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_PROVISION_PRIMAS_UNV`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_AGRUPADOS`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_CECO_COASEGURO_SINIESTRO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_PRODUCTO_VEHICULAR_SINIESTRO`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_SINIESTROS_UNIDAD_CUENTA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_PRIMA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DISTRIBUCION_SINIESTRO_UOA_ANIO_MES`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_SINIESTRO_VARIOS`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_AGRUPACION_UNIDAD_CUENTA`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS`;
DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_DISTRIBUCION_COSTOS_GASTOS_FINAL`;

*/
END;