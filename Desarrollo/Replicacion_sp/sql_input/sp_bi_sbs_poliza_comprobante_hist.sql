CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.sp_bi_sbs_poliza_comprobante_hist(par_periodo INT64)
OPTIONS(
  strict_mode=true)
BEGIN

 /********************************************************************
* Proyecto      : IFRS17
* Fecha         : 15 / 11 / 2023
* Autor         : Jampiere Berrio         
* Descripción   : 
* Ejecuciòn     : Mensual - 7 de cada mes
*********************************************************************
*                       MODIFICACIONES POSTERIORES                  *
*===================================================================*
*=  Fecha   | Persona |           Modificación Realizada           =*
*===================================================================*/
 
-- ------------------------------------------------------------------------------------
-- VARIABLES UTILIZADAS EN EL PROCESO
-- ------------------------------------------------------------------------------------

DECLARE var_periodo_calendario INT64;
DECLARE var_periodo_inicio DATE;
DECLARE var_periodo_fin DATE;


IF par_periodo IS NULL THEN
 
SET var_periodo_calendario = ( SELECT   MAX(CAST(PERIODO AS INT64))  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
WHERE DATE_SUB(CURRENT_DATE,INTERVAL 8 DAY) BETWEEN PERIODO_DIA_INICIO  AND PERIODO_DIA_FIN ) ;

SET var_periodo_inicio = ( SELECT  PERIODO_DIA_INICIO  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
                           WHERE PERIODO = var_periodo_calendario);

SET var_periodo_fin = ( SELECT  PERIODO_DIA_FIN  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
                           WHERE PERIODO = var_periodo_calendario);                          
ELSE 
 
SET var_periodo_calendario = par_periodo ;

SET var_periodo_inicio = ( SELECT  PERIODO_DIA_INICIO  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
                           WHERE PERIODO = par_periodo);

SET var_periodo_fin = ( SELECT  PERIODO_DIA_FIN  FROM `iter-data-storage-pv-uat.goldenrecord_data.DIM_PERIODO_CALENDARIO`
                           WHERE PERIODO = par_periodo);    

END IF;

-- ----------------------------------------------------------------------
-- Paso 1: Libro Producto a partir de SAMP V2
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PLANILLA_DEPOSITO`
AS
(
WITH TMP_PLANILLA_DEPOSITO AS (
SELECT
ID_DEPOSITO
,ID_PLANILLA
,DATE(FECHA_REGISTRO_DEPOSITO,'America/Lima') AS FECHA_REGISTRO_DEPOSITO
,NUMERO_OPERACION_DEPOSITO
,NUMERO_CUENTA_BANCARIA
,BANCO_DEPOSITO
,NUMERO_RECIBO_DEPOSITO
,MODO_RECAUDACION_DESCRIPCION
,ORIGEN_RECAUDACION_DESCRIPCION
,ESTADO_PLANILLA
,TIPO_PRODUCTO
,ID_MODO_RECAUDACION
,MONTO_PLANILLA
,MONTO_CANTIDAD_DEPOSITO
,SALDO_RECIBO_DEPOSITO
,FECHA_PLANILLA
,FECHA_CREACION_PLANILLA
,FUENTE
FROM `iter-data-storage-pv-uat.goldenrecord_data.PLANILLA_DEPOSITO` 
WHERE FECHA_CREACION_PLANILLA BETWEEN var_periodo_inicio AND var_periodo_fin +1
)
SELECT DISTINCT
MONTO_CANTIDAD_DEPOSITO	
,FECHA_REGISTRO_DEPOSITO	
,NUMERO_OPERACION_DEPOSITO	
,NUMERO_CUENTA_BANCARIA	
,BANCO_DEPOSITO	
,NUMERO_RECIBO_DEPOSITO	
,SALDO_RECIBO_DEPOSITO	
,MODO_RECAUDACION_DESCRIPCION	
,ORIGEN_RECAUDACION_DESCRIPCION	
,ESTADO_PLANILLA	
,TIPO_PRODUCTO	
,ID_MODO_RECAUDACION	
,ID_DEPOSITO	
,ID_PLANILLA	
FROM (
  SELECT 
	ID_DEPOSITO
	,ID_PLANILLA
	,FECHA_REGISTRO_DEPOSITO
	,NUMERO_OPERACION_DEPOSITO
	,NUMERO_CUENTA_BANCARIA
	,BANCO_DEPOSITO
	,NUMERO_RECIBO_DEPOSITO
	,MODO_RECAUDACION_DESCRIPCION
	,ORIGEN_RECAUDACION_DESCRIPCION
	,ESTADO_PLANILLA
	,TIPO_PRODUCTO
	,ID_MODO_RECAUDACION
	,MONTO_PLANILLA
	,MONTO_CANTIDAD_DEPOSITO
	,SALDO_RECIBO_DEPOSITO
	,FECHA_PLANILLA
	,FECHA_CREACION_PLANILLA
	,FUENTE
       FROM TMP_PLANILLA_DEPOSITO
       WHERE FUENTE IN ('BLOQUE_1','BLOQUE_2')
UNION ALL
SELECT
	MAX(ID_DEPOSITO)                AS ID_DEPOSITO
	,ID_PLANILLA
	,MAX(FECHA_REGISTRO_DEPOSITO)   AS FECHA_REGISTRO_DEPOSITO
	,MAX(NUMERO_OPERACION_DEPOSITO) AS NUMERO_OPERACION_DEPOSITO
	,MAX(NUMERO_CUENTA_BANCARIA)    AS NUMERO_CUENTA_BANCARIA
	,BANCO_DEPOSITO
	,MAX(NUMERO_RECIBO_DEPOSITO)    AS NUMERO_RECIBO_DEPOSITO
	,MODO_RECAUDACION_DESCRIPCION
	,ORIGEN_RECAUDACION_DESCRIPCION
	,ESTADO_PLANILLA
	,TIPO_PRODUCTO
	,ID_MODO_RECAUDACION
	,MONTO_PLANILLA
	,MAX(MONTO_CANTIDAD_DEPOSITO)   AS MONTO_CANTIDAD_DEPOSITO
	,MAX(SALDO_RECIBO_DEPOSITO)     AS SALDO_RECIBO_DEPOSITO
	,FECHA_PLANILLA
	,FECHA_CREACION_PLANILLA
	,FUENTE
       FROM TMP_PLANILLA_DEPOSITO
       WHERE FUENTE IN ('BLOQUE_3','BLOQUE_4')
GROUP BY 
	BANCO_DEPOSITO
	,ID_PLANILLA
	,MODO_RECAUDACION_DESCRIPCION
	,ORIGEN_RECAUDACION_DESCRIPCION
	,ESTADO_PLANILLA
	,TIPO_PRODUCTO
	,ID_MODO_RECAUDACION
	,MONTO_PLANILLA
	,FECHA_PLANILLA
	,FECHA_CREACION_PLANILLA
	,FUENTE
       )
)
;
-- ----------------------------------------------------------------------
-- Paso 4: Libro Producto a partir de SAMP
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_POLIZA_DETALLE_COMPROBANTE_HIST`
AS
WITH TMP_DETALLE_MOVIMIENTO AS (
SELECT DISTINCT 
id_comprobante AS id_comprobante 
FROM  `iter-data-storage-pv-uat.samp_data.DETALLE_MOVIMIENTO_raw` 
WHERE id_comprobante is not null
UNION ALL
SELECT DISTINCT
id_comprobante  AS id_comprobante 
from  `iter-data-storage-pv-uat.samp_data.COMPROBANTE_raw` 
WHERE cod_tipo_comprobante = 'N/C'
)
SELECT DISTINCT
CAST(CO.POLIZA AS STRING) AS NUMERO_POLIZA
,CASE WHEN ZN.NOMBRE_PRODUCTO ='DESGVEHICULARINDIVIDUAL'   THEN CONCAT('1180103-',SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-7))
      WHEN ZN.NOMBRE_PRODUCTO ='REFINANCIADO'              THEN CONCAT('1190103-',SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-7)) 
      WHEN ZN.NOMBRE_PRODUCTO ='DESGPERSONALINDIVIDUAL'    THEN CONCAT('1170103-',SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-7)) 
      WHEN ZN.NOMBRE_PRODUCTO ='DESGHIPOTECARIOINDIVIDUAL' THEN CONCAT('1160103-',SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-7)) 
      WHEN ZN.NOMBRE_PRODUCTO ='DESGPERSONALFACTINDIVIDUAL'THEN CONCAT('500038-' ,SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-7))
      WHEN ZN.NOMBRE_PRODUCTO ='DESGTARJETASINDIVIDUAL'    THEN CONCAT('500105-' ,SUBSTRING(CAST(CO.POLIZA AS STRING),LENGTH(CAST(CO.POLIZA AS STRING))-6))
      ELSE CAST(CO.POLIZA AS STRING) END AS NUMERO_POLIZA_HOMOLOGADO
,CO.COD_RAMO AS RAMO
,CO.COD_SUBRAMO AS SUB_RAMO
,CO.COD_PRODUCTO AS CODIGO_PRODUCTO
,CONCAT(TRIM(CO.COD_RAMO),TRIM(CO.COD_SUBRAMO),TRIM(CO.COD_PRODUCTO)) AS ID_PRODUCTO 
,COALESCE(UPPER(ZN.NOMBRE_PRODUCTO),UPPER(DTB.NOMBRE_PRODUCTO)) AS NOMBRE_PRODUCTO
,CO.CODIGO_CANAL
,CO.MONEDA
,CO.COD_TIPO_DOCUMENTO_COMPROBANTE 
,CO.NUMERO_DOCUMENTO
,CO.MONEDA AS MONEDA_COMPROBANTE
,DATE(CO.FECHA_CREACION,'America/Lima') AS FECHA_INGRESO_COMPROBANTE
,CO.NUMERO_DOCUMENTO AS RUC
,CO.NOMBRE_CLIENTE AS CLIENTE
,CASE WHEN CO.COD_TIPO_DOCUMENTO_COMPROBANTE ='N/C' THEN CO.AFECTO ELSE COALESCE(CO.AFECTO,0) - COALESCE(CO.DERECHO_EMISION,0) END AFECTO
,CO.NO_AFECTO
,CASE WHEN CO.COD_TIPO_DOCUMENTO_COMPROBANTE ='N/C' THEN 0 ELSE COALESCE(CO.DERECHO_EMISION,0) END DERECHO_EMISION
,CO.INTERES
,CAST(NULL AS NUMERIC) AS GASTO
,CAST(NULL AS NUMERIC) AS AMORTIZACION_PRESTAMO
,CAST(NULL AS NUMERIC) AS OTROS
,CO.IMPUESTO AS IGV
,CO.MONTO AS TOTAL
--,CO.MONTO - COALESCE(CO.IMPUESTO,0) AS SIN_IGV
--,CASE WHEN MC.TIPO_DE_ASIENTO ='DEVOLUCION PRIMA' THEN - CO.MONTO-COALESCE(CO.IMPUESTO,0) - COALESCE(CO.INTERES,0)
,CASE WHEN MC.TIPO_ASIENTO ='DEVOLUCION PRIMA' THEN  ( -1 * COALESCE(CO.MONTO,0)) - (-1 * COALESCE(CO.IMPUESTO,0)) - COALESCE(CO.INTERES,0)
      ELSE CO.MONTO - COALESCE(CO.IMPUESTO,0) - COALESCE(CO.INTERES,0)
      END AS SIN_IGV
,IF(CO.MONEDA='USD', CO.MONTO * SAFE_CAST(CO.TIPO_CAMBIO AS NUMERIC),CO.MONTO) AS SOLES
,CAST(NULL AS STRING) AS TIPO
,CO.ASIENTO AS ASIENTO_PRODUCCION
,CAST(NULL AS STRING) AS PRODUCTO
,CO.ID_PLANILLA
,CO.TOTAL_CANTIDAD_PLANILLA
,CO.TOTAL_MONEDA_PLANILLA
,PD.MONTO_CANTIDAD_DEPOSITO AS MONTO_RECAUDADO                           
,PD.FECHA_REGISTRO_DEPOSITO  AS FECHA_RECAUDACION                         
,PD.NUMERO_OPERACION_DEPOSITO      AS NUMERO_OPERACION                          
,PD.NUMERO_CUENTA_BANCARIA AS CUENTA_BANCARIA                           
,PD.BANCO_DEPOSITO AS BANCO                                     
,NULL AS NUMERO_RECIBO                             
,PD.SALDO_RECIBO_DEPOSITO AS SALDO_RECIBO_CAJA                         
,CAST(NULL AS STRING) ASIENTO_RECAUDACION                       
,PD.MODO_RECAUDACION_DESCRIPCION AS MODO_RECAUDA_DESCRIPCION                  
,PD.ORIGEN_RECAUDACION_DESCRIPCION AS ORIGEN_RECAUDA_DESCRIPCION                
,PD.ESTADO_PLANILLA AS ESTADO_PLANILLA       
,CO.ESTADO_COMPROBANTE
,CO.ID_COMPROBANTE
,PD.TIPO_PRODUCTO
,PD.ID_MODO_RECAUDACION
,PD.ID_DEPOSITO
,CO.CODIGO_AGENTE AS NUMERO_AGENTE
,CO.COMPROBANTE AS NUMERO_COMPROBANTE
,CASE WHEN UPPER(ZN.NOMBRE_PRODUCTO) ='DESGTARJETASINDIVIDUAL' THEN 'DESGRAVAMEN TC'
      WHEN UPPER(ZN.GRUPO_PRODUCTO) = 'OPTATIVOS VIDA' THEN 'OPTATIVOS VIDA'
      ELSE UPPER(MC.PRODUCTO) END AS GRUPO_PRODUCTO
,COALESCE(ZN.IND_ANIADA,DTB.IND_ANIADA) AS IND_ANIADA            
,COALESCE(ZN.IND_PEN,DTB.IND_PEN)       AS IND_PEN           
,COALESCE(ZN.IND_USD,DTB.IND_USD)       AS IND_USD          
,ZN.IFRS_GRP	            
,ZN.ANIADA	                
,ZN.DESCRIPCION_UOA	    
,ZN.CLASIFICACION	        
,ZN.ONEROSIDAD    
FROM  `iter-data-storage-pv-uat.goldenrecord_data.POLIZA_COMPROBANTE` CO
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_PLANILLA_DEPOSITO` PD
       ON CO.ID_PLANILLA = PD.ID_PLANILLA
LEFT JOIN `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA` ZN
       ON ZN.ID_PRODUCTO = CONCAT(TRIM(CO.COD_RAMO),TRIM(CO.COD_SUBRAMO),TRIM(CO.COD_PRODUCTO))
      AND COALESCE(UPPER(IND_ANIADA),'') NOT LIKE '%DISTRIBUCION%'
			AND ZN.ID_PRODUCTO IS NOT NULL
LEFT JOIN (SELECT DISTINCT 
	             ID_PRODUCTO
	            ,NOMBRE_PRODUCTO
	            ,GRUPO_PRODUCTO
	            ,IND_ANIADA
              ,IND_PEN                
	            ,IND_USD
	        FROM `iter-data-storage-pv-uat.inputfiles.PRODUCTO_UNIDAD_CUENTA`  
	        WHERE UPPER(IND_ANIADA) LIKE '%DISTRIBUCION%' AND ID_PRODUCTO IS NOT NULL
          QUALIFY(ROW_NUMBER()OVER(PARTITION BY ID_PRODUCTO)) = 1
         ) DTB
       ON DTB.ID_PRODUCTO = CONCAT(TRIM(CO.COD_RAMO),TRIM(CO.COD_SUBRAMO),TRIM(CO.COD_PRODUCTO))
LEFT JOIN (SELECT DISTINCT 
               ASIENTO
              ,PRODUCTO 
              ,TIPO_ASIENTO
           FROM `iter-data-storage-pv-uat.bi_sbs.PLNT_MOVIMIENTO_CONTABLE_HIST` A
           WHERE FUENTE_ORIGEN='PRIMAS' AND PERIODO = var_periodo_calendario
          ) MC 
       ON MC.ASIENTO = CO.ASIENTO
WHERE CAST(FORMAT_DATE("%Y%m",DATE(CO.FECHA_CREACION,'America/Lima')) AS INT64) =var_periodo_calendario
AND CO.ESTADO_COMPROBANTE ='CREADA'
AND CO.COD_TIPO_DOCUMENTO_COMPROBANTE <>'O/P'
AND CO.ID_COMPROBANTE IS NOT NULL
AND ID_COMPROBANTE IN (SELECT DISTINCT ID_COMPROBANTE FROM TMP_DETALLE_MOVIMIENTO)
QUALIFY(ROW_NUMBER()OVER(PARTITION BY CO.COMPROBANTE ORDER BY ID_DEPOSITO DESC))=1
;

-- ----------------------------------------------------------------------
-- Delete
-- ----------------------------------------------------------------------

DELETE FROM `iter-data-storage-pv-uat.bi_sbs.POLIZA_COMPROBANTE_HIST`
WHERE PERIODO=var_periodo_calendario;

-- ----------------------------------------------------------------------
-- Paso 5: cruze con la bypol
-- ----------------------------------------------------------------------
INSERT INTO `iter-data-storage-pv-uat.bi_sbs.POLIZA_COMPROBANTE_HIST`
(
PERIODO
,NUMERO_POLIZA
,NUMERO_POLIZA_HOMOLOGADO
,RAMO
,SUB_RAMO
,CODIGO_PRODUCTO
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,CODIGO_CANAL
,MONEDA
,COD_TIPO_DOCUMENTO_COMPROBANTE
,NUMERO_DOCUMENTO
,MONEDA_COMPROBANTE
,FECHA_INGRESO_COMPROBANTE
,RUC
,CLIENTE
,AFECTO
,NO_AFECTO
,DERECHO_EMISION
,INTERES
,GASTO
,AMORTIZACION_PRESTAMO
,OTROS
,IGV
,TOTAL
,SIN_IGV
,SOLES
,TIPO
,ASIENTO_PRODUCCION
,PRODUCTO
,ID_PLANILLA
,TOTAL_CANTIDAD_PLANILLA
,TOTAL_MONEDA_PLANILLA
,MONTO_RECAUDADO
,FECHA_RECAUDACION
,NUMERO_OPERACION
,CUENTA_BANCARIA
,BANCO
,NUMERO_RECIBO
,SALDO_RECIBO_CAJA
,ASIENTO_RECAUDACION
,MODO_RECAUDA_DESCRIPCION
,ORIGEN_RECAUDA_DESCRIPCION
,ESTADO_PLANILLA
,ESTADO_COMPROBANTE
,ID_COMPROBANTE
,TIPO_PRODUCTO
,ID_MODO_RECAUDACION
,ID_DEPOSITO
,NUMERO_AGENTE
,NUMERO_COMPROBANTE
,GRUPO_PRODUCTO
,IND_ANIADA
,IND_PEN
,IND_USD
,IFRS_GRP
,ANIADA
,DESCRIPCION_UOA
,CLASIFICACION
,ONEROSIDAD
,FECHA_PROCESO
)
SELECT 
var_periodo_calendario AS PERIODO
,NUMERO_POLIZA
,NUMERO_POLIZA_HOMOLOGADO
,RAMO
,SUB_RAMO
,CODIGO_PRODUCTO
,ID_PRODUCTO
,NOMBRE_PRODUCTO
,CODIGO_CANAL
,MONEDA
,COD_TIPO_DOCUMENTO_COMPROBANTE
,NUMERO_DOCUMENTO
,MONEDA_COMPROBANTE
,FECHA_INGRESO_COMPROBANTE
,RUC
,CLIENTE
,AFECTO
,NO_AFECTO
,DERECHO_EMISION
,INTERES
,GASTO
,AMORTIZACION_PRESTAMO
,OTROS
,IGV
,TOTAL
,SIN_IGV
,SOLES
,TIPO
,ASIENTO_PRODUCCION
,PRODUCTO
,ID_PLANILLA
,TOTAL_CANTIDAD_PLANILLA
,TOTAL_MONEDA_PLANILLA
,MONTO_RECAUDADO
,FECHA_RECAUDACION
,NUMERO_OPERACION
,CUENTA_BANCARIA
,BANCO
,NUMERO_RECIBO
,SALDO_RECIBO_CAJA
,ASIENTO_RECAUDACION
,MODO_RECAUDA_DESCRIPCION
,ORIGEN_RECAUDA_DESCRIPCION
,ESTADO_PLANILLA
,ESTADO_COMPROBANTE
,ID_COMPROBANTE
,TIPO_PRODUCTO
,ID_MODO_RECAUDACION
,ID_DEPOSITO
,NUMERO_AGENTE
,NUMERO_COMPROBANTE
,GRUPO_PRODUCTO
,IND_ANIADA
,IND_PEN
,IND_USD
,IFRS_GRP
,ANIADA
,DESCRIPCION_UOA
,CLASIFICACION
,ONEROSIDAD
,CURRENT_DATETIME('America/Lima') AS FECHA_PROCESO
FROM `iter-data-storage-pv-uat.temp.TMP_POLIZA_DETALLE_COMPROBANTE_HIST`
;
-- ----------------------------------------------------------------------
-- Paso 3: DROP TABLAS TEMPORALES USADAS EN EL PROCESO
-- ----------------------------------------------------------------------
--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_PLANILLA_DEPOSITO`;
--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_POLIZA_DETALLE_COMPROBANTE_HIST`;

SELECT "OK" AS PROCESO;

END;