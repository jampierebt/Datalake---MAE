CREATE OR REPLACE PROCEDURE `iter-data-storage-pv-uat`.programs.sp_goldenrecord_md_persona()
BEGIN 
-- *********************************************************************
-- * Fecha          : 28/10/2021
-- * Autor          : Jayo Escalante, Geraldine Indira, Ramirez Hurtado Tito Jaime
-- * Tabla Destinos : - 
-- *                : - 
-- * Tablas Fuentes : - 
-- * Descripción    : 
-- *********************************************************************
-- *                       MODIFICACIONES POSTERIORES                  *
-- *===================================================================*
-- *===================================================================*
-- *   Fecha   | Persona |           Modificación Realizada            *
-- *           |         |                                            
-- *********************************************************************

-- ================================================================================================ 
-- ***                                   ACSELE                                                 *** 
-- ================================================================================================ 

-- ----------------------------------------------------------------------
-- Paso A0: CUSPP
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_RENTA_CONTRANTE_CUSPP_DATA`
AS
SELECT 
 CUSPP
,NUMERO_DOCUMENTO
,TIPO_DOCUMENTO
,UPPER(TO_HEX(SHA256(CONCAT(TIPO_DOCUMENTO,LPAD(NUMERO_DOCUMENTO,15,'0'))))) HASH_ID
FROM (
SELECT TRIM(CF_854)  AS NUMERO_DOCUMENTO
      ,(CASE WHEN cf_852='DNI' THEN '01'
             WHEN cf_852='Pasaporte' THEN '04'
             WHEN REGEXP_CONTAINS(UPPER(cf_852),'EXTRAN')=True AND REGEXP_CONTAINS(UPPER(cf_852),'CARNE')=True THEN '02'
       END) AS TIPO_DOCUMENTO
       ,TRIM(CF_1036) AS CUSPP
FROM `iter-data-storage-pv-uat.vtiger_data.VTIGER_CONTACTSCF_IS`
WHERE NULLIF(REPLACE(CF_854, '?',''),'') IS NOT NULL
UNION ALL
SELECT TRIM(CONTCF.cf_874) AS NUMERO_DOCUMENTO
      ,(CASE WHEN CONTCF.cf_872='DNI' THEN '01'
             WHEN CONTCF.cf_872='Pasaporte' THEN '04'
             WHEN CONTCF.cf_872='LE' THEN '01'
             WHEN REGEXP_CONTAINS(UPPER(CONTCF.cf_872),'EXTRAN')=True AND REGEXP_CONTAINS(UPPER(CONTCF.cf_872),'CARNE')=True THEN '02'
       END) AS TIPO_DOCUMENTO
      ,TRIM(POTCF.cf_948) AS CUSPP
        FROM `iter-data-storage-pv-uat.vtiger_data.VTIGER_POTENTIAL_RJ` POT 
   LEFT JOIN `iter-data-storage-pv-uat.vtiger_data.VTIGER_POTENTIALSCF_RJ` POTCF
          ON POT.POTENTIALID = POTCF.POTENTIALID
   LEFT JOIN `iter-data-storage-pv-uat.vtiger_data.VTIGER_CONTACTSCF_RJ` CONTCF 
          ON POT.CONTACT_ID = CONTCF.CONTACTID
       WHERE NULLIF(REPLACE(CONTCF.CF_874, '?',''),'') IS NOT NULL
UNION ALL
SELECT 
   PER.num_identificacion_pdt  AS NUMERO_DOCUMENTO
  ,EG1.CODIGO_CORPORATIVO      AS TIPO_DOCUMENTO
  ,NULLIF(TRIM(POL.num_cuispp),'') AS CUSPP
       FROM `iter-data-storage-pv-uat.rviadmin_data.personas_raw` PER
 INNER JOIN `iter-data-storage-pv-uat.rviadmin_data.poliza_raw` POL 
         ON POL.cod_tipo_id_causante = PER.cod_tipo_identificacion 
        AND POL.num_id_causante = PER.num_identificacion
 INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
         ON PER.cod_tipo_identificacion = EG1.VALOR_ORIGEN
        AND EG1.ID_FUENTE   = '02'
        AND EG1.CODIGO_TIPO = 'TIPODOC'
)
WHERE CUSPP IS NOT NULL
  AND NUMERO_DOCUMENTO IS NOT NULL
QUALIFY(ROW_NUMBER()OVER(PARTITION BY UPPER(TO_HEX(SHA256(CONCAT(TIPO_DOCUMENTO,LPAD(NUMERO_DOCUMENTO,15,'0'))))) ORDER BY TIPO_DOCUMENTO DESC ))=1
;

-- ----------------------------------------------------------------------
-- Paso A0: Universo de personas(CONTRATANTE-ASEGURADO-BENEFICIARIO) de Acsel_e con una poliza vigente
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_PERSONA_ACSELE_POLIZA_VIGENTE`
AS
(
SELECT DISTINCT HASH_ID
FROM (
  -- CONTRATANTE
      SELECT DISTINCT CON.HASH_ID
        FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
  INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.CONTRATANTE` CON
          ON CON.ID_PERSONA = POL.ID_PERSONA
          WHERE POL.ID_FUENTE='01'
            AND POL.ESTADO   ='VIGENTE'
            AND CON.HASH_ID IS NOT NULL
UNION ALL
  -- CONTRATANTE
      SELECT DISTINCT ASE.HASH_ID
        FROM `iter-data-storage-pv-uat.goldenrecord_data.POLIZA` POL
  INNER JOIN `iter-data-storage-pv-uat.goldenrecord_data.ASEGURADO` ASE
          ON ASE.NUMERO_POLIZA = POL.NUMERO_POLIZA
          WHERE POL.ID_FUENTE  ='01'
            AND POL.ESTADO     ='VIGENTE'
            AND ASE.HASH_ID IS NOT NULL
  -- ASEGURADO
  -- BENEFICIARIO
)
)
;

-- ----------------------------------------------------------------------
-- Paso A14: PERSONA - DATOS PERSONALES
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DATOS`
AS
SELECT 
 PER.THIRDPARTYID
,PER.APELLIDO_PATERNO,
		PER.APELLIDO_MATERNO,
		PER.NOMBRE,
		PER.SEGUNDO_NOMBRE,
		PER.RAZON_SOCIAL,
		PER.FECHA_NACIMIENTO,
    PER.GENERO,
		PER.ESTADO_CIVIL,
		PER.PROFESION,
		PER.PROFESION_CARGO_DESEMPASEG,
		PER.CODIGO_AFP,
		PER.NACIONALIDAD,
		PER.FECHA_FALLECIMIENTO,
		PER.CONDICION_FUMADOR,
    PER.FECHA_MATRIMONIO,
		PER.CENTRO_TRABAJO,
		PER.CODIGO_COLABORADOR,
		PER.TABLA_FUENTE
FROM (
SELECT DISTINCT
PNAT.STATIC AS THIRDPARTYID
,PNAT.PK
,INITCAP(PNAT.APELLIDOINPUT) AS APELLIDO_PATERNO
,INITCAP(PNAT.APELLIDOMATERNOINPUT) AS  APELLIDO_MATERNO
,INITCAP(PNAT.NOMBREINPUT) AS NOMBRE 
,INITCAP(PNAT.SEGUNDONOMBREINPUT) AS  SEGUNDO_NOMBRE  
,CAST(NULL AS STRING) RAZON_SOCIAL
,CASE
    WHEN EXTRACT(YEAR FROM SAFE_CAST(PNAT.FECHANACIMIENTOINPUT AS DATE)) <= 1900 OR IFNULL(PNAT.FECHANACIMIENTOINPUT, '') = '' THEN CAST(NULL AS DATE)
    ELSE SAFE_CAST(PNAT.FECHANACIMIENTOINPUT AS DATE)
  END FECHA_NACIMIENTO
,PNAT.SEXOINPUT GENERO 
,PNAT.ESTADOCIVILINPUT ESTADO_CIVIL 
,PNAT.PROFESIONINPUT PROFESION  
,UPPER(PNAT.CARGODESEMPASEGINPUT) PROFESION_CARGO_DESEMPASEG
,PNAT.CODIGOAFPINPUT CODIGO_AFP 
,IF(CHAR_LENGTH(IFNULL(NACIONALIDADINPUT, '')) = 0, 'NO IDENTIFICADA', UPPER(PNAT.NACIONALIDADINPUT)) NACIONALIDAD
,CASE
    WHEN EXTRACT(YEAR FROM SAFE_CAST(PNAT.FECHAFALLECIMIENTOINPUT AS DATE)) <= 1900 OR IFNULL(PNAT.FECHAFALLECIMIENTOINPUT, '') = '' THEN CAST(NULL AS DATE)
    ELSE SAFE_CAST(PNAT.FECHAFALLECIMIENTOINPUT AS DATE)
END FECHA_FALLECIMIENTO
,PNAT.FUMADORCONDICIONINPUT AS CONDICION_FUMADOR
,PNAT.FECHAMATRIMONIOINPUT AS FECHA_MATRIMONIO
,UPPER(PNAT.CENTROTRABASEGINPUT) AS  CENTRO_TRABAJO
,PNAT.CODIGOCOLABORADORINPUT AS CODIGO_COLABORADOR
,'PERSONANATURAL' AS TABLA_FUENTE
FROM `iter-data-storage-pv-uat.acsele_data.PERSONANATURAL_raw` PNAT 
UNION ALL
SELECT DISTINCT 
PJUR.STATIC AS THIRDPARTYID
,PJUR.PK
,CAST(NULL AS STRING) APELLIDO_PATERNO
,CAST(NULL AS STRING) APELLIDO_MATERNO
,CAST(NULL AS STRING) NOMBRE
,CAST(NULL AS STRING) SEGUNDO_NOMBRE
,UPPER(PJUR.NOMBRECOMPEMPINPUT) RAZON_SOCIAL
,CASE
    WHEN EXTRACT(YEAR FROM SAFE_CAST(PJUR.FECHACONSTITUCIONINPUT AS DATE)) <= 1900 OR IFNULL(PJUR.FECHACONSTITUCIONINPUT, '') = '' THEN CAST(NULL AS DATE)
    ELSE SAFE_CAST(PJUR.FECHACONSTITUCIONINPUT AS DATE)
 END FECHA_NACIMIENTO
,CAST(NULL AS STRING) GENERO
,CAST(NULL AS STRING) ESTADO_CIVIL
,CAST(NULL AS STRING) PROFESION
,CAST(NULL AS STRING) PROFESION_CARGO_DESEMPASEG
,CAST(NULL AS STRING) CODIGO_AFP
,CAST(NULL AS STRING) NACIONALIDAD
,CAST(NULL AS DATE)   FECHA_FALLECIMIENTO
,CAST(NULL AS STRING) CONDICION_FUMADOR
,CAST(NULL AS STRING) FECHA_MATRIMONIO
,CAST(NULL AS STRING) CENTRO_TRABAJO
,CAST(NULL AS STRING) CODIGO_COLABORADOR
,'PERSONAJURIDICA' AS TABLA_FUENTE
FROM `iter-data-storage-pv-uat.acsele_data.PERSONAJURIDICA_raw` PJUR
  ) PER
QUALIFY(ROW_NUMBER()OVER(PARTITION BY PER.THIRDPARTYID ORDER BY PER.THIRDPARTYID ASC ))=1
;

-- [OK] duplicados 
-- select THIRDPARTYID,COUNT(1) from `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DATOS` GROUP BY THIRDPARTYID HAVING COUNT(1)>1 

-- ----------------------------------------------------------------------
-- Paso A10: PERSONA - NUMERO DOCUMENTOS - Una persona en acsele, puede tener varios documentos.
-- ----------------------------------------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DOCUMENTOS`
AS
WITH TMP_DOCUMENT AS 
(
SELECT 
	STATIC
	,[STRUCT(PNAT.DOCUMENTOIDENTIDADINPUT  AS NUMERO_DOCUMENTO   , '01' AS TIPO_DOCUMENTO , PNAT.TIPO_PERSONA,1 AS PRIORIDAD_DOCUMENTO)
  ,STRUCT(PNAT.CARNETEXTRANJERIAINPUT     ,'02', PNAT.TIPO_PERSONA,2 AS PRIORIDAD_DOCUMENTO)
  ,STRUCT(PNAT.RUCNATURALINPUT     , '03', PNAT.TIPO_PERSONA,3 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.PASAPORTEINPUT     , '04', PNAT.TIPO_PERSONA,4 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETDIPLOMATICOINPUT     , '05', PNAT.TIPO_PERSONA,5 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETFUERZASARMADASINPUT      ,'06', PNAT.TIPO_PERSONA,6 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETIDENPOLICIAINPUT     ,'07', PNAT.TIPO_PERSONA,7 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.CARNETMINISTRABINPUT     ,'08', PNAT.TIPO_PERSONA,8 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.PARTIDANACIMIENTOINPUT     ,'09', PNAT.TIPO_PERSONA,9 AS PRIORIDAD_DOCUMENTO)
	,STRUCT(PNAT.LIBRETAMILITARINPUT     ,'10', PNAT.TIPO_PERSONA,10 AS PRIORIDAD_DOCUMENTO)] AS DOCUMENTO_PERSONA
FROM (
SELECT DISTINCT
STATIC
,DOCUMENTOIDENTIDADINPUT
,RUCNATURALINPUT
,PASAPORTEINPUT
,CARNETDIPLOMATICOINPUT
,CARNETEXTRANJERIAINPUT
,CARNETFUERZASARMADASINPUT
,CARNETIDENPOLICIAINPUT
,CARNETMINISTRABINPUT
,PARTIDANACIMIENTOINPUT
,LIBRETAMILITARINPUT
,'NATURAL' AS TIPO_PERSONA
FROM `iter-data-storage-pv-uat.acsele_data.PERSONANATURAL_raw`
) PNAT
UNION ALL
SELECT 
 STATIC
,[STRUCT(PJUR.RUCINPUT  AS NUMERO_DOCUMENTO   , '03' AS TIPO_DOCUMENTO,PJUR.TIPO_PERSONA,1 AS PRIORIDAD_DOCUMENTO)] AS DOCUMENTO_PERSONA
FROM (
SELECT DISTINCT STATIC, 
RUCINPUT, 
'JURIDICA' AS TIPO_PERSONA,
FROM `iter-data-storage-pv-uat.acsele_data.PERSONAJURIDICA_raw`
) PJUR
)
SELECT DISTINCT 
 DOC.STATIC
--,'ACSELE' AS FUENTE_ORIGEN
,PER.NUMERO_DOCUMENTO
--,PER.TIPO_DOCUMENTO 
,PER.TIPO_PERSONA
,PER.PRIORIDAD_DOCUMENTO
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(PER.NUMERO_DOCUMENTO,15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
      FROM TMP_DOCUMENT DOC
          ,UNNEST(DOCUMENTO_PERSONA) PER
LEFT JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
       ON EG1.VALOR_ORIGEN = PER.TIPO_DOCUMENTO 
      AND EG1.ID_FUENTE    ='01' 
    WHERE PER.NUMERO_DOCUMENTO IS NOT NULL
;

-- DUPLICADOS : [ERROR]
--SELECT COUNT(1),HASH_ID FROM `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DOCUMENTOS` GROUP BY HASH_ID HAVING COUNT(1)>1;

-- -------------------------------------
-- TABLA FINAL .......
-- -------------------------------------
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
CLUSTER BY TIPO_PERSONA,PRIORIDAD_FUENTE
AS 
(
SELECT 
-- PER.STATIC
 PER.HASH_ID
,PER.NUMERO_DOCUMENTO
,PER.TIPO_DOCUMENTO
,PER.ID_TIPO_DOCUMENTO
,PER.TIPO_PERSONA
--,PER.PRIORIDAD_DOCUMENTO
--,PER.FUENTE_ORIGEN
,DAT.APELLIDO_PATERNO
,DAT.APELLIDO_MATERNO
,DAT.NOMBRE
,DAT.SEGUNDO_NOMBRE
,DAT.RAZON_SOCIAL
,DAT.FECHA_NACIMIENTO
,TRIM(UPPER(DAT.GENERO)) AS GENERO
,GEN.CODIGO_GLOBAL AS ID_GENERO
,TRIM(UPPER(DAT.ESTADO_CIVIL)) AS ESTADO_CIVIL
,EST.CODIGO_GLOBAL AS ID_ESTADO_CIVIL
,DAT.PROFESION
,DAT.PROFESION_CARGO_DESEMPASEG AS PROFESION_CARGO
,DAT.CODIGO_AFP AS AFP
,CAST(NULL AS STRING) AS CUSPP
,DAT.NACIONALIDAD
,DAT.FECHA_FALLECIMIENTO
,TRIM(UPPER(DAT.CONDICION_FUMADOR)) AS CONDICION_FUMADOR
,FUM.CODIGO_GLOBAL AS ID_CONDICION_FUMADOR
,DAT.FECHA_MATRIMONIO
,DAT.CENTRO_TRABAJO
,DAT.CODIGO_COLABORADOR
--,DAT.TABLA_FUENTE
,'01' AS ID_FUENTE
,'Acsel/E' AS NOMBRE_FUENTE
,IF( TPAPV.HASH_ID IS NOT NULL,1,91 )  AS PRIORIDAD_FUENTE
, CURRENT_DATE AS FECHA_CARGA_REGISTRO
       FROM `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DOCUMENTOS` PER
 INNER JOIN `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DATOS`  DAT
         ON PER.STATIC = DAT.THIRDPARTYID
 LEFT JOIN UNNEST(ARRAY<STRUCT<CODIGO_GLOBAL STRING,NOMBRE_GLOBAL STRING,VALOR_ORIGEN STRING >>[('02','MASCULINO','MASCULINO'),('01','FEMENINO','FEMENINO')]) GEN
        ON GEN.VALOR_ORIGEN = TRIM(UPPER(DAT.GENERO))
 LEFT JOIN UNNEST(ARRAY<STRUCT<CODIGO_GLOBAL STRING,NOMBRE_GLOBAL STRING,VALOR_ORIGEN STRING >>[('01','SI FUMA','SI FUMA'),('02','NO FUMA','NO FUMA')]) FUM
        ON FUM.VALOR_ORIGEN = TRIM(UPPER(DAT.CONDICION_FUMADOR))
 LEFT JOIN UNNEST(ARRAY<STRUCT<CODIGO_GLOBAL STRING,NOMBRE_GLOBAL STRING,VALOR_ORIGEN STRING >>[('02','SOLTERO(A)','SOLTERO(A)'),('01','CASADO(A)','CASADO(A)'),('04','VIUDO(A)','VIUDO(A)')
       ,('05','CONVIVIENTE','CONVIVIENTE')
			 ,('06','SEPARADO(A)','SEPARADO(A)')
			 ,('03','DIVORCIADO(A)','DIVORCIADO(A)')]) EST
        ON EST.VALOR_ORIGEN = TRIM(UPPER(DAT.ESTADO_CIVIL))
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_PERSONA_ACSELE_POLIZA_VIGENTE` TPAPV 
        ON PER.HASH_ID=TPAPV.HASH_ID
QUALIFY(ROW_NUMBER()OVER(PARTITION BY PER.HASH_ID ORDER BY PER.STATIC DESC ))=1
);

-- SE QUITARON DUPLICADOS: [OK-REVISAR]
-- SELECT COUNT(1),HASH_ID FROM `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO` GROUP BY HASH_ID HAVING COUNT(1)>1;


-- ================================================================================================ 
-- ***                                   RENTA PARTICULAR                                       *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,FECHA_NACIMIENTO
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
		,FECHA_NACIMIENTO
    ,'03' AS ID_FUENTE
    ,'Renta Particular' AS NOMBRE_FUENTE
		,2 AS PRIORIDAD_FUENTE
FROM
(
SELECT DISTINCT
 PER.gls_nro_identificacion AS NUMERO_DOCUMENTO
,TRIM(INITCAP(PER.gls_ape_paterno)) AS APELLIDO_PATERNO
,TRIM(INITCAP(PER.gls_ape_materno)) AS APELLIDO_MATERNO
,DATE(PER.fec_nacimiento,'America/Lima') AS FECHA_NACIMIENTO
,TRIM(INITCAP(PER.gls_nom_persona)) AS NOMBRE
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.gls_nom_persona) END )AS RAZON_SOCIAL
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.gls_nro_identificacion),15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
	FROM `iter-data-storage-pv-uat.admwr_data.persona_raw` PER
	INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
	ON CAST(PER.cod_tipo_identificacion AS STRING) = EG1.VALOR_ORIGEN 
	AND EG1.ID_FUENTE = '03' 
	AND EG1.CODIGO_TIPO = 'TIPODOC' 
	AND PER.gls_nro_identificacion IS NOT NULL 
	AND PER.cod_tipo_identificacion IS NOT NULL
);

-- ================================================================================================ 
-- ***                                   RENTA VITALICIA                                        *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,FECHA_NACIMIENTO
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
		,FECHA_NACIMIENTO
    ,'02' AS ID_FUENTE
    ,'Renta Vitalicia' AS NOMBRE_FUENTE
		,3 AS PRIORIDAD_FUENTE
FROM
(
SELECT 
 PER.num_identificacion_pdt AS NUMERO_DOCUMENTO
,TRIM(INITCAP(PER.ape_paterno)) AS APELLIDO_PATERNO
,TRIM(INITCAP(PER.ape_materno)) AS APELLIDO_MATERNO
,DATE(PER.fec_nacimiento,'America/Lima') AS FECHA_NACIMIENTO
,TRIM(INITCAP(PER.nom_persona)) AS NOMBRE
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.nom_persona) END )AS RAZON_SOCIAL
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.num_identificacion_pdt),15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
      FROM `iter-data-storage-pv-uat.rviadmin_data.personas_raw` PER 
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
        ON CAST(PER.cod_tipo_identificacion AS STRING) = EG1.VALOR_ORIGEN 
				AND EG1.ID_FUENTE = '02' 
				AND  EG1.CODIGO_TIPO = 'TIPODOC' 
				AND PER.num_identificacion_pdt IS NOT NULL 
				AND PER.cod_tipo_identificacion IS NOT NULL
);

-- ================================================================================================ 
-- ***                                   VEHICULAR                                              *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,FECHA_NACIMIENTO
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
		,FECHA_NACIMIENTO
    ,'08' AS ID_FUENTE
    ,'SalvaDB' AS NOMBRE_FUENTE
		,4 AS PRIORIDAD_FUENTE
FROM
(
SELECT 
 PER.document_number AS NUMERO_DOCUMENTO
,INITCAP(TRIM(PER.first_name)) AS NOMBRE
,TRIM(INITCAP(PER.first_last_name)) AS APELLIDO_PATERNO
,TRIM(INITCAP(PER.second_last_name)) AS APELLIDO_MATERNO
,PER.birth_date AS FECHA_NACIMIENTO
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.first_name) END )AS RAZON_SOCIAL
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.document_number),15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
	from `iter-data-storage-pv-uat.salvadb_data.client_raw` PER
	INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
      ON CAST(PER.document_type_id AS STRING) = EG1.VALOR_ORIGEN 
    AND EG1.ID_FUENTE   = '08' 
    AND EG1.CODIGO_TIPO = 'TIPODOC' 
    AND PER.document_number IS NOT NULL 
    AND PER.document_type_id IS NOT NULL
)
;

-- ================================================================================================ 
-- ***                                     VIDA CASH                                           *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,FECHA_NACIMIENTO
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
		,FECHA_NACIMIENTO
    ,'VIDACASH' AS ID_FUENTE
    ,'VIDACASH' AS NOMBRE_FUENTE
		,5 AS PRIORIDAD_FUENTE
FROM
(
SELECT 
 PER.NUMERO_DOCUMENTO AS NUMERO_DOCUMENTO
,TRIM(INITCAP(PER.APELLIDO_PATERNO)) AS APELLIDO_PATERNO
,TRIM(INITCAP(PER.APELLIDO_MATERNO)) AS APELLIDO_MATERNO
,SAFE.PARSE_DATE("%Y-%m-%d",PER.FECHA_NACIMIENTO) AS FECHA_NACIMIENTO
,TRIM(INITCAP(PER.NOMBRE)) AS NOMBRE
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.NOMBRE) END )AS RAZON_SOCIAL
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.NUMERO_DOCUMENTO),15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
	      FROM `iter-data-storage-pv-uat.vidacash_data.CLIENTE_raw` PER
  INNER JOIN `iter-data-storage-pv-uat.vidacash_data.POLIZA_raw` B
          ON PER.ID_CLIENTE      = B.ID_CLIENTE
	INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
	 ON CAST(PER.id_tipo_documento AS STRING) = EG1.VALOR_ORIGEN 
	AND	EG1.ID_FUENTE   = '10' 
	AND	EG1.CODIGO_TIPO = 'TIPODOC' 
	AND	PER.id_tipo_documento IS NOT NULL 
	AND	PER.numero_documento IS NOT NULL
 WHERE TRIM(COALESCE(B.NUMERO_POLIZA,''))<>''
   AND TRIM(COALESCE(PER.NUMERO_DOCUMENTO,''))<>''
);

-- ================================================================================================ 
-- ***                                   VIAJES                                                 *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,FECHA_NACIMIENTO
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
		,FECHA_NACIMIENTO
    ,'07' AS ID_FUENTE
    ,'Travel-DB' AS NOMBRE_FUENTE
		,6 AS PRIORIDAD_FUENTE
FROM
(
SELECT DISTINCT
PER.NUMERO_DOCUMENTO AS NUMERO_DOCUMENTO
,TRIM(INITCAP(PER.apellido_paterno)) AS APELLIDO_PATERNO
,TRIM(INITCAP(PER.apellido_materno)) AS APELLIDO_MATERNO
,DATE(PER.fecha_nacimiento,'America/Lima') AS FECHA_NACIMIENTO
,TRIM(INITCAP(PER.nombres)) AS NOMBRE
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.nombres) END )AS RAZON_SOCIAL
,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
,upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.NUMERO_DOCUMENTO ),15,'0'))))) AS HASH_ID
,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
	      FROM `iter-data-storage-pv-uat.traveldb_data.cliente_venta_raw` PER
	INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1 
            ON CAST(PER.tipo_documento AS STRING) = EG1.VALOR_ORIGEN 
            AND EG1.ID_FUENTE   = '07' 
            AND EG1.CODIGO_TIPO = 'TIPODOC' 
            AND PER.NUMERO_DOCUMENTO IS NOT NULL 
            AND PER.tipo_documento IS NOT NULL 
);

-- ================================================================================================ 
-- ***                                   WEB SOAT                                               *** 
-- ================================================================================================ 
INSERT INTO `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`
(
 HASH_ID
,NUMERO_DOCUMENTO
,ID_TIPO_DOCUMENTO
,TIPO_DOCUMENTO
,APELLIDO_PATERNO
,APELLIDO_MATERNO
,NOMBRE
,RAZON_SOCIAL
,TIPO_PERSONA	
,ID_FUENTE
,NOMBRE_FUENTE
,PRIORIDAD_FUENTE
)
SELECT
     HASH_ID
		,NUMERO_DOCUMENTO
		,ID_TIPO_DOCUMENTO
		,TIPO_DOCUMENTO
		,APELLIDO_PATERNO
		,APELLIDO_MATERNO
		,NOMBRE
		,RAZON_SOCIAL
		,TIPO_PERSONA	
    ,'06' AS ID_FUENTE
    ,'WebSOAT' AS NOMBRE_FUENTE
		,7 AS PRIORIDAD_FUENTE
FROM
(
SELECT       upper(to_hex(sha256(CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.documento),15,'0'))))) AS HASH_ID
            ,PER.documento          AS NUMERO_DOCUMENTO
            ,EG1.CODIGO_GLOBAL      AS ID_TIPO_DOCUMENTO
            ,EG1.NOMBRE_GLOBAL      AS TIPO_DOCUMENTO
            ,TRIM(INITCAP(PER.APE_PATERNO)) AS APELLIDO_PATERNO
            ,TRIM(INITCAP(PER.APE_MATERNO)) AS APELLIDO_MATERNO
            ,TRIM(INITCAP(PER.NOMBRE)) AS NOMBRE
            ,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN INITCAP(PER.NOMBRE) END )AS RAZON_SOCIAL
            ,(CASE WHEN EG1.CODIGO_CORPORATIVO='03' THEN 'JURIDICA' ELSE 'NATURAL' END) AS TIPO_PERSONA
      FROM `iter-data-storage-pv-uat.soat_data.ma_cliente_raw` PER
INNER JOIN `iter-data-storage-pv-uat.soat_data.ma_venta_raw` VEN 
        ON VEN.idcliente = PER.idcliente
INNER JOIN `iter-data-storage-pv-uat.config_data.CNF_EQUIVALENCIA_GLOBAL` EG1
        ON CAST(PER.idtipo_documento AS STRING) = EG1.VALOR_ORIGEN 
        AND EG1.ID_FUENTE      = '06' 
        AND EG1.CODIGO_TIPO    = 'TIPODOC' 
        AND PER.documento IS NOT NULL 
        AND PER.idtipo_documento IS NOT NULL
QUALIFY(ROW_NUMBER()OVER(PARTITION BY CONCAT(EG1.CODIGO_CORPORATIVO,LPAD(TRIM(PER.documento),15,'0')) ORDER BY PER.fecha_creacion DESC ))=1
)
;

-- ================================================================================================ 
-- ***                                     MD_PERSONA                                           *** 
-- ================================================================================================ 
CREATE OR REPLACE TABLE `iter-data-storage-pv-uat.master_party.MD_PERSONA`
CLUSTER BY TIPO_PERSONA
AS
(
SELECT
 FNT.HASH_ID
,FNT.NUMERO_DOCUMENTO
,FNT.TIPO_DOCUMENTO
,FNT.ID_TIPO_DOCUMENTO
,FNT.TIPO_PERSONA
,FNT.APELLIDO_PATERNO
,FNT.APELLIDO_MATERNO
,FNT.NOMBRE
,FNT.SEGUNDO_NOMBRE
,FNT.RAZON_SOCIAL
,FNT.FECHA_NACIMIENTO
,FNT.GENERO
,FNT.ID_GENERO
,FNT.ESTADO_CIVIL
,FNT.ID_ESTADO_CIVIL
,FNT.PROFESION
,FNT.PROFESION_CARGO
,FNT.AFP
,COALESCE(FNT.CUSPP,CUS.CUSPP) AS CUSPP
,FNT.NACIONALIDAD
,FNT.FECHA_FALLECIMIENTO
,FNT.CONDICION_FUMADOR
,FNT.ID_CONDICION_FUMADOR
,FNT.FECHA_MATRIMONIO
,FNT.CENTRO_TRABAJO
,FNT.CODIGO_COLABORADOR
,FNT.FECHA_CARGA_REGISTRO
     FROM `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO` FNT
LEFT JOIN `iter-data-storage-pv-uat.temp.TMP_RENTA_CONTRANTE_CUSPP_DATA` CUS
       ON FNT.HASH_ID=CUS.HASH_ID
QUALIFY(ROW_NUMBER()OVER(PARTITION BY FNT.HASH_ID ORDER BY FNT.PRIORIDAD_FUENTE ASC))=1
)
;

-- ----------------------------------------------------------------------
-- Limpiar temporales
-- ----------------------------------------------------------------------

--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DOCUMENTOS`;
--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_ACSELE_PERSONA_DATOS`;
--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_MD_PERSONA_UNIVERSO`;
--DROP TABLE IF EXISTS `iter-data-storage-pv-uat.temp.TMP_RENTA_CONTRANTE_CUSPP_DATA`;

SELECT 'OK' AS ESTADO;

END;